"main.java.org.apache.commons.math3","=mathmain3.6/src<main.java.org.apache.commons.math3"
"main.java.org.apache.commons.math3.analysis","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis"
"main.java.org.apache.commons.math3.analysis.differentiation","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation"
"main.java.org.apache.commons.math3.analysis.function","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function"
"main.java.org.apache.commons.math3.analysis.integration","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration"
"main.java.org.apache.commons.math3.analysis.integration.gauss","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss"
"main.java.org.apache.commons.math3.analysis.interpolation","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation"
"main.java.org.apache.commons.math3.analysis.polynomials","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials"
"main.java.org.apache.commons.math3.analysis.solvers","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers"
"main.java.org.apache.commons.math3.complex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex"
"main.java.org.apache.commons.math3.dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp"
"main.java.org.apache.commons.math3.distribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution"
"main.java.org.apache.commons.math3.distribution.fitting","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting"
"main.java.org.apache.commons.math3.exception","=mathmain3.6/src<main.java.org.apache.commons.math3.exception"
"main.java.org.apache.commons.math3.exception.util","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util"
"main.java.org.apache.commons.math3.filter","=mathmain3.6/src<main.java.org.apache.commons.math3.filter"
"main.java.org.apache.commons.math3.fitting","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting"
"main.java.org.apache.commons.math3.fitting.leastsquares","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares"
"main.java.org.apache.commons.math3.fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction"
"main.java.org.apache.commons.math3.genetics","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics"
"main.java.org.apache.commons.math3.geometry","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry"
"main.java.org.apache.commons.math3.geometry.enclosing","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing"
"main.java.org.apache.commons.math3.geometry.euclidean.oned","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned"
"main.java.org.apache.commons.math3.geometry.euclidean.threed","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed"
"main.java.org.apache.commons.math3.geometry.euclidean.twod","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod"
"main.java.org.apache.commons.math3.geometry.euclidean.twod.hull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull"
"main.java.org.apache.commons.math3.geometry.hull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.hull"
"main.java.org.apache.commons.math3.geometry.partitioning","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning"
"main.java.org.apache.commons.math3.geometry.partitioning.utilities","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities"
"main.java.org.apache.commons.math3.geometry.spherical.oned","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned"
"main.java.org.apache.commons.math3.geometry.spherical.twod","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod"
"main.java.org.apache.commons.math3.linear","=mathmain3.6/src<main.java.org.apache.commons.math3.linear"
"main.java.org.apache.commons.math3.ml","=mathmain3.6/src<main.java.org.apache.commons.math3.ml"
"main.java.org.apache.commons.math3.ml.clustering","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering"
"main.java.org.apache.commons.math3.ml.clustering.evaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering.evaluation"
"main.java.org.apache.commons.math3.ml.distance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance"
"main.java.org.apache.commons.math3.ml.neuralnet","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet"
"main.java.org.apache.commons.math3.ml.neuralnet.oned","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned"
"main.java.org.apache.commons.math3.ml.neuralnet.sofm","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm"
"main.java.org.apache.commons.math3.ml.neuralnet.sofm.util","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util"
"main.java.org.apache.commons.math3.ml.neuralnet.twod","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod"
"main.java.org.apache.commons.math3.ml.neuralnet.twod.util","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util"
"main.java.org.apache.commons.math3.ode","=mathmain3.6/src<main.java.org.apache.commons.math3.ode"
"main.java.org.apache.commons.math3.ode.events","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events"
"main.java.org.apache.commons.math3.ode.nonstiff","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff"
"main.java.org.apache.commons.math3.ode.sampling","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling"
"main.java.org.apache.commons.math3.optim","=mathmain3.6/src<main.java.org.apache.commons.math3.optim"
"main.java.org.apache.commons.math3.optim.linear","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear"
"main.java.org.apache.commons.math3.optim.nonlinear.scalar","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar"
"main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient"
"main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
"main.java.org.apache.commons.math3.optim.nonlinear.vector","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector"
"main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian"
"main.java.org.apache.commons.math3.optim.univariate","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate"
"main.java.org.apache.commons.math3.optimization","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization"
"main.java.org.apache.commons.math3.optimization.direct","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct"
"main.java.org.apache.commons.math3.optimization.fitting","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting"
"main.java.org.apache.commons.math3.optimization.general","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general"
"main.java.org.apache.commons.math3.optimization.linear","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear"
"main.java.org.apache.commons.math3.optimization.univariate","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate"
"main.java.org.apache.commons.math3.primes","=mathmain3.6/src<main.java.org.apache.commons.math3.primes"
"main.java.org.apache.commons.math3.random","=mathmain3.6/src<main.java.org.apache.commons.math3.random"
"main.java.org.apache.commons.math3.special","=mathmain3.6/src<main.java.org.apache.commons.math3.special"
"main.java.org.apache.commons.math3.stat","=mathmain3.6/src<main.java.org.apache.commons.math3.stat"
"main.java.org.apache.commons.math3.stat.clustering","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering"
"main.java.org.apache.commons.math3.stat.correlation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation"
"main.java.org.apache.commons.math3.stat.descriptive","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive"
"main.java.org.apache.commons.math3.stat.descriptive.moment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment"
"main.java.org.apache.commons.math3.stat.descriptive.rank","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank"
"main.java.org.apache.commons.math3.stat.descriptive.summary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary"
"main.java.org.apache.commons.math3.stat.inference","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference"
"main.java.org.apache.commons.math3.stat.interval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval"
"main.java.org.apache.commons.math3.stat.ranking","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking"
"main.java.org.apache.commons.math3.stat.regression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression"
"main.java.org.apache.commons.math3.transform","=mathmain3.6/src<main.java.org.apache.commons.math3.transform"
"main.java.org.apache.commons.math3.util","=mathmain3.6/src<main.java.org.apache.commons.math3.util"
"test.java.org.apache.commons.math3","=mathmain3.6/src<test.java.org.apache.commons.math3"
"test.java.org.apache.commons.math3.analysis","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis"
"test.java.org.apache.commons.math3.analysis.differentiation","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation"
"test.java.org.apache.commons.math3.analysis.function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function"
"test.java.org.apache.commons.math3.analysis.integration","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration"
"test.java.org.apache.commons.math3.analysis.integration.gauss","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss"
"test.java.org.apache.commons.math3.analysis.interpolation","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation"
"test.java.org.apache.commons.math3.analysis.polynomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials"
"test.java.org.apache.commons.math3.analysis.solvers","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers"
"test.java.org.apache.commons.math3.complex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex"
"test.java.org.apache.commons.math3.dfp","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp"
"test.java.org.apache.commons.math3.distribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution"
"test.java.org.apache.commons.math3.distribution.fitting","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting"
"test.java.org.apache.commons.math3.exception","=mathmain3.6/src<test.java.org.apache.commons.math3.exception"
"test.java.org.apache.commons.math3.exception.util","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util"
"test.java.org.apache.commons.math3.filter","=mathmain3.6/src<test.java.org.apache.commons.math3.filter"
"test.java.org.apache.commons.math3.fitting","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting"
"test.java.org.apache.commons.math3.fitting.leastsquares","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares"
"test.java.org.apache.commons.math3.fraction","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction"
"test.java.org.apache.commons.math3.genetics","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics"
"test.java.org.apache.commons.math3.geometry.enclosing","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing"
"test.java.org.apache.commons.math3.geometry.euclidean.oned","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned"
"test.java.org.apache.commons.math3.geometry.euclidean.threed","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed"
"test.java.org.apache.commons.math3.geometry.euclidean.twod","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod"
"test.java.org.apache.commons.math3.geometry.euclidean.twod.hull","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull"
"test.java.org.apache.commons.math3.geometry.partitioning","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning"
"test.java.org.apache.commons.math3.geometry.partitioning.utilities","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities"
"test.java.org.apache.commons.math3.geometry.spherical.oned","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned"
"test.java.org.apache.commons.math3.geometry.spherical.twod","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod"
"test.java.org.apache.commons.math3.linear","=mathmain3.6/src<test.java.org.apache.commons.math3.linear"
"test.java.org.apache.commons.math3.ml.clustering","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering"
"test.java.org.apache.commons.math3.ml.clustering.evaluation","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering.evaluation"
"test.java.org.apache.commons.math3.ml.distance","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance"
"test.java.org.apache.commons.math3.ml.neuralnet","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet"
"test.java.org.apache.commons.math3.ml.neuralnet.oned","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned"
"test.java.org.apache.commons.math3.ml.neuralnet.sofm","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm"
"test.java.org.apache.commons.math3.ml.neuralnet.sofm.util","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util"
"test.java.org.apache.commons.math3.ml.neuralnet.twod","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod"
"test.java.org.apache.commons.math3.ml.neuralnet.twod.util","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod.util"
"test.java.org.apache.commons.math3.ode","=mathmain3.6/src<test.java.org.apache.commons.math3.ode"
"test.java.org.apache.commons.math3.ode.events","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events"
"test.java.org.apache.commons.math3.ode.nonstiff","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff"
"test.java.org.apache.commons.math3.ode.sampling","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling"
"test.java.org.apache.commons.math3.optim","=mathmain3.6/src<test.java.org.apache.commons.math3.optim"
"test.java.org.apache.commons.math3.optim.linear","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear"
"test.java.org.apache.commons.math3.optim.nonlinear.scalar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar"
"test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient"
"test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv"
"test.java.org.apache.commons.math3.optim.nonlinear.vector","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector"
"test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian"
"test.java.org.apache.commons.math3.optim.univariate","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate"
"test.java.org.apache.commons.math3.optimization","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization"
"test.java.org.apache.commons.math3.optimization.direct","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct"
"test.java.org.apache.commons.math3.optimization.fitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting"
"test.java.org.apache.commons.math3.optimization.general","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general"
"test.java.org.apache.commons.math3.optimization.linear","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear"
"test.java.org.apache.commons.math3.optimization.univariate","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate"
"test.java.org.apache.commons.math3.primes","=mathmain3.6/src<test.java.org.apache.commons.math3.primes"
"test.java.org.apache.commons.math3.random","=mathmain3.6/src<test.java.org.apache.commons.math3.random"
"test.java.org.apache.commons.math3.special","=mathmain3.6/src<test.java.org.apache.commons.math3.special"
"test.java.org.apache.commons.math3.stat","=mathmain3.6/src<test.java.org.apache.commons.math3.stat"
"test.java.org.apache.commons.math3.stat.clustering","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering"
"test.java.org.apache.commons.math3.stat.correlation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation"
"test.java.org.apache.commons.math3.stat.data","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data"
"test.java.org.apache.commons.math3.stat.descriptive","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive"
"test.java.org.apache.commons.math3.stat.descriptive.moment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment"
"test.java.org.apache.commons.math3.stat.descriptive.rank","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank"
"test.java.org.apache.commons.math3.stat.descriptive.summary","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary"
"test.java.org.apache.commons.math3.stat.inference","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference"
"test.java.org.apache.commons.math3.stat.interval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval"
"test.java.org.apache.commons.math3.stat.ranking","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking"
"test.java.org.apache.commons.math3.stat.regression","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression"
"test.java.org.apache.commons.math3.transform","=mathmain3.6/src<test.java.org.apache.commons.math3.transform"
"test.java.org.apache.commons.math3.util","=mathmain3.6/src<test.java.org.apache.commons.math3.util"
"test.maxima.special.RealFunctionValidation","=mathmain3.6/src<test.maxima.special.RealFunctionValidation"
"userguide.java.org.apache.commons.math3.userguide","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide"
"userguide.java.org.apache.commons.math3.userguide.filter","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter"
"userguide.java.org.apache.commons.math3.userguide.genetics","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics"
"userguide.java.org.apache.commons.math3.userguide.geometry","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry"
"userguide.java.org.apache.commons.math3.userguide.sofm","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm"
"Field","=mathmain3.6/src<main.java.org.apache.commons.math3{Field.java[Field"
"FieldElement","=mathmain3.6/src<main.java.org.apache.commons.math3{FieldElement.java[FieldElement"
"RealFieldElement","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement"
"FunctionUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils"
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3{Field.java[Field~getOne"
"getField","=mathmain3.6/src<main.java.org.apache.commons.math3{FieldElement.java[FieldElement~getField"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~abs"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~add~\\[QUnivariateFunction;"
"getRuntimeClass","=mathmain3.6/src<main.java.org.apache.commons.math3{Field.java[Field~getRuntimeClass"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3{FieldElement.java[FieldElement~multiply~I"
"f",\N
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~acos"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3{Field.java[Field~getZero"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~add~\\[QDifferentiableUnivariateFunction;"
"n",\N
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~acosh"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3{FieldElement.java[FieldElement~negate"
"f",\N
"MultivariateMatrixFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateMatrixFunction.java[MultivariateMatrixFunction"
"collector","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~collector~QBivariateFunction;~QUnivariateFunction;~D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateMatrixFunction.java[MultivariateMatrixFunction~value~\\[D"
"ParametricUnivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{ParametricUnivariateFunction.java[ParametricUnivariateFunction"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~add~D"
"gradient","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{ParametricUnivariateFunction.java[ParametricUnivariateFunction~gradient~D~\\[D"
"point",\N
"combiner",\N
"a",\N
"f",\N
"x",\N
"MultivariateVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateVectorFunction.java[MultivariateVectorFunction"
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~asin"
"initialValue",\N
"parameters",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateVectorFunction.java[MultivariateVectorFunction~value~\\[D"
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~asinh"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{ParametricUnivariateFunction.java[ParametricUnivariateFunction~value~D~\\[D"
"collector","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~collector~QBivariateFunction;~D"
"point",\N
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~atan"
"x",\N
"combiner",\N
"BivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{BivariateFunction.java[BivariateFunction"
"parameters",\N
"initialValue",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{BivariateFunction.java[BivariateFunction~value~D~D"
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~atanh"
"MultivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateFunction.java[MultivariateFunction"
"combine","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~combine~QBivariateFunction;~QUnivariateFunction;~QUnivariateFunction;"
"x",\N
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~cbrt"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{MultivariateFunction.java[MultivariateFunction~value~\\[D"
"y",\N
"combiner",\N
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~ceil"
"point",\N
"f",\N
"DifferentiableMultivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableMultivariateFunction.java[DifferentiableMultivariateFunction"
"DifferentiableUnivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateFunction.java[DifferentiableUnivariateFunction"
"g",\N
"gradient","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableMultivariateFunction.java[DifferentiableMultivariateFunction~gradient"
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~copySign~QT;"
"derivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateFunction.java[DifferentiableUnivariateFunction~derivative"
"compose","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~compose~\\[QUnivariateFunction;"
"partialDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableMultivariateFunction.java[DifferentiableMultivariateFunction~partialDerivative~I"
"sign",\N
"TrivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{TrivariateFunction.java[TrivariateFunction"
"f",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~copySign~D"
"k",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{TrivariateFunction.java[TrivariateFunction~value~D~D~D"
"compose","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~compose~\\[QDifferentiableUnivariateFunction;"
"sign",\N
"UnivariateMatrixFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateMatrixFunction.java[UnivariateMatrixFunction"
"x",\N
"f",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateMatrixFunction.java[UnivariateMatrixFunction~value~D"
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~cos"
"y",\N
"fix1stArgument","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~fix1stArgument~QBivariateFunction;~D"
"x",\N
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~cosh"
"z",\N
"f",\N
"UnivariateVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateVectorFunction.java[UnivariateVectorFunction"
"DifferentiableUnivariateMatrixFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateMatrixFunction.java[DifferentiableUnivariateMatrixFunction"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~divide~D"
"fixed",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateVectorFunction.java[UnivariateVectorFunction~value~D"
"derivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateMatrixFunction.java[DifferentiableUnivariateMatrixFunction~derivative"
"a",\N
"fix2ndArgument","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~fix2ndArgument~QBivariateFunction;~D"
"x",\N
"DifferentiableMultivariateVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableMultivariateVectorFunction.java[DifferentiableMultivariateVectorFunction"
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~exp"
"f",\N
"DifferentiableUnivariateVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateVectorFunction.java[DifferentiableUnivariateVectorFunction"
"jacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableMultivariateVectorFunction.java[DifferentiableMultivariateVectorFunction~jacobian"
"fixed",\N
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~expm1"
"derivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{DifferentiableUnivariateVectorFunction.java[DifferentiableUnivariateVectorFunction~derivative"
"RealFieldUnivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{RealFieldUnivariateFunction.java[RealFieldUnivariateFunction"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~multiply~\\[QUnivariateFunction;"
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~floor"
"UnivariateFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateFunction.java[UnivariateFunction"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{RealFieldUnivariateFunction.java[RealFieldUnivariateFunction~value~QT;"
"f",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{UnivariateFunction.java[UnivariateFunction~value~D"
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~getReal"
"x",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis{FunctionUtils.java[FunctionUtils~multiply~\\[QDifferentiableUnivariateFunction;"
"x",\N
"UnivariateDifferentiableFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateDifferentiableFunction.java[UnivariateDifferentiableFunction"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~QT;~QT;~QT;~QT;"
"f",\N
"UnivariateDifferentiableMatrixFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateDifferentiableMatrixFunction.java[UnivariateDifferentiableMatrixFunction"
"UnivariateDifferentiableVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateDifferentiableVectorFunction.java[UnivariateDifferentiableVectorFunction"
"a1",\N
"UnivariateVectorFunctionDifferentiator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateVectorFunctionDifferentiator.java[UnivariateVectorFunctionDifferentiator"
"GradientFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{GradientFunction.java[GradientFunction"
"MultivariateDifferentiableVectorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{MultivariateDifferentiableVectorFunction.java[MultivariateDifferentiableVectorFunction"
"b1",\N
"GradientFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{GradientFunction.java[GradientFunction~GradientFunction~QMultivariateDifferentiableFunction;"
"UnivariateFunctionDifferentiator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateFunctionDifferentiator.java[UnivariateFunctionDifferentiator"
"DerivativeStructure","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure"
"a2",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~abs"
"FiniteDifferencesDifferentiator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiator.java[FiniteDifferencesDifferentiator"
"f",\N
"b2",\N
"getNbPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiator.java[FiniteDifferencesDifferentiator~getNbPoints"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{GradientFunction.java[GradientFunction~value~\\[D"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~acos"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~D~QT;~D~QT;"
"getStepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiator.java[FiniteDifferencesDifferentiator~getStepSize"
"point",\N
"a1",\N
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~acosh"
"UnivariateMatrixFunctionDifferentiator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{UnivariateMatrixFunctionDifferentiator.java[UnivariateMatrixFunctionDifferentiator"
"JacobianFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{JacobianFunction.java[JacobianFunction"
"b1",\N
"JacobianFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{JacobianFunction.java[JacobianFunction~JacobianFunction~QMultivariateDifferentiableVectorFunction;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~add~D"
"a2",\N
"DSCompiler","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~acos~\\[D~I~\\[D~I"
"b2",\N
"f",\N
"a",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~QT;~QT;~QT;~QT;~QT;~QT;"
"operand",\N
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~asin"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{JacobianFunction.java[JacobianFunction~value~\\[D"
"operandOffset",\N
"a1",\N
"point",\N
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~asinh"
"result",\N
"b1",\N
"MultivariateDifferentiableFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{MultivariateDifferentiableFunction.java[MultivariateDifferentiableFunction"
"resultOffset",\N
"a2",\N
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~atan"
"SparseGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient"
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~acosh~\\[D~I~\\[D~I"
"b2",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~abs"
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~atanh"
"a3",\N
"operand",\N
"b3",\N
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~cbrt"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~acos"
"operandOffset",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~D~QT;~D~QT;~D~QT;"
"result",\N
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~ceil"
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~acosh"
"resultOffset",\N
"a1",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~add~QSparseGradient;"
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~copySign~QDerivativeStructure;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~add~\\[D~I~\\[D~I~\\[D~I"
"b1",\N
"sign",\N
"a",\N
"a2",\N
"lhs",\N
"b2",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~copySign~D"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~add~D"
"lhsOffset",\N
"a3",\N
"rhs",\N
"sign",\N
"c",\N
"b3",\N
"rhsOffset",\N
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~cos"
"addInPlace","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~addInPlace~QSparseGradient;"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~QT;~QT;~QT;~QT;~QT;~QT;~QT;~QT;"
"result",\N
"a",\N
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~cosh"
"resultOffset",\N
"a1",\N
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~asin"
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~asin~\\[D~I~\\[D~I"
"b1",\N
"createConstant","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~createConstant~D"
"a2",\N
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~asinh"
"operand",\N
"c",\N
"b2",\N
"operandOffset",\N
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~atan"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~divide~D"
"a3",\N
"result",\N
"a",\N
"b3",\N
"atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~atan2~QSparseGradient;"
"resultOffset",\N
"a4",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~equals~QObject;"
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~asinh~\\[D~I~\\[D~I"
"x",\N
"b4",\N
"other",\N
"atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~atan2~QSparseGradient;~QSparseGradient;"
"operand",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~linearCombination~D~QT;~D~QT;~D~QT;~D~QT;"
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~exp"
"operandOffset",\N
"y",\N
"a1",\N
"result",\N
"x",\N
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~expm1"
"b1",\N
"resultOffset",\N
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~atanh"
"a2",\N
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~floor"
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~atan~\\[D~I~\\[D~I"
"b2",\N
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~cbrt"
"getAllDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getAllDerivatives"
"operand",\N
"a3",\N
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~ceil"
"operandOffset",\N
"b3",\N
"getExponent","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getExponent"
"result",\N
"a4",\N
"compose","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~compose~D~D"
"getFreeParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getFreeParameters"
"resultOffset",\N
"b4",\N
"f0",\N
"atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~atan2~\\[D~I~\\[D~I~\\[D~I"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getOrder"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~log"
"f1",\N
"y",\N
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~log1p"
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~copySign~QSparseGradient;"
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getReal"
"yOffset",\N
"sign",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~getValue"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~multiply~D"
"x",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~copySign~D"
"xOffset",\N
"a",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~hashCode"
"result",\N
"sign",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~pow~D"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~log"
"resultOffset",\N
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~cos"
"p",\N
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~atanh~\\[D~I~\\[D~I"
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~log10"
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~cosh"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~pow~I"
"operand",\N
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~log1p"
"n",\N
"createConstant","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~createConstant~D"
"operandOffset",\N
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~reciprocal"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~multiply~I"
"result",\N
"value",\N
"resultOffset",\N
"n",\N
"createVariable","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~createVariable~I~D"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~remainder~D"
"compose","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~compose~\\[D~I~\\[D~\\[D~I"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~multiply~D"
"idx",\N
"a",\N
"operand",\N
"a",\N
"value",\N
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~rint"
"operandOffset",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~negate"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~divide~QSparseGradient;"
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~rootN~I"
"f",\N
"a",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~pow~D~QDerivativeStructure;"
"result",\N
"n",\N
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~divide~D"
"resultOffset",\N
"a",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~round"
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~cos~\\[D~I~\\[D~I"
"x",\N
"c",\N
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~scalb~I"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~equals~QObject;"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~pow~D"
"operand",\N
"n",\N
"operandOffset",\N
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~signum"
"other",\N
"result",\N
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~exp"
"p",\N
"resultOffset",\N
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~sin"
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~expm1"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~pow~I"
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~cosh~\\[D~I~\\[D~I"
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~sinh"
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~floor"
"n",\N
"operand",\N
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~sqrt"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~reciprocal"
"getDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~getDerivative~I"
"operandOffset",\N
"result",\N
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~remainder~D"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~subtract~D"
"index",\N
"resultOffset",\N
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~getReal"
"a",\N
"a",\N
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~divide~\\[D~I~\\[D~I~\\[D~I"
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~rint"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~tan"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~getValue"
"lhs",\N
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3{RealFieldElement.java[RealFieldElement~tanh"
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~rootN~I"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~hashCode"
"lhsOffset",\N
"rhs",\N
"n",\N
"Multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Multiply.java[Multiply"
"hypot","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~hypot~QSparseGradient;"
"rhsOffset",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~round"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Multiply.java[Multiply~value~D~D"
"y",\N
"result",\N
"x",\N
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~scalb~I"
"hypot","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~hypot~QSparseGradient;~QSparseGradient;"
"resultOffset",\N
"y",\N
"n",\N
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~exp~\\[D~I~\\[D~I"
"x",\N
"Rint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Rint.java[Rint"
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~signum"
"y",\N
"operand",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Rint.java[Rint~value~D"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~\\[D~\\[QSparseGradient;"
"operandOffset",\N
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~sin"
"x",\N
"result",\N
"a",\N
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~sinh"
"Asin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Asin.java[Asin"
"resultOffset",\N
"b",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Asin.java[Asin~value~D"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~sqrt"
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~expm1~\\[D~I~\\[D~I"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;"
"x",\N
"operand",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~subtract~D"
"a1",\N
"Exp","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Exp.java[Exp"
"operandOffset",\N
"b1",\N
"a",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Exp.java[Exp~value~D"
"result",\N
"a2",\N
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~tan"
"resultOffset",\N
"b2",\N
"x",\N
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~tanh"
"getFreeParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~getFreeParameters"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~D~QSparseGradient;~D~QSparseGradient;"
"Acos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Acos.java[Acos"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Acos.java[Acos~value~D"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~getOrder"
"toDegrees","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~toDegrees"
"a1",\N
"x",\N
"b1",\N
"getPartialDerivativeOrders","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~getPartialDerivativeOrders~I"
"toRadians","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure~toRadians"
"a2",\N
"Expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Expm1.java[Expm1"
"index",\N
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure[DataTransferObject"
"b2",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Expm1.java[Expm1~value~D"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructure.java[DerivativeStructure[DataTransferObject~DataTransferObject~I~I~\\[D"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~getSize"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;"
"x",\N
"variables",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~linearCombination~D~\\[D~I~D~\\[D~I~\\[D~I"
"a1",\N
"Log","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log.java[Log"
"order",\N
"b1",\N
"a1",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log.java[Log~value~D"
"data",\N
"a2",\N
"c1",\N
"x",\N
"Subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Subtract.java[Subtract"
"b2",\N
"offset1",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Subtract.java[Subtract~value~D~D"
"a3",\N
"Cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cbrt.java[Cbrt"
"a2",\N
"b3",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cbrt.java[Cbrt~value~D"
"x",\N
"c2",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~D~QSparseGradient;~D~QSparseGradient;~D~QSparseGradient;"
"offset2",\N
"y",\N
"x",\N
"result",\N
"Inverse","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Inverse.java[Inverse"
"a1",\N
"Pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Pow.java[Pow"
"resultOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Inverse.java[Inverse~value~D"
"b1",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Pow.java[Pow~value~D~D"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~linearCombination~D~\\[D~I~D~\\[D~I~D~\\[D~I~\\[D~I"
"a2",\N
"x",\N
"x",\N
"a1",\N
"b2",\N
"y",\N
"Constant","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Constant.java[Constant"
"c1",\N
"a3",\N
"Identity","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Identity.java[Identity"
"Constant","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Constant.java[Constant~Constant~D"
"b3",\N
"offset1",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Identity.java[Identity~value~D"
"a2",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;~QSparseGradient;"
"c",\N
"c2",\N
"x",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Constant.java[Constant~value~D"
"a1",\N
"offset2",\N
"Sin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sin.java[Sin"
"b1",\N
"x",\N
"a3",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sin.java[Sin~value~D"
"a2",\N
"c3",\N
"Sinc","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinc.java[Sinc"
"x",\N
"b2",\N
"offset3",\N
"Sinc","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinc.java[Sinc~Sinc"
"Sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinh.java[Sinh"
"a3",\N
"result",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinh.java[Sinh~value~D"
"b3",\N
"Sinc","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinc.java[Sinc~Sinc~Z"
"resultOffset",\N
"a4",\N
"x",\N
"normalized",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~linearCombination~D~\\[D~I~D~\\[D~I~D~\\[D~I~D~\\[D~I~\\[D~I"
"b4",\N
"Log10","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log10.java[Log10"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sinc.java[Sinc~value~D"
"a1",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~linearCombination~D~QSparseGradient;~D~QSparseGradient;~D~QSparseGradient;~D~QSparseGradient;"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log10.java[Log10~value~D"
"c1",\N
"x",\N
"a1",\N
"x",\N
"offset1",\N
"Ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Ceil.java[Ceil"
"b1",\N
"Logit","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logit.java[Logit"
"a2",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Ceil.java[Ceil~value~D"
"a2",\N
"Logit","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logit.java[Logit~Logit"
"c2",\N
"x",\N
"b2",\N
"offset2",\N
"Logit","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logit.java[Logit~Logit~D~D"
"a3",\N
"Cos","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cos.java[Cos"
"a3",\N
"b3",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cos.java[Cos~value~D"
"lo",\N
"c3",\N
"a4",\N
"hi",\N
"offset3",\N
"x",\N
"b4",\N
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logit.java[Logit[Parametric"
"a4",\N
"Acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Acosh.java[Acosh"
"c4",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Acosh.java[Acosh~value~D"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~log"
"Atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atan2.java[Atan2"
"offset4",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atan2.java[Atan2~value~D~D"
"x",\N
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~log10"
"result",\N
"x",\N
"Max","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Max.java[Max"
"resultOffset",\N
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~log1p"
"y",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Max.java[Max~value~D~D"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~log~\\[D~I~\\[D~I"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~multiply~QSparseGradient;"
"Divide","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Divide.java[Divide"
"x",\N
"operand",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Divide.java[Divide~value~D~D"
"y",\N
"a",\N
"operandOffset",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~multiply~D"
"Logistic","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logistic.java[Logistic"
"x",\N
"result",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logistic.java[Logistic~value~D"
"resultOffset",\N
"y",\N
"c",\N
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~log10~\\[D~I~\\[D~I"
"Atan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atan.java[Atan"
"x",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~multiply~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atan.java[Atan~value~D"
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Logistic.java[Logistic[Parametric"
"operand",\N
"n",\N
"operandOffset",\N
"x",\N
"Floor","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Floor.java[Floor"
"multiplyInPlace","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~multiplyInPlace~QSparseGradient;"
"result",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Floor.java[Floor~value~D"
"Minus","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Minus.java[Minus"
"a",\N
"resultOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Minus.java[Minus~value~D"
"x",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~negate"
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~log1p~\\[D~I~\\[D~I"
"x",\N
"Signum","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Signum.java[Signum"
"numVars","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~numVars"
"operand",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Signum.java[Signum~value~D"
"Ulp","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Ulp.java[Ulp"
"operandOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Ulp.java[Ulp~value~D"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~pow~D"
"x",\N
"result",\N
"x",\N
"Atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atanh.java[Atanh"
"p",\N
"resultOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Atanh.java[Atanh~value~D"
"Tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Tanh.java[Tanh"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~pow~I"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~multiply~\\[D~I~\\[D~I~\\[D~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Tanh.java[Tanh~value~D"
"x",\N
"n",\N
"lhs",\N
"x",\N
"Add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Add.java[Add"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~pow~QSparseGradient;"
"lhsOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Add.java[Add~value~D~D"
"Asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Asinh.java[Asinh"
"rhs",\N
"e",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Asinh.java[Asinh~value~D"
"rhsOffset",\N
"x",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~pow~D~QSparseGradient;"
"result",\N
"y",\N
"x",\N
"a",\N
"resultOffset",\N
"Gaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Gaussian.java[Gaussian"
"Sigmoid","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sigmoid.java[Sigmoid"
"x",\N
"Gaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Gaussian.java[Gaussian~Gaussian"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~pow~D~\\[D~I~\\[D~I"
"Sigmoid","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sigmoid.java[Sigmoid~Sigmoid"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~reciprocal"
"a",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Gaussian.java[Gaussian~value~D"
"Sigmoid","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sigmoid.java[Sigmoid~Sigmoid~D~D"
"operand",\N
"x",\N
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~remainder~D"
"lo",\N
"operandOffset",\N
"hi",\N
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Gaussian.java[Gaussian[Parametric"
"a",\N
"result",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sigmoid.java[Sigmoid~value~D"
"Power","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Power.java[Power"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~remainder~QSparseGradient;"
"resultOffset",\N
"Power","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Power.java[Power~Power~D"
"x",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~pow~\\[D~I~D~\\[D~I"
"a",\N
"p",\N
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sigmoid.java[Sigmoid[Parametric"
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~rint"
"operand",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Power.java[Power~value~D"
"StepFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{StepFunction.java[StepFunction"
"operandOffset",\N
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~rootN~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{StepFunction.java[StepFunction~value~D"
"x",\N
"p",\N
"n",\N
"result",\N
"Tan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Tan.java[Tan"
"x",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~round"
"resultOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Tan.java[Tan~value~D"
"HarmonicOscillator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{HarmonicOscillator.java[HarmonicOscillator"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~pow~\\[D~I~I~\\[D~I"
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~scalb~I"
"HarmonicOscillator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{HarmonicOscillator.java[HarmonicOscillator~HarmonicOscillator~D~D~D"
"x",\N
"operand",\N
"Min","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Min.java[Min"
"n",\N
"amplitude",\N
"operandOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Min.java[Min~value~D~D"
"omega",\N
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~signum"
"n",\N
"phase",\N
"x",\N
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~sin"
"result",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{HarmonicOscillator.java[HarmonicOscillator~value~D"
"y",\N
"resultOffset",\N
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~sinh"
"Abs","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Abs.java[Abs"
"x",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~pow~\\[D~I~\\[D~I~\\[D~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Abs.java[Abs~value~D"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~sqrt"
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{HarmonicOscillator.java[HarmonicOscillator[Parametric"
"x",\N
"Log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log1p.java[Log1p"
"x",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~subtract~QSparseGradient;"
"xOffset",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Log1p.java[Log1p~value~D"
"Sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sqrt.java[Sqrt"
"y",\N
"a",\N
"x",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Sqrt.java[Sqrt~value~D"
"yOffset",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~subtract~D"
"Cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cosh.java[Cosh"
"result",\N
"x",\N
"c",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.function{Cosh.java[Cosh~value~D"
"resultOffset",\N
"BaseAbstractUnivariateIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~tan"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~remainder~\\[D~I~\\[D~I~\\[D~I"
"x",\N
"BaseAbstractUnivariateIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~BaseAbstractUnivariateIntegrator~D~D"
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~tanh"
"lhs",\N
"MidPointIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{MidPointIntegrator.java[MidPointIntegrator"
"relativeAccuracy",\N
"lhsOffset",\N
"MidPointIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{MidPointIntegrator.java[MidPointIntegrator~MidPointIntegrator"
"absoluteAccuracy",\N
"taylor","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~taylor~\\[D"
"rhs",\N
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getAbsoluteAccuracy"
"MIDPOINT_MAX_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{MidPointIntegrator.java[MidPointIntegrator^MIDPOINT_MAX_ITERATIONS_COUNT"
"delta",\N
"rhsOffset",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getEvaluations"
"toDegrees","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~toDegrees"
"result",\N
"SimpsonIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{SimpsonIntegrator.java[SimpsonIntegrator"
"resultOffset",\N
"SimpsonIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{SimpsonIntegrator.java[SimpsonIntegrator~SimpsonIntegrator"
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getIterations"
"toRadians","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{SparseGradient.java[SparseGradient~toRadians"
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~rootN~\\[D~I~I~\\[D~I"
"SIMPSON_MAX_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{SimpsonIntegrator.java[SimpsonIntegrator^SIMPSON_MAX_ITERATIONS_COUNT"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getMax"
"UnivariateIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator"
"operand",\N
"RombergIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{RombergIntegrator.java[RombergIntegrator"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getAbsoluteAccuracy"
"getMaximalIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getMaximalIterationCount"
"operandOffset",\N
"RombergIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{RombergIntegrator.java[RombergIntegrator~RombergIntegrator"
"n",\N
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getMin"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getEvaluations"
"ROMBERG_MAX_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{RombergIntegrator.java[RombergIntegrator^ROMBERG_MAX_ITERATIONS_COUNT"
"result",\N
"getMinimalIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getMinimalIterationCount"
"resultOffset",\N
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getIterations"
"TrapezoidIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegrator.java[TrapezoidIntegrator"
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator~getRelativeAccuracy"
"TrapezoidIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegrator.java[TrapezoidIntegrator~TrapezoidIntegrator"
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~sin~\\[D~I~\\[D~I"
"getMaximalIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getMaximalIterationCount"
"DEFAULT_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator^DEFAULT_ABSOLUTE_ACCURACY"
"TRAPEZOID_MAX_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegrator.java[TrapezoidIntegrator^TRAPEZOID_MAX_ITERATIONS_COUNT"
"operand",\N
"getMinimalIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getMinimalIterationCount"
"operandOffset",\N
"DEFAULT_MAX_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator^DEFAULT_MAX_ITERATIONS_COUNT"
"LegendreGaussIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegrator.java[LegendreGaussIntegrator"
"result",\N
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{UnivariateIntegrator.java[UnivariateIntegrator~getRelativeAccuracy"
"IterativeLegendreGaussIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegrator.java[IterativeLegendreGaussIntegrator"
"DEFAULT_MIN_ITERATIONS_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator^DEFAULT_MIN_ITERATIONS_COUNT"
"resultOffset",\N
"LegendreRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{LegendreRuleFactory.java[LegendreRuleFactory"
"LegendreHighPrecisionRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionRuleFactory.java[LegendreHighPrecisionRuleFactory"
"DEFAULT_RELATIVE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration{BaseAbstractUnivariateIntegrator.java[BaseAbstractUnivariateIntegrator^DEFAULT_RELATIVE_ACCURACY"
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~sinh~\\[D~I~\\[D~I"
"LegendreHighPrecisionRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionRuleFactory.java[LegendreHighPrecisionRuleFactory~LegendreHighPrecisionRuleFactory"
"GaussIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegrator.java[GaussIntegrator"
"operand",\N
"SymmetricGaussIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{SymmetricGaussIntegrator.java[SymmetricGaussIntegrator"
"getNumberOfPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegrator.java[GaussIntegrator~getNumberOfPoints"
"LegendreHighPrecisionRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionRuleFactory.java[LegendreHighPrecisionRuleFactory~LegendreHighPrecisionRuleFactory~QMathContext;"
"operandOffset",\N
"HermiteRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{HermiteRuleFactory.java[HermiteRuleFactory"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegrator.java[GaussIntegrator~getPoint~I"
"result",\N
"mContext",\N
"BaseRuleFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactory.java[BaseRuleFactory"
"resultOffset",\N
"index",\N
"GaussIntegratorFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorFactory.java[GaussIntegratorFactory"
"InterpolatingMicrosphere","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~subtract~\\[D~I~\\[D~I~\\[D~I"
"getWeight","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegrator.java[GaussIntegrator~getWeight~I"
"hermite","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorFactory.java[GaussIntegratorFactory~hermite~I"
"InterpolatingMicrosphere","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~InterpolatingMicrosphere~I~I~D~D~D"
"lhs",\N
"numberOfPoints",\N
"index",\N
"dimension",\N
"lhsOffset",\N
"legendre","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorFactory.java[GaussIntegratorFactory~legendre~I"
"LoessInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator"
"size",\N
"rhs",\N
"LoessInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator~LoessInterpolator"
"maxDarkFraction",\N
"numberOfPoints",\N
"rhsOffset",\N
"darkThreshold",\N
"MicrosphereProjectionInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereProjectionInterpolator.java[MicrosphereProjectionInterpolator"
"result",\N
"LoessInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator~LoessInterpolator~D~I"
"background",\N
"MicrosphereProjectionInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereProjectionInterpolator.java[MicrosphereProjectionInterpolator~MicrosphereProjectionInterpolator~I~I~D~D~D~D~Z~D"
"resultOffset",\N
"bandwidth",\N
"InterpolatingMicrosphere","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~InterpolatingMicrosphere~QInterpolatingMicrosphere;"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~tan~\\[D~I~\\[D~I"
"dimension",\N
"robustnessIters",\N
"other",\N
"elements",\N
"operand",\N
"DEFAULT_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator^DEFAULT_ACCURACY"
"maxDarkFraction",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~add~\\[D~Z"
"operandOffset",\N
"DEFAULT_BANDWIDTH","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator^DEFAULT_BANDWIDTH"
"darkThreshold",\N
"result",\N
"normal",\N
"background",\N
"resultOffset",\N
"DEFAULT_ROBUSTNESS_ITERS","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolator.java[LoessInterpolator^DEFAULT_ROBUSTNESS_ITERS"
"copy",\N
"exponent",\N
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.differentiation{DSCompiler.java[DSCompiler~tanh~\\[D~I~\\[D~I"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~copy"
"sharedSphere",\N
"NevilleInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolator.java[NevilleInterpolator"
"operand",\N
"noInterpolationTolerance",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~getDimension"
"serialVersionUID","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolator.java[NevilleInterpolator^serialVersionUID"
"operandOffset",\N
"PiecewiseBicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolator.java[PiecewiseBicubicSplineInterpolator"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~getSize"
"result",\N
"TrivariateGridInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TrivariateGridInterpolator.java[TrivariateGridInterpolator"
"UnivariateInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{UnivariateInterpolator.java[UnivariateInterpolator"
"resultOffset",\N
"BicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolator.java[BicubicSplineInterpolator"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere~value~\\[D~\\[\\[D~\\[D~D~D"
"MicrosphereInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatingFunction.java[MicrosphereInterpolatingFunction"
"BicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolator.java[BicubicSplineInterpolator~BicubicSplineInterpolator"
"BivariateGridInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BivariateGridInterpolator.java[BivariateGridInterpolator"
"MicrosphereSurfaceElement","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatingFunction.java[MicrosphereInterpolatingFunction[MicrosphereSurfaceElement"
"point",\N
"BicubicInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolator.java[BicubicInterpolator"
"MicrosphereSurfaceElement","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatingFunction.java[MicrosphereInterpolatingFunction[MicrosphereSurfaceElement~MicrosphereSurfaceElement~\\[D"
"BicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolator.java[BicubicSplineInterpolator~BicubicSplineInterpolator~Z"
"samplePoints",\N
"InterpolatingMicrosphere2D","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere2D.java[InterpolatingMicrosphere2D"
"sampleValues",\N
"initializeDerivatives",\N
"n",\N
"InterpolatingMicrosphere2D","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere2D.java[InterpolatingMicrosphere2D~InterpolatingMicrosphere2D~I~D~D~D"
"exponent",\N
"illumination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatingFunction.java[MicrosphereInterpolatingFunction[MicrosphereSurfaceElement~illumination"
"LinearInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolator.java[LinearInterpolator"
"noInterpolationTolerance",\N
"size",\N
"HermiteInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolator.java[HermiteInterpolator"
"reset","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatingFunction.java[MicrosphereInterpolatingFunction[MicrosphereSurfaceElement~reset"
"maxDarkFraction",\N
"Facet","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[Facet"
"HermiteInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolator.java[HermiteInterpolator~HermiteInterpolator"
"darkThreshold",\N
"Facet","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[Facet~Facet~\\[D"
"DividedDifferenceInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolator.java[DividedDifferenceInterpolator"
"PiecewiseBicubicSplineInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunction.java[PiecewiseBicubicSplineInterpolatingFunction"
"background",\N
"n",\N
"TricubicSplineInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunction.java[TricubicSplineInterpolatingFunction"
"isValidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunction.java[PiecewiseBicubicSplineInterpolatingFunction~isValidPoint~D~D"
"InterpolatingMicrosphere2D","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere2D.java[InterpolatingMicrosphere2D~InterpolatingMicrosphere2D~QInterpolatingMicrosphere2D;"
"getNormal","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[Facet~getNormal"
"TricubicSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunction.java[TricubicSplineFunction"
"x",\N
"other",\N
"TricubicSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunction.java[TricubicSplineFunction~TricubicSplineFunction~\\[D"
"y",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere2D.java[InterpolatingMicrosphere2D~copy"
"FacetData","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[FacetData"
"aV",\N
"MicrosphereInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolator.java[MicrosphereInterpolator"
"FacetData","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[FacetData~FacetData~D~D"
"SplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolator.java[SplineInterpolator"
"MicrosphereInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolator.java[MicrosphereInterpolator~MicrosphereInterpolator"
"SmoothingPolynomialBicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolator.java[SmoothingPolynomialBicubicSplineInterpolator"
"illumination",\N
"SmoothingPolynomialBicubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolator.java[SmoothingPolynomialBicubicSplineInterpolator~SmoothingPolynomialBicubicSplineInterpolator"
"BicubicSplineInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineInterpolatingFunction"
"DEFAULT_BRIGHTNESS_EXPONENT","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolator.java[MicrosphereInterpolator^DEFAULT_BRIGHTNESS_EXPONENT"
"sample",\N
"isValidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineInterpolatingFunction~isValidPoint~D~D"
"TricubicSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolator.java[TricubicSplineInterpolator"
"illumination","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[FacetData~illumination"
"DEFAULT_MICROSPHERE_ELEMENTS","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolator.java[MicrosphereInterpolator^DEFAULT_MICROSPHERE_ELEMENTS"
"x",\N
"TricubicInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunction.java[TricubicInterpolatingFunction"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{InterpolatingMicrosphere.java[InterpolatingMicrosphere[FacetData~sample"
"y",\N
"TricubicInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolator.java[TricubicInterpolator"
"isValidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunction.java[TricubicInterpolatingFunction~isValidPoint~D~D~D"
"BicubicSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineFunction"
"MultivariateInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{MultivariateInterpolator.java[MultivariateInterpolator"
"AkimaSplineInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolator.java[AkimaSplineInterpolator"
"x",\N
"BicubicSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineFunction~BicubicSplineFunction~\\[D"
"UnivariatePeriodicInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolator.java[UnivariatePeriodicInterpolator"
"BicubicInterpolatingFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunction.java[BicubicInterpolatingFunction"
"y",\N
"coeff",\N
"UnivariatePeriodicInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolator.java[UnivariatePeriodicInterpolator~UnivariatePeriodicInterpolator~QUnivariateInterpolator;~D~I"
"isValidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunction.java[BicubicInterpolatingFunction~isValidPoint~D~D"
"z",\N
"BicubicSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineFunction~BicubicSplineFunction~\\[D~Z"
"interpolator",\N
"x",\N
"TricubicFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunction.java[TricubicFunction"
"coeff",\N
"period",\N
"y",\N
"TricubicFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunction.java[TricubicFunction~TricubicFunction~\\[D"
"initializeDerivatives",\N
"extend",\N
"BicubicFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunction.java[BicubicFunction"
"aV",\N
"BicubicFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunction.java[BicubicFunction~BicubicFunction~\\[D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunction.java[BicubicSplineFunction~value~D~D"
"UnivariatePeriodicInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolator.java[UnivariatePeriodicInterpolator~UnivariatePeriodicInterpolator~QUnivariateInterpolator;~D"
"FieldHermiteInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolator.java[FieldHermiteInterpolator"
"FieldHermiteInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolator.java[FieldHermiteInterpolator~FieldHermiteInterpolator"
"coeff",\N
"x",\N
"interpolator",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunction.java[BicubicFunction~value~D~D"
"period",\N
"y",\N
"PolynomialFunctionNewtonForm","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm"
"DEFAULT_EXTEND","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolator.java[UnivariatePeriodicInterpolator^DEFAULT_EXTEND"
"computeCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~computeCoefficients"
"PolynomialFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction"
"x",\N
"y",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~add~QPolynomialFunction;"
"degree","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~degree"
"PolynomialsUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils"
"PolynomialFunctionLagrangeForm","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm"
"p",\N
"createChebyshevPolynomial","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~createChebyshevPolynomial~I"
"getCenters","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~getCenters"
"computeCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~computeCoefficients"
"degree","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~degree"
"degree",\N
"getCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~getCoefficients"
"degree","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~degree"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~equals~QObject;"
"createHermitePolynomial","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~createHermitePolynomial~I"
"getNewtonCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~getNewtonCoefficients"
"getCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~getCoefficients"
"obj",\N
"degree",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonForm.java[PolynomialFunctionNewtonForm~value~D"
"getCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~getCoefficients"
"getInterpolatingPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~getInterpolatingPoints"
"createJacobiPolynomial","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~createJacobiPolynomial~I~I~I"
"z",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~hashCode"
"getInterpolatingValues","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~getInterpolatingValues"
"degree",\N
"PolynomialSplineFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction"
"v",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeForm.java[PolynomialFunctionLagrangeForm~value~D"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~multiply~QPolynomialFunction;"
"getKnots","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~getKnots"
"w",\N
"z",\N
"p",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~getN"
"createLaguerrePolynomial","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~createLaguerrePolynomial~I"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~negate"
"NewtonRaphsonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolver.java[NewtonRaphsonSolver"
"degree",\N
"getPolynomials","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~getPolynomials"
"NewtonRaphsonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolver.java[NewtonRaphsonSolver~NewtonRaphsonSolver"
"polynomialDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~polynomialDerivative"
"createLegendrePolynomial","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~createLegendrePolynomial~I"
"isValidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~isValidPoint~D"
"NewtonRaphsonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolver.java[NewtonRaphsonSolver~NewtonRaphsonSolver~D"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~subtract~QPolynomialFunction;"
"degree",\N
"x",\N
"absoluteAccuracy",\N
"shift","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils~shift~\\[D~D"
"p",\N
"polynomialSplineDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~polynomialSplineDerivative"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~toString"
"SecantSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{SecantSolver.java[SecantSolver"
"coefficients",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunction.java[PolynomialSplineFunction~value~D"
"SecantSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{SecantSolver.java[SecantSolver~SecantSolver"
"shift",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction~value~D"
"v",\N
"JacobiKey","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils[JacobiKey"
"SecantSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{SecantSolver.java[SecantSolver~SecantSolver~D"
"x",\N
"JacobiKey","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils[JacobiKey~JacobiKey~I~I"
"FieldBracketingNthOrderBrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver"
"absoluteAccuracy",\N
"Parametric","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction[Parametric"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getAbsoluteAccuracy"
"v",\N
"SecantSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{SecantSolver.java[SecantSolver~SecantSolver~D~D"
"gradient","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunction.java[PolynomialFunction[Parametric~gradient~D~\\[D"
"w",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getEvaluations"
"relativeAccuracy",\N
"x",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils[JacobiKey~equals~QObject;"
"getFunctionValueAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getFunctionValueAccuracy"
"absoluteAccuracy",\N
"parameters",\N
"key",\N
"DEFAULT_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{SecantSolver.java[SecantSolver^DEFAULT_ABSOLUTE_ACCURACY"
"AbstractUnivariateDifferentiableSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateDifferentiableSolver.java[AbstractUnivariateDifferentiableSolver"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getMaxEvaluations"
"AbstractUnivariateDifferentiableSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateDifferentiableSolver.java[AbstractUnivariateDifferentiableSolver~AbstractUnivariateDifferentiableSolver~D"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils[JacobiKey~hashCode"
"getMaximalOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getMaximalOrder"
"BracketedRealFieldUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver"
"absoluteAccuracy",\N
"RecurrenceCoefficientsGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtils.java[PolynomialsUtils[RecurrenceCoefficientsGenerator"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver~getAbsoluteAccuracy"
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolver.java[FieldBracketingNthOrderBrentSolver~getRelativeAccuracy"
"AbstractUnivariateDifferentiableSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateDifferentiableSolver.java[AbstractUnivariateDifferentiableSolver~AbstractUnivariateDifferentiableSolver~D~D~D"
"AbstractPolynomialSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractPolynomialSolver.java[AbstractPolynomialSolver"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver~getEvaluations"
"AbstractPolynomialSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractPolynomialSolver.java[AbstractPolynomialSolver~AbstractPolynomialSolver~D"
"BaseAbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver"
"relativeAccuracy",\N
"BaseAbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~BaseAbstractUnivariateSolver~D"
"getFunctionValueAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver~getFunctionValueAccuracy"
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"functionValueAccuracy",\N
"absoluteAccuracy",\N
"AbstractPolynomialSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractPolynomialSolver.java[AbstractPolynomialSolver~AbstractPolynomialSolver~D~D"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver~getMaxEvaluations"
"BaseAbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~BaseAbstractUnivariateSolver~D~D"
"MullerSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver.java[MullerSolver"
"relativeAccuracy",\N
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedRealFieldUnivariateSolver.java[BracketedRealFieldUnivariateSolver~getRelativeAccuracy"
"MullerSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver.java[MullerSolver~MullerSolver"
"absoluteAccuracy",\N
"relativeAccuracy",\N
"UnivariateSolverUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtils.java[UnivariateSolverUtils"
"absoluteAccuracy",\N
"AbstractPolynomialSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractPolynomialSolver.java[AbstractPolynomialSolver~AbstractPolynomialSolver~D~D~D"
"MullerSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver.java[MullerSolver~MullerSolver~D"
"isSequence","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtils.java[UnivariateSolverUtils~isSequence~D~D~D"
"BaseAbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~BaseAbstractUnivariateSolver~D~D~D"
"absoluteAccuracy",\N
"relativeAccuracy",\N
"start",\N
"absoluteAccuracy",\N
"relativeAccuracy",\N
"MullerSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver.java[MullerSolver~MullerSolver~D~D"
"mid",\N
"absoluteAccuracy",\N
"functionValueAccuracy",\N
"relativeAccuracy",\N
"end",\N
"functionValueAccuracy",\N
"getCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractPolynomialSolver.java[AbstractPolynomialSolver~getCoefficients"
"absoluteAccuracy",\N
"midpoint","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtils.java[UnivariateSolverUtils~midpoint~D~D"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getAbsoluteAccuracy"
"BisectionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BisectionSolver.java[BisectionSolver"
"DifferentiableUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{DifferentiableUnivariateSolver.java[DifferentiableUnivariateSolver"
"a",\N
"BisectionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BisectionSolver.java[BisectionSolver~BisectionSolver"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getEvaluations"
"AbstractDifferentiableUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractDifferentiableUnivariateSolver.java[AbstractDifferentiableUnivariateSolver"
"b",\N
"AbstractDifferentiableUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractDifferentiableUnivariateSolver.java[AbstractDifferentiableUnivariateSolver~AbstractDifferentiableUnivariateSolver~D"
"getFunctionValueAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getFunctionValueAccuracy"
"BisectionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BisectionSolver.java[BisectionSolver~BisectionSolver~D"
"BrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BrentSolver.java[BrentSolver"
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"BrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BrentSolver.java[BrentSolver~BrentSolver"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getMax"
"AbstractDifferentiableUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractDifferentiableUnivariateSolver.java[AbstractDifferentiableUnivariateSolver~AbstractDifferentiableUnivariateSolver~D~D~D"
"BisectionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BisectionSolver.java[BisectionSolver~BisectionSolver~D~D"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getMaxEvaluations"
"BrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BrentSolver.java[BrentSolver~BrentSolver~D"
"relativeAccuracy",\N
"relativeAccuracy",\N
"absoluteAccuracy",\N
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getMin"
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"BrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BrentSolver.java[BrentSolver~BrentSolver~D~D"
"functionValueAccuracy",\N
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getRelativeAccuracy"
"NewtonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonSolver.java[NewtonSolver"
"BaseSecantSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolver.java[BaseSecantSolver"
"relativeAccuracy",\N
"NewtonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonSolver.java[NewtonSolver~NewtonSolver"
"getStartValue","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~getStartValue"
"DEFAULT_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolver.java[BaseSecantSolver^DEFAULT_ABSOLUTE_ACCURACY"
"absoluteAccuracy",\N
"NewtonSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{NewtonSolver.java[NewtonSolver~NewtonSolver~D"
"BrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BrentSolver.java[BrentSolver~BrentSolver~D~D~D"
"isBracketing","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~isBracketing~D~D"
"UnivariateDifferentiableSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{UnivariateDifferentiableSolver.java[UnivariateDifferentiableSolver"
"absoluteAccuracy",\N
"LaguerreSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver"
"lower",\N
"relativeAccuracy",\N
"RegulaFalsiSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolver.java[RegulaFalsiSolver"
"upper",\N
"absoluteAccuracy",\N
"LaguerreSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver~LaguerreSolver"
"RegulaFalsiSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolver.java[RegulaFalsiSolver~RegulaFalsiSolver"
"functionValueAccuracy",\N
"isSequence","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~isSequence~D~D~D"
"LaguerreSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver~LaguerreSolver~D"
"RegulaFalsiSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolver.java[RegulaFalsiSolver~RegulaFalsiSolver~D"
"UnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{UnivariateSolver.java[UnivariateSolver"
"start",\N
"absoluteAccuracy",\N
"RiddersSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RiddersSolver.java[RiddersSolver"
"absoluteAccuracy",\N
"mid",\N
"RiddersSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RiddersSolver.java[RiddersSolver~RiddersSolver"
"LaguerreSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver~LaguerreSolver~D~D"
"RegulaFalsiSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolver.java[RegulaFalsiSolver~RegulaFalsiSolver~D~D"
"end",\N
"relativeAccuracy",\N
"RiddersSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RiddersSolver.java[RiddersSolver~RiddersSolver~D"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseAbstractUnivariateSolver.java[BaseAbstractUnivariateSolver~solve~I~QFUNC;~D~D"
"relativeAccuracy",\N
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"maxEval",\N
"LaguerreSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver~LaguerreSolver~D~D~D"
"RegulaFalsiSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolver.java[RegulaFalsiSolver~RegulaFalsiSolver~D~D~D"
"f",\N
"RiddersSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{RiddersSolver.java[RiddersSolver~RiddersSolver~D~D"
"relativeAccuracy",\N
"relativeAccuracy",\N
"min",\N
"relativeAccuracy",\N
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"max",\N
"absoluteAccuracy",\N
"functionValueAccuracy",\N
"PolynomialSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PolynomialSolver.java[PolynomialSolver"
"functionValueAccuracy",\N
"laguerre","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver~laguerre~D~D~D~D"
"PegasusSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PegasusSolver.java[PegasusSolver"
"IllinoisSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{IllinoisSolver.java[IllinoisSolver"
"BaseUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver"
"PegasusSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PegasusSolver.java[PegasusSolver~PegasusSolver"
"lo",\N
"IllinoisSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{IllinoisSolver.java[IllinoisSolver~IllinoisSolver"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~getAbsoluteAccuracy"
"hi",\N
"PegasusSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PegasusSolver.java[PegasusSolver~PegasusSolver~D"
"fLo",\N
"IllinoisSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{IllinoisSolver.java[IllinoisSolver~IllinoisSolver~D"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~getEvaluations"
"fHi",\N
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"getFunctionValueAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~getFunctionValueAccuracy"
"ComplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{LaguerreSolver.java[LaguerreSolver[ComplexSolver"
"PegasusSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PegasusSolver.java[PegasusSolver~PegasusSolver~D~D"
"IllinoisSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{IllinoisSolver.java[IllinoisSolver~IllinoisSolver~D~D"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~getMaxEvaluations"
"BracketingNthOrderBrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolver.java[BracketingNthOrderBrentSolver"
"relativeAccuracy",\N
"relativeAccuracy",\N
"BracketingNthOrderBrentSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolver.java[BracketingNthOrderBrentSolver~BracketingNthOrderBrentSolver"
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~getRelativeAccuracy"
"absoluteAccuracy",\N
"absoluteAccuracy",\N
"getMaximalOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolver.java[BracketingNthOrderBrentSolver~getMaximalOrder"
"PegasusSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{PegasusSolver.java[PegasusSolver~PegasusSolver~D~D~D"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BaseUnivariateSolver.java[BaseUnivariateSolver~solve~I~QFUNC;~D"
"IllinoisSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{IllinoisSolver.java[IllinoisSolver~IllinoisSolver~D~D~D"
"relativeAccuracy",\N
"maxEval",\N
"relativeAccuracy",\N
"AbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateSolver.java[AbstractUnivariateSolver"
"absoluteAccuracy",\N
"f",\N
"absoluteAccuracy",\N
"AbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateSolver.java[AbstractUnivariateSolver~AbstractUnivariateSolver~D"
"functionValueAccuracy",\N
"startValue",\N
"functionValueAccuracy",\N
"absoluteAccuracy",\N
"MullerSolver2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver2.java[MullerSolver2"
"BracketedUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{BracketedUnivariateSolver.java[BracketedUnivariateSolver"
"RootsOfUnity","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{RootsOfUnity.java[RootsOfUnity"
"AbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateSolver.java[AbstractUnivariateSolver~AbstractUnivariateSolver~D~D"
"MullerSolver2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver2.java[MullerSolver2~MullerSolver2"
"RootsOfUnity","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{RootsOfUnity.java[RootsOfUnity~RootsOfUnity"
"ComplexUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexUtils.java[ComplexUtils"
"relativeAccuracy",\N
"MullerSolver2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver2.java[MullerSolver2~MullerSolver2~D"
"convertToComplex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexUtils.java[ComplexUtils~convertToComplex~\\[D"
"getNumberOfRoots","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{RootsOfUnity.java[RootsOfUnity~getNumberOfRoots"
"absoluteAccuracy",\N
"real",\N
"absoluteAccuracy",\N
"AbstractUnivariateSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{AbstractUnivariateSolver.java[AbstractUnivariateSolver~AbstractUnivariateSolver~D~D~D"
"Quaternion","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion"
"MullerSolver2","=mathmain3.6/src<main.java.org.apache.commons.math3.analysis.solvers{MullerSolver2.java[MullerSolver2~MullerSolver2~D~D"
"Complex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex"
"Quaternion","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~Quaternion~D~D~D~D"
"relativeAccuracy",\N
"Complex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~Complex~D"
"relativeAccuracy",\N
"absoluteAccuracy",\N
"a",\N
"absoluteAccuracy",\N
"real",\N
"functionValueAccuracy",\N
"b",\N
"Complex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~Complex~D~D"
"ComplexField","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexField.java[ComplexField"
"c",\N
"ComplexFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexField.java[ComplexField~getInstance"
"d",\N
"ComplexFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~ComplexFormat"
"real",\N
"Quaternion","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~Quaternion~\\[D"
"imaginary",\N
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexField.java[ComplexField~getOne"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~format~QComplex;"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~abs"
"v",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexField.java[ComplexField~getZero"
"c",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~add~QQuaternion;~QQuaternion;"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~acos"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~format~QDouble;"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexField.java[ComplexField[LazyHolder"
"q1",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~add~D"
"c",\N
"DfpMath","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath"
"q2",\N
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~acos~QDfp;"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~format~QComplex;~QStringBuffer;~QFieldPosition;"
"addend",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~add~QQuaternion;"
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~asin"
"a",\N
"complex",\N
"q",\N
"toAppendTo",\N
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~asin~QDfp;"
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~atan"
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~dotProduct~QQuaternion;~QQuaternion;"
"pos",\N
"a",\N
"conjugate","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~conjugate"
"q1",\N
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getAvailableLocales"
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~atan~QDfp;"
"q2",\N
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~cos"
"getImaginaryCharacter","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getImaginaryCharacter"
"a",\N
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~dotProduct~QQuaternion;"
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~cosh"
"getImaginaryFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getImaginaryFormat"
"atanInternal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~atanInternal~QDfp;"
"q",\N
"createComplex","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~createComplex~D~D"
"a",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getInstance"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~equals~QObject;"
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~cos~QDfp;"
"realPart",\N
"other",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getInstance~QLocale;"
"imaginaryPart",\N
"a",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~equals~QQuaternion;~D"
"locale",\N
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~divide~D"
"cosInternal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~cosInternal~\\[QDfp;"
"q",\N
"getRealFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~getRealFormat"
"divisor",\N
"a",\N
"eps",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{ComplexFormat.java[ComplexFormat~parse~QString;~QParsePosition;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~equals~QObject;"
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~exp~QDfp;"
"getConjugate","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getConjugate"
"source",\N
"other",\N
"a",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getInverse"
"pos",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~equals~QComplex;~QComplex;~I"
"expInternal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~expInternal~QDfp;"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp"
"x",\N
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getNorm"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;"
"y",\N
"a",\N
"field",\N
"getPositivePolarForm","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getPositivePolarForm"
"maxUlps",\N
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~log~QDfp;"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~B"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~equals~QComplex;~QComplex;"
"getQ0","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getQ0"
"a",\N
"field",\N
"x",\N
"logInternal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~logInternal~\\[QDfp;"
"getQ1","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getQ1"
"x",\N
"y",\N
"a",\N
"getQ2","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getQ2"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~I"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~equals~QComplex;~QComplex;~D"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~pow~QDfp;~I"
"field",\N
"getQ3","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getQ3"
"x",\N
"base",\N
"x",\N
"y",\N
"getScalarPart","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getScalarPart"
"a",\N
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~J"
"eps",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~pow~QDfp;~QDfp;"
"getVectorPart","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~getVectorPart"
"equalsWithRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~equalsWithRelativeTolerance~QComplex;~QComplex;~D"
"field",\N
"x",\N
"x",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~hashCode"
"x",\N
"y",\N
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~D"
"y",\N
"isPureQuaternion","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~isPureQuaternion~D"
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~sin~QDfp;"
"eps",\N
"field",\N
"eps",\N
"a",\N
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~exp"
"x",\N
"isUnitQuaternion","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~isUnitQuaternion~D"
"sinInternal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~sinInternal~\\[QDfp;"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfp;"
"getArgument","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~getArgument"
"eps",\N
"a",\N
"d",\N
"getField","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~getField"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~multiply~QQuaternion;~QQuaternion;"
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~split~QDfpField;~QString;"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~QString;"
"getImaginary","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~getImaginary"
"q1",\N
"field",\N
"field",\N
"q2",\N
"a",\N
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~getReal"
"s",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~multiply~QQuaternion;"
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~split~QDfp;"
"Dfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~Dfp~QDfpField;~B~B"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~hashCode"
"q",\N
"a",\N
"field",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~isInfinite"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~multiply~D"
"splitDiv","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~splitDiv~\\[QDfp;~\\[QDfp;"
"sign",\N
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~isNaN"
"nans",\N
"alpha",\N
"a",\N
"normalize","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~normalize"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~abs"
"b",\N
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~log"
"splitMult","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~splitMult~\\[QDfp;~\\[QDfp;"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~acos"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~subtract~QQuaternion;~QQuaternion;"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~multiply~I"
"a",\N
"q1",\N
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~acosh"
"factor",\N
"b",\N
"q2",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~multiply~D"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~add~QDfp;"
"splitPow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~splitPow~\\[QDfp;~I"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~subtract~QQuaternion;"
"factor",\N
"x",\N
"base",\N
"q",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~negate"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~add~D"
"a",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion~toString"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~pow~D"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpMath.java[DfpMath~tan~QDfp;"
"a",\N
"I","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion^I"
"a",\N
"x",\N
"align","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~align~I"
"IDENTITY","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion^IDENTITY"
"readResolve","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~readResolve"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec"
"e",\N
"J","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion^J"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~reciprocal"
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~asin"
"factory",\N
"K","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion^K"
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~sin"
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~asinh"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~B"
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Quaternion.java[Quaternion^ZERO"
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~sinh"
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~atan"
"factory",\N
"BracketingNthOrderBrentSolverDFP","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFP.java[BracketingNthOrderBrentSolverDFP"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~sqrt"
"x",\N
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~atanh"
"getAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFP.java[BracketingNthOrderBrentSolverDFP~getAbsoluteAccuracy"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~I"
"sqrt1z","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~sqrt1z"
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~cbrt"
"getFunctionValueAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFP.java[BracketingNthOrderBrentSolverDFP~getFunctionValueAccuracy"
"factory",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~subtract~D"
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~ceil"
"x",\N
"getRelativeAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFP.java[BracketingNthOrderBrentSolverDFP~getRelativeAccuracy"
"subtrahend",\N
"classify","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~classify"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~J"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~tan"
"DfpField","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField"
"factory",\N
"complement","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~complement~I"
"DfpField","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~DfpField~I"
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~tanh"
"x",\N
"extra",\N
"decimalDigits",\N
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~D"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~toString"
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~copySign~QDfp;"
"clearIEEEFlags","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~clearIEEEFlags"
"factory",\N
"valueOf","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~valueOf~D~D"
"s",\N
"computeExp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~computeExp~QDfp;~QDfp;"
"x",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~copySign~D"
"realPart",\N
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfp;"
"a",\N
"imaginaryPart",\N
"s",\N
"one",\N
"d",\N
"valueOf","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex~valueOf~D"
"copysign","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~copysign~QDfp;~QDfp;"
"computeLn","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~computeLn~QDfp;~QDfp;~QDfp;"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~QString;"
"realPart",\N
"x",\N
"a",\N
"factory",\N
"I","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex^I"
"y",\N
"one",\N
"s",\N
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~cos"
"two",\N
"INF","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex^INF"
"DfpDec","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~DfpDec~QDfpField;~B~B"
"getE","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getE"
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~cosh"
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex^NaN"
"factory",\N
"getESplit","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getESplit"
"dfp2sci","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~dfp2sci"
"sign",\N
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex^ONE"
"getIEEEFlags","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getIEEEFlags"
"dfp2string","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~dfp2string"
"nans",\N
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.complex{Complex.java[Complex^ZERO"
"getLn10","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getLn10"
"getDecimalDigits","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~getDecimalDigits"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~divide~QDfp;"
"divisor",\N
"getLn2","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getLn2"
"UnivariateDfpFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{UnivariateDfpFunction.java[UnivariateDfpFunction"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~divide~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{UnivariateDfpFunction.java[UnivariateDfpFunction~value~QDfp;"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance"
"getLn2Split","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getLn2Split"
"divisor",\N
"x",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~B"
"getLn5","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getLn5"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~divide~D"
"AbstractIntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution"
"x",\N
"getLn5Split","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getLn5Split"
"AbstractIntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~AbstractIntegerDistribution"
"a",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~I"
"dotrap","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~dotrap~I~QString;~QDfp;~QDfp;"
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~logProbability~I"
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getOne"
"x",\N
"type",\N
"x",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~J"
"getPi","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getPi"
"what",\N
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~reseedRandomGenerator~J"
"x",\N
"getPiSplit","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getPiSplit"
"oper",\N
"seed",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~D"
"result",\N
"getRadixDigits","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getRadixDigits"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~sample"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~equals~QObject;"
"x",\N
"getSqr2","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getSqr2"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~sample~I"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~QDfp;"
"other",\N
"getSqr2Reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getSqr2Reciprocal"
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~exp"
"sampleSize",\N
"d",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~QString;"
"getSqr2Split","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getSqr2Split"
"solveInverseCumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractIntegerDistribution.java[AbstractIntegerDistribution~solveInverseCumulativeProbability~D~I~I"
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~expm1"
"p",\N
"s",\N
"getSqr3","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getSqr3"
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~floor"
"lower",\N
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~newInstance~B~B"
"getSqr3Reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getSqr3Reciprocal"
"getField","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getField"
"upper",\N
"sign",\N
"getTwo","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getTwo"
"MultivariateNormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateNormalDistribution.java[MultivariateNormalDistribution"
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getOne"
"nans",\N
"getMeans","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateNormalDistribution.java[MultivariateNormalDistribution~getMeans"
"nextAfter","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~nextAfter~QDfp;"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~getZero"
"getRadixDigits","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getRadixDigits"
"getStandardDeviations","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateNormalDistribution.java[MultivariateNormalDistribution~getStandardDeviations"
"x",\N
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp"
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getReal"
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpDec.java[DfpDec~round~I"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateNormalDistribution.java[MultivariateNormalDistribution~sample"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~B"
"getTwo","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getTwo"
"in",\N
"LaplaceDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution"
"x",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~getZero"
"PoissonDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution"
"LaplaceDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~LaplaceDistribution~D~D"
"PoissonDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~PoissonDistribution~D~I"
"greaterThan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~greaterThan~QDfp;"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~I"
"mu",\N
"x",\N
"p",\N
"x",\N
"beta",\N
"maxIterations",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~hashCode"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~J"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~cumulativeProbability~D"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~cumulativeProbability~I"
"x",\N
"hypot","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~hypot~QDfp;"
"x",\N
"x",\N
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~D"
"y",\N
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~density~D"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~getMean"
"x",\N
"intLog10","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~intLog10"
"x",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~getNumericalMean"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~QDfp;"
"intValue","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~intValue"
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getLocation"
"d",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~getNumericalVariance"
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~isInfinite"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getNumericalMean"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~QString;"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~getSupportLowerBound"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~isNaN"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getNumericalVariance"
"s",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~getSupportUpperBound"
"isZero","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~isZero"
"newDfp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~newDfp~B~B"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getScale"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~isSupportConnected"
"sign",\N
"lessThan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~lessThan~QDfp;"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getSupportLowerBound"
"nans",\N
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~logProbability~I"
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~getSupportUpperBound"
"setIEEEFlags","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~setIEEEFlags~I"
"x",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~QDfp;~QDfp;~QDfp;~QDfp;"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~isSupportConnected"
"flags",\N
"normalApproximateProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~normalApproximateProbability~I"
"a1",\N
"setIEEEFlagsBits","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField~setIEEEFlagsBits~I"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~isSupportLowerBoundInclusive"
"x",\N
"b1",\N
"bits",\N
"a2",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~probability~I"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LaplaceDistribution.java[LaplaceDistribution~isSupportUpperBoundInclusive"
"FLAG_DIV_ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField^FLAG_DIV_ZERO"
"b2",\N
"x",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~D~QDfp;~D~QDfp;"
"IntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution"
"FLAG_INEXACT","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField^FLAG_INEXACT"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution~sample"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~cumulativeProbability~I"
"a1",\N
"FLAG_INVALID","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField^FLAG_INVALID"
"DEFAULT_EPSILON","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution^DEFAULT_EPSILON"
"x",\N
"b1",\N
"FLAG_OVERFLOW","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField^FLAG_OVERFLOW"
"a2",\N
"DEFAULT_MAX_ITERATIONS","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PoissonDistribution.java[PoissonDistribution^DEFAULT_MAX_ITERATIONS"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~getNumericalMean"
"b2",\N
"FLAG_UNDERFLOW","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{DfpField.java[DfpField^FLAG_UNDERFLOW"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~getNumericalVariance"
"SaddlePointExpansion","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{SaddlePointExpansion.java[SaddlePointExpansion"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;"
"a1",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~getSupportLowerBound"
"getDeviancePart","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{SaddlePointExpansion.java[SaddlePointExpansion~getDeviancePart~D~D"
"UniformIntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution"
"b1",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~cumulativeProbability~I"
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~getSupportUpperBound"
"a2",\N
"x",\N
"mu",\N
"b2",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~isSupportConnected"
"getStirlingError","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{SaddlePointExpansion.java[SaddlePointExpansion~getStirlingError~D"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~getNumericalMean"
"a3",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~probability~I"
"b3",\N
"z",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~getNumericalVariance"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~D~QDfp;~D~QDfp;~D~QDfp;"
"x",\N
"logBinomialProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{SaddlePointExpansion.java[SaddlePointExpansion~logBinomialProbability~I~I~D~D"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~getSupportLowerBound"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~reseedRandomGenerator~J"
"a1",\N
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~getSupportUpperBound"
"b1",\N
"n",\N
"seed",\N
"a2",\N
"p",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~sample"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~isSupportConnected"
"b2",\N
"q",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~probability~I"
"a3",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{IntegerDistribution.java[IntegerDistribution~sample~I"
"GumbelDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution"
"GumbelDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~GumbelDistribution~D~D"
"x",\N
"sampleSize",\N
"b3",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformIntegerDistribution.java[UniformIntegerDistribution~sample"
"mu",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;~QDfp;"
"TriangularDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution"
"beta",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~cumulativeProbability~D"
"a1",\N
"BinomialDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~cumulativeProbability~D"
"b1",\N
"BinomialDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~BinomialDistribution~I~D"
"x",\N
"x",\N
"a2",\N
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~density~D"
"trials",\N
"b2",\N
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~density~D"
"p",\N
"x",\N
"a3",\N
"x",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~cumulativeProbability~I"
"getMode","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getMode"
"b3",\N
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getLocation"
"x",\N
"a4",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getNumericalMean"
"b4",\N
"getNumberOfTrials","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getNumberOfTrials"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getNumericalMean"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getNumericalVariance"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~linearCombination~D~QDfp;~D~QDfp;~D~QDfp;~D~QDfp;"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getNumericalMean"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getNumericalVariance"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getSolverAbsoluteAccuracy"
"a1",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getNumericalVariance"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getScale"
"b1",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getSupportLowerBound"
"a2",\N
"getProbabilityOfSuccess","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getProbabilityOfSuccess"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getSupportLowerBound"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~getSupportUpperBound"
"b2",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~getSupportUpperBound"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getSupportLowerBound"
"a3",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~isSupportConnected"
"b3",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~getSupportUpperBound"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~isSupportConnected"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~isSupportLowerBoundInclusive"
"a4",\N
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~isSupportLowerBoundInclusive"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~isSupportConnected"
"b4",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TriangularDistribution.java[TriangularDistribution~isSupportUpperBoundInclusive"
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~logProbability~I"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~log"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GumbelDistribution.java[GumbelDistribution~isSupportUpperBoundInclusive"
"AbstractMultivariateRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractMultivariateRealDistribution.java[AbstractMultivariateRealDistribution"
"x",\N
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~log10"
"HypergeometricDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractMultivariateRealDistribution.java[AbstractMultivariateRealDistribution~getDimension"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BinomialDistribution.java[BinomialDistribution~probability~I"
"calculateNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~calculateNumericalVariance"
"log10K","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~log10K"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractMultivariateRealDistribution.java[AbstractMultivariateRealDistribution~reseedRandomGenerator~J"
"x",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~cumulativeProbability~I"
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~log1p"
"seed",\N
"CauchyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution"
"x",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractMultivariateRealDistribution.java[AbstractMultivariateRealDistribution~sample"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~multiply~QDfp;"
"CauchyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~CauchyDistribution"
"getNumberOfSuccesses","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getNumberOfSuccesses"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractMultivariateRealDistribution.java[AbstractMultivariateRealDistribution~sample~I"
"x",\N
"CauchyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~CauchyDistribution~D~D"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getNumericalMean"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~multiply~I"
"sampleSize",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getNumericalVariance"
"median",\N
"x",\N
"FDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution"
"scale",\N
"getPopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getPopulationSize"
"calculateNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~calculateNumericalVariance"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~multiply~D"
"CauchyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~CauchyDistribution~D~D~D"
"getSampleSize","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getSampleSize"
"a",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~cumulativeProbability~D"
"median",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~negate"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getSupportLowerBound"
"x",\N
"scale",\N
"negativeOrNull","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~negativeOrNull"
"inverseCumAccuracy",\N
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~density~D"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~getSupportUpperBound"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~cumulativeProbability~D"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance"
"x",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~isSupportConnected"
"x",\N
"getDenominatorDegreesOfFreedom","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getDenominatorDegreesOfFreedom"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~B"
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~logProbability~I"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~density~D"
"x",\N
"x",\N
"getNumeratorDegreesOfFreedom","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getNumeratorDegreesOfFreedom"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~probability~I"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~I"
"x",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getNumericalMean"
"getMedian","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getMedian"
"x",\N
"x",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getNumericalVariance"
"upperCumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{HypergeometricDistribution.java[HypergeometricDistribution~upperCumulativeProbability~I"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~J"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getNumericalMean"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getSolverAbsoluteAccuracy"
"x",\N
"x",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getNumericalVariance"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getSupportLowerBound"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~D"
"EnumeratedRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getScale"
"EnumeratedRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~EnumeratedRealDistribution~\\[D"
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~getSupportUpperBound"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getSolverAbsoluteAccuracy"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~QDfp;"
"data",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~isSupportConnected"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getSupportLowerBound"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~cumulativeProbability~D"
"d",\N
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~isSupportLowerBoundInclusive"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~QString;"
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~getSupportUpperBound"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~isSupportUpperBoundInclusive"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~density~D"
"s",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~isSupportConnected"
"newInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~newInstance~B~B"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution~logDensity~D"
"x",\N
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~isSupportLowerBoundInclusive"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~getNumericalMean"
"sig",\N
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution~isSupportUpperBoundInclusive"
"code",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{FDistribution.java[FDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~getNumericalVariance"
"nextAfter","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~nextAfter~QDfp;"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{CauchyDistribution.java[CauchyDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"ParetoDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~getSupportLowerBound"
"x",\N
"ParetoDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~ParetoDistribution"
"LogNormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~getSupportUpperBound"
"positiveOrNull","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~positiveOrNull"
"LogNormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~LogNormalDistribution"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~cumulativeProbability~D"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~isSupportConnected"
"x",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~cumulativeProbability~D"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~isSupportLowerBoundInclusive"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~pow~D"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~density~D"
"p",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~isSupportUpperBoundInclusive"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~pow~I"
"x",\N
"x",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~probability~D"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~density~D"
"n",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getNumericalMean"
"x",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~pow~QDfp;"
"x",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution~sample"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getNumericalVariance"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getNumericalMean"
"e",\N
"innerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedRealDistribution.java[EnumeratedRealDistribution^innerDistribution"
"power10","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~power10~I"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getScale"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getNumericalVariance"
"e",\N
"getShape","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getShape"
"RealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution"
"power10K","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~power10K~I"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getScale"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getSolverAbsoluteAccuracy"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~cumulativeProbability~D"
"e",\N
"x",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getSupportLowerBound"
"getShape","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getShape"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~reciprocal"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~density~D"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~getSupportUpperBound"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getSolverAbsoluteAccuracy"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~remainder~QDfp;"
"x",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~isSupportConnected"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getSupportLowerBound"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~getNumericalMean"
"d",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~getSupportUpperBound"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~isSupportLowerBoundInclusive"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~remainder~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~getNumericalVariance"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~isSupportConnected"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~isSupportUpperBoundInclusive"
"a",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~getSupportLowerBound"
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~rint"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~isSupportLowerBoundInclusive"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~logDensity~D"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~getSupportUpperBound"
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~rootN~I"
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~isSupportUpperBoundInclusive"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~isSupportConnected"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution~sample"
"n",\N
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~logDensity~D"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~isSupportLowerBoundInclusive"
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~round~I"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ParetoDistribution.java[ParetoDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~isSupportUpperBoundInclusive"
"n",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution~sample"
"ChiSquaredDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution"
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~round"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~probability~D"
"ChiSquaredDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~ChiSquaredDistribution~D"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogNormalDistribution.java[LogNormalDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~scalb~I"
"EnumeratedIntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution"
"degreesOfFreedom",\N
"x",\N
"EnumeratedIntegerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~EnumeratedIntegerDistribution~\\[I"
"n",\N
"ChiSquaredDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~ChiSquaredDistribution~D~D"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~reseedRandomGenerator~J"
"shiftLeft","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~shiftLeft"
"data",\N
"degreesOfFreedom",\N
"seed",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~cumulativeProbability~I"
"inverseCumAccuracy",\N
"shiftRight","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~shiftRight"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~sample"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~cumulativeProbability~D"
"x",\N
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~signum"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{RealDistribution.java[RealDistribution~sample~I"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~getNumericalMean"
"x",\N
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~sin"
"sampleSize",\N
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~sinh"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~density~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~getNumericalVariance"
"NakagamiDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution"
"x",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~getSupportLowerBound"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~sqrt"
"NakagamiDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~NakagamiDistribution~D~D"
"getDegreesOfFreedom","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getDegreesOfFreedom"
"strictlyNegative","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~strictlyNegative"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~getSupportUpperBound"
"mu",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getNumericalMean"
"omega",\N
"strictlyPositive","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~strictlyPositive"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~isSupportConnected"
"NakagamiDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~NakagamiDistribution~D~D~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getNumericalVariance"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~probability~I"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~subtract~QDfp;"
"mu",\N
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getSolverAbsoluteAccuracy"
"x",\N
"x",\N
"omega",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getSupportLowerBound"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution~sample"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~subtract~D"
"inverseAbsoluteAccuracy",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~cumulativeProbability~D"
"a",\N
"innerDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistribution.java[EnumeratedIntegerDistribution^innerDistribution"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~getSupportUpperBound"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~tan"
"x",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~isSupportConnected"
"MultivariateRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateRealDistribution.java[MultivariateRealDistribution"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~density~D"
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~tanh"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateRealDistribution.java[MultivariateRealDistribution~density~\\[D"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~isSupportLowerBoundInclusive"
"x",\N
"toDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~toDouble"
"x",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getNumericalMean"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~isSupportUpperBoundInclusive"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateRealDistribution.java[MultivariateRealDistribution~getDimension"
"toSplitDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~toSplitDouble"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution~logDensity~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getNumericalVariance"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateRealDistribution.java[MultivariateRealDistribution~reseedRandomGenerator~J"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~toString"
"x",\N
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getScale"
"seed",\N
"trap","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~trap~I~QString;~QDfp;~QDfp;~QDfp;"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ChiSquaredDistribution.java[ChiSquaredDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MultivariateRealDistribution.java[MultivariateRealDistribution~sample"
"getShape","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getShape"
"type",\N
"what",\N
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getSolverAbsoluteAccuracy"
"ZipfDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution"
"ExponentialDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution"
"oper",\N
"ZipfDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~ZipfDistribution~I~D"
"ExponentialDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~ExponentialDistribution~D"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getSupportLowerBound"
"def",\N
"numberOfElements",\N
"mean",\N
"result",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~getSupportUpperBound"
"exponent",\N
"ExponentialDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~ExponentialDistribution~D~D"
"unequal","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp~unequal~QDfp;"
"calculateNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~calculateNumericalMean"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~isSupportConnected"
"mean",\N
"x",\N
"inverseCumAccuracy",\N
"calculateNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~calculateNumericalVariance"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~isSupportLowerBoundInclusive"
"ERR_SCALE","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^ERR_SCALE"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~cumulativeProbability~D"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution~isSupportUpperBoundInclusive"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~cumulativeProbability~I"
"FINITE","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^FINITE"
"x",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NakagamiDistribution.java[NakagamiDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"x",\N
"INFINITE","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^INFINITE"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~density~D"
"getExponent","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getExponent"
"BetaDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution"
"MAX_EXP","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^MAX_EXP"
"x",\N
"BetaDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~BetaDistribution~D~D"
"getNumberOfElements","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getNumberOfElements"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getMean"
"MIN_EXP","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^MIN_EXP"
"alpha",\N
"beta",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getNumericalMean"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getNumericalMean"
"QNAN","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^QNAN"
"BetaDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~BetaDistribution~D~D~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getNumericalVariance"
"RADIX","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^RADIX"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getNumericalVariance"
"alpha",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getSupportLowerBound"
"beta",\N
"SNAN","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^SNAN"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getSolverAbsoluteAccuracy"
"inverseCumAccuracy",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~getSupportUpperBound"
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^exp"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getSupportLowerBound"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~cumulativeProbability~D"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~isSupportConnected"
"mant","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^mant"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~getSupportUpperBound"
"x",\N
"nans","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^nans"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~density~D"
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~logProbability~I"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~isSupportConnected"
"x",\N
"sign","=mathmain3.6/src<main.java.org.apache.commons.math3.dfp{Dfp.java[Dfp^sign"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~isSupportLowerBoundInclusive"
"x",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~probability~I"
"getAlpha","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getAlpha"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~isSupportUpperBoundInclusive"
"ConstantRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution"
"x",\N
"ConstantRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~ConstantRealDistribution~D"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~logDensity~D"
"getBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getBeta"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution~sample"
"value",\N
"x",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getNumericalMean"
"ZipfRejectionInversionSampler","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution[ZipfRejectionInversionSampler"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~cumulativeProbability~D"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution~sample"
"ZipfRejectionInversionSampler","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution[ZipfRejectionInversionSampler~ZipfRejectionInversionSampler~I~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getNumericalVariance"
"x",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ExponentialDistribution.java[ExponentialDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"numberOfElements",\N
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getSolverAbsoluteAccuracy"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~density~D"
"exponent",\N
"LevyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution"
"x",\N
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getSupportLowerBound"
"helper1","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution[ZipfRejectionInversionSampler~helper1~D"
"LevyDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~LevyDistribution~D~D"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~getNumericalMean"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~getSupportUpperBound"
"x",\N
"mu",\N
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~getNumericalVariance"
"helper2","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ZipfDistribution.java[ZipfDistribution[ZipfRejectionInversionSampler~helper2~D"
"c",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~isSupportConnected"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~getSupportLowerBound"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~cumulativeProbability~D"
"x",\N
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~isSupportLowerBoundInclusive"
"AbstractRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution"
"x",\N
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~getSupportUpperBound"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~isSupportUpperBoundInclusive"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~density~D"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~isSupportConnected"
"AbstractRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~AbstractRealDistribution"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~logDensity~D"
"x",\N
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~getSolverAbsoluteAccuracy"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~isSupportLowerBoundInclusive"
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getLocation"
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~isSupportUpperBoundInclusive"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~logDensity~D"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution~sample"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getNumericalMean"
"x",\N
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~reseedRandomGenerator~J"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getNumericalVariance"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~probability~D~D"
"seed",\N
"ChengBetaSampler","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{BetaDistribution.java[BetaDistribution[ChengBetaSampler"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getScale"
"x0",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{ConstantRealDistribution.java[ConstantRealDistribution~sample"
"EnumeratedDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedDistribution.java[EnumeratedDistribution"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getSupportLowerBound"
"x1",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedDistribution.java[EnumeratedDistribution~probability~QT;"
"GeometricDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution"
"x",\N
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~probability~D"
"GeometricDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~GeometricDistribution~D"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~getSupportUpperBound"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedDistribution.java[EnumeratedDistribution~reseedRandomGenerator~J"
"x",\N
"p",\N
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~isSupportConnected"
"seed",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~cumulativeProbability~I"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~reseedRandomGenerator~J"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~isSupportLowerBoundInclusive"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{EnumeratedDistribution.java[EnumeratedDistribution~sample"
"seed",\N
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~isSupportUpperBoundInclusive"
"MixtureMultivariateNormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateNormalDistribution.java[MixtureMultivariateNormalDistribution"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~getNumericalMean"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~sample"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LevyDistribution.java[LevyDistribution~logDensity~D"
"MixtureMultivariateNormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateNormalDistribution.java[MixtureMultivariateNormalDistribution~MixtureMultivariateNormalDistribution~\\[D~\\[\\[D~\\[\\[\\[D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~getNumericalVariance"
"x",\N
"weights",\N
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution~sample~I"
"means",\N
"WeibullDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution"
"getProbabilityOfSuccess","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~getProbabilityOfSuccess"
"sampleSize",\N
"covariances",\N
"WeibullDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~WeibullDistribution~D~D~D"
"SOLVER_DEFAULT_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{AbstractRealDistribution.java[AbstractRealDistribution^SOLVER_DEFAULT_ABSOLUTE_ACCURACY"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~getSupportLowerBound"
"alpha",\N
"LogisticDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~getSupportUpperBound"
"beta",\N
"LogisticDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~LogisticDistribution~D~D"
"NormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution"
"inverseCumAccuracy",\N
"NormalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~NormalDistribution"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~isSupportConnected"
"mu",\N
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~logProbability~I"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~cumulativeProbability~D"
"calculateNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~calculateNumericalMean"
"s",\N
"x",\N
"x",\N
"calculateNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~calculateNumericalVariance"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~cumulativeProbability~D"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~density~D"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GeometricDistribution.java[GeometricDistribution~probability~I"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~cumulativeProbability~D"
"x",\N
"x",\N
"x",\N
"x",\N
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~density~D"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getMean"
"KolmogorovSmirnovDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{KolmogorovSmirnovDistribution.java[KolmogorovSmirnovDistribution"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~density~D"
"x",\N
"TDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getNumericalMean"
"x",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~cumulativeProbability~D"
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getLocation"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getNumericalVariance"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getNumericalMean"
"x",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getNumericalMean"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getSolverAbsoluteAccuracy"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~density~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getNumericalVariance"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getNumericalVariance"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getStandardDeviation"
"x",\N
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getScale"
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getScale"
"getDegreesOfFreedom","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getDegreesOfFreedom"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getSupportLowerBound"
"getShape","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getShape"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getSupportLowerBound"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getNumericalMean"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~getSupportUpperBound"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getSolverAbsoluteAccuracy"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~getSupportUpperBound"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getNumericalVariance"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~isSupportConnected"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getSupportLowerBound"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~isSupportConnected"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getSolverAbsoluteAccuracy"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~getSupportUpperBound"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~isSupportLowerBoundInclusive"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~isSupportLowerBoundInclusive"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getSupportLowerBound"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~isSupportUpperBoundInclusive"
"inverseCumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~inverseCumulativeProbability~D"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{LogisticDistribution.java[LogisticDistribution~isSupportUpperBoundInclusive"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~getSupportUpperBound"
"p",\N
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~logDensity~D"
"GammaDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~isSupportConnected"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~isSupportConnected"
"x",\N
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~cumulativeProbability~D"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~isSupportLowerBoundInclusive"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~isSupportLowerBoundInclusive"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution~sample"
"x",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~isSupportUpperBoundInclusive"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{NormalDistribution.java[NormalDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~isSupportUpperBoundInclusive"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~density~D"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution~logDensity~D"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution~logDensity~D"
"UniformRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution"
"x",\N
"UniformRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~UniformRealDistribution"
"getAlpha","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getAlpha"
"x",\N
"x",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{WeibullDistribution.java[WeibullDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{TDistribution.java[TDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~cumulativeProbability~D"
"getBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getBeta"
"x",\N
"PascalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution"
"MixtureMultivariateRealDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateRealDistribution.java[MixtureMultivariateRealDistribution"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getNumericalMean"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateRealDistribution.java[MixtureMultivariateRealDistribution~density~\\[D"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~cumulativeProbability~I"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~density~D"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getNumericalVariance"
"values",\N
"x",\N
"x",\N
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getScale"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateRealDistribution.java[MixtureMultivariateRealDistribution~reseedRandomGenerator~J"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~getNumericalMean"
"getNumberOfSuccesses","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getNumberOfSuccesses"
"seed",\N
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getNumericalMean"
"getShape","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getShape"
"getSolverAbsoluteAccuracy","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getSolverAbsoluteAccuracy"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~getNumericalVariance"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{MixtureMultivariateRealDistribution.java[MixtureMultivariateRealDistribution~sample"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getNumericalVariance"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~getSupportLowerBound"
"getProbabilityOfSuccess","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getProbabilityOfSuccess"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getSupportLowerBound"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~getSupportUpperBound"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getSupportLowerBound"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~isSupportConnected"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~getSupportUpperBound"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~getSupportUpperBound"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~isSupportLowerBoundInclusive"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~isSupportConnected"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~isSupportConnected"
"MultivariateNormalMixtureExpectationMaximization","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization"
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~isSupportLowerBoundInclusive"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~isSupportUpperBoundInclusive"
"logProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~logProbability~I"
"getLogLikelihood","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization~getLogLikelihood"
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~isSupportUpperBoundInclusive"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution~sample"
"x",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{UniformRealDistribution.java[UniformRealDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"DataRow","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow"
"DataRow","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow~DataRow~\\[D"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{PascalDistribution.java[PascalDistribution~probability~I"
"logDensity","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~logDensity~D"
"data",\N
"x",\N
"x",\N
"NullArgumentException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NullArgumentException.java[NullArgumentException"
"sample","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution~sample"
"NullArgumentException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NullArgumentException.java[NullArgumentException~NullArgumentException"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow~compareTo~QDataRow;"
"other",\N
"DEFAULT_INVERSE_ABSOLUTE_ACCURACY","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution{GammaDistribution.java[GammaDistribution^DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
"MathIllegalNumberException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalNumberException.java[MathIllegalNumberException"
"getArgument","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalNumberException.java[MathIllegalNumberException~getArgument"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow~equals~QObject;"
"other",\N
"MathParseException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathParseException.java[MathParseException"
"INTEGER_ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalNumberException.java[MathIllegalNumberException^INTEGER_ZERO"
"NoDataException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoDataException.java[NoDataException"
"getRow","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow~getRow"
"MathParseException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathParseException.java[MathParseException~MathParseException~QString;~I~QClass\\<*>;"
"NoDataException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoDataException.java[NoDataException~NoDataException"
"NoBracketingException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException"
"NoBracketingException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException~NoBracketingException~D~D~D~D"
"lo",\N
"wrong",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximization.java[MultivariateNormalMixtureExpectationMaximization[DataRow~hashCode"
"position",\N
"hi",\N
"fLo",\N
"MathIllegalArgumentException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalArgumentException.java[MathIllegalArgumentException"
"type",\N
"fHi",\N
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalArgumentException.java[MathIllegalArgumentException~getLocalizedMessage"
"MathParseException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathParseException.java[MathParseException~MathParseException~QString;~I"
"getFHi","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException~getFHi"
"MultiDimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException"
"getFLo","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException~getFLo"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalArgumentException.java[MathIllegalArgumentException~getMessage"
"MultiDimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException~MultiDimensionMismatchException~\\[QInteger;~\\[QInteger;"
"wrong",\N
"wrong",\N
"expected",\N
"position",\N
"getHi","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException~getHi"
"getExpectedDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException~getExpectedDimension~I"
"ZeroException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{ZeroException.java[ZeroException"
"getLo","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NoBracketingException.java[NoBracketingException~getLo"
"ConvergenceException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{ConvergenceException.java[ConvergenceException"
"ConvergenceException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{ConvergenceException.java[ConvergenceException~ConvergenceException"
"ZeroException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{ZeroException.java[ZeroException~ZeroException"
"index",\N
"NumberIsTooLargeException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooLargeException.java[NumberIsTooLargeException"
"NumberIsTooLargeException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooLargeException.java[NumberIsTooLargeException~NumberIsTooLargeException~QNumber;~QNumber;~Z"
"getExpectedDimensions","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException~getExpectedDimensions"
"TooManyIterationsException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{TooManyIterationsException.java[TooManyIterationsException"
"TooManyEvaluationsException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{TooManyEvaluationsException.java[TooManyEvaluationsException"
"TooManyIterationsException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{TooManyIterationsException.java[TooManyIterationsException~TooManyIterationsException~QNumber;"
"TooManyEvaluationsException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{TooManyEvaluationsException.java[TooManyEvaluationsException~TooManyEvaluationsException~QNumber;"
"wrong",\N
"getWrongDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException~getWrongDimension~I"
"max",\N
"max",\N
"max",\N
"index",\N
"boundIsAllowed",\N
"getWrongDimensions","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MultiDimensionMismatchException.java[MultiDimensionMismatchException~getWrongDimensions"
"getBoundIsAllowed","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooLargeException.java[NumberIsTooLargeException~getBoundIsAllowed"
"NonMonotonicSequenceException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NonMonotonicSequenceException.java[NonMonotonicSequenceException"
"MathRuntimeException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathRuntimeException.java[MathRuntimeException"
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathRuntimeException.java[MathRuntimeException~getLocalizedMessage"
"NonMonotonicSequenceException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NonMonotonicSequenceException.java[NonMonotonicSequenceException~NonMonotonicSequenceException~QNumber;~QNumber;~I"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathRuntimeException.java[MathRuntimeException~getMessage"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooLargeException.java[NumberIsTooLargeException~getMax"
"MaxCountExceededException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MaxCountExceededException.java[MaxCountExceededException"
"wrong",\N
"previous",\N
"MaxCountExceededException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MaxCountExceededException.java[MaxCountExceededException~MaxCountExceededException~QNumber;"
"NotFiniteNumberException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotFiniteNumberException.java[NotFiniteNumberException"
"InsufficientDataException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{InsufficientDataException.java[InsufficientDataException"
"index",\N
"InsufficientDataException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{InsufficientDataException.java[InsufficientDataException~InsufficientDataException"
"NotFiniteNumberException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotFiniteNumberException.java[NotFiniteNumberException~NotFiniteNumberException~QNumber;~\\[QObject;"
"max",\N
"getIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NonMonotonicSequenceException.java[NonMonotonicSequenceException~getIndex"
"NumberIsTooSmallException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooSmallException.java[NumberIsTooSmallException"
"wrong",\N
"getPrevious","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NonMonotonicSequenceException.java[NonMonotonicSequenceException~getPrevious"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MaxCountExceededException.java[MaxCountExceededException~getMax"
"NumberIsTooSmallException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooSmallException.java[NumberIsTooSmallException~NumberIsTooSmallException~QNumber;~QNumber;~Z"
"",\N
"wrong",\N
"getStrict","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NonMonotonicSequenceException.java[NonMonotonicSequenceException~getStrict"
"min",\N
"MathUnsupportedOperationException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathUnsupportedOperationException.java[MathUnsupportedOperationException"
"DimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{DimensionMismatchException.java[DimensionMismatchException"
"MathIllegalStateException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalStateException.java[MathIllegalStateException"
"boundIsAllowed",\N
"MathUnsupportedOperationException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathUnsupportedOperationException.java[MathUnsupportedOperationException~MathUnsupportedOperationException"
"MathIllegalStateException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalStateException.java[MathIllegalStateException~MathIllegalStateException"
"DimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{DimensionMismatchException.java[DimensionMismatchException~DimensionMismatchException~I~I"
"wrong",\N
"expected",\N
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalStateException.java[MathIllegalStateException~getLocalizedMessage"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{DimensionMismatchException.java[DimensionMismatchException~getDimension"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathIllegalStateException.java[MathIllegalStateException~getMessage"
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathUnsupportedOperationException.java[MathUnsupportedOperationException~getLocalizedMessage"
"getBoundIsAllowed","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooSmallException.java[NumberIsTooSmallException~getBoundIsAllowed"
"NotANumberException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotANumberException.java[NotANumberException"
"NotANumberException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotANumberException.java[NotANumberException~NotANumberException"
"MathInternalError","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathInternalError.java[MathInternalError"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NumberIsTooSmallException.java[NumberIsTooSmallException~getMin"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathUnsupportedOperationException.java[MathUnsupportedOperationException~getMessage"
"MathInternalError","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathInternalError.java[MathInternalError~MathInternalError"
"OutOfRangeException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{OutOfRangeException.java[OutOfRangeException"
"OutOfRangeException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{OutOfRangeException.java[OutOfRangeException~OutOfRangeException~QNumber;~QNumber;~QNumber;"
"NotStrictlyPositiveException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotStrictlyPositiveException.java[NotStrictlyPositiveException"
"NotPositiveException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotPositiveException.java[NotPositiveException"
"MathInternalError","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathInternalError.java[MathInternalError~MathInternalError~QThrowable;"
"NotStrictlyPositiveException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotStrictlyPositiveException.java[NotStrictlyPositiveException~NotStrictlyPositiveException~QNumber;"
"NotPositiveException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{NotPositiveException.java[NotPositiveException~NotPositiveException~QNumber;"
"wrong",\N
"cause",\N
"value",\N
"lo",\N
"value",\N
"MathArithmeticException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathArithmeticException.java[MathArithmeticException"
"hi",\N
"DummyLocalizable","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{DummyLocalizable.java[DummyLocalizable"
"ExceptionContextProvider","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContextProvider.java[ExceptionContextProvider"
"MathArithmeticException","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathArithmeticException.java[MathArithmeticException~MathArithmeticException"
"getHi","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{OutOfRangeException.java[OutOfRangeException~getHi"
"DummyLocalizable","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{DummyLocalizable.java[DummyLocalizable~DummyLocalizable~QString;"
"getContext","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContextProvider.java[ExceptionContextProvider~getContext"
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathArithmeticException.java[MathArithmeticException~getLocalizedMessage"
"getLo","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{OutOfRangeException.java[OutOfRangeException~getLo"
"source",\N
"Localizable","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{Localizable.java[Localizable"
"getLocalizedString","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{DummyLocalizable.java[DummyLocalizable~getLocalizedString~QLocale;"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception{MathArithmeticException.java[MathArithmeticException~getMessage"
"getLocalizedString","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{Localizable.java[Localizable~getLocalizedString~QLocale;"
"ArgUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ArgUtils.java[ArgUtils"
"locale",\N
"locale",\N
"flatten","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ArgUtils.java[ArgUtils~flatten~\\[QObject;"
"ExceptionContext","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext"
"getSourceString","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{DummyLocalizable.java[DummyLocalizable~getSourceString"
"getSourceString","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{Localizable.java[Localizable~getSourceString"
"ExceptionContext","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~ExceptionContext~QThrowable;"
"array",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{DummyLocalizable.java[DummyLocalizable~toString"
"throwable",\N
"DefaultMeasurementModel","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{DefaultMeasurementModel.java[DefaultMeasurementModel"
"KalmanFilter","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter"
"addMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~addMessage~QLocalizable;~\\[QObject;"
"getErrorCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter~getErrorCovariance"
"ProcessModel","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{ProcessModel.java[ProcessModel"
"DefaultProcessModel","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{DefaultProcessModel.java[DefaultProcessModel"
"pattern",\N
"getMeasurementDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter~getMeasurementDimension"
"MeasurementModel","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{MeasurementModel.java[MeasurementModel"
"GaussianFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter"
"",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter~fit~\\[D"
"AbstractCurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{AbstractCurveFitter.java[AbstractCurveFitter"
"getStateDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter~getStateDimension"
"getKeys","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getKeys"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{AbstractCurveFitter.java[AbstractCurveFitter~fit~QCollection\\<QWeightedObservedPoint;>;"
"initialGuess",\N
"getStateEstimation","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter~getStateEstimation"
"getLocalizedMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getLocalizedMessage"
"points",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter~fit"
"TheoreticalValuesFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{AbstractCurveFitter.java[AbstractCurveFitter[TheoreticalValuesFunction"
"predict","=mathmain3.6/src<main.java.org.apache.commons.math3.filter{KalmanFilter.java[KalmanFilter~predict"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getMessage"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser~ParameterGuesser~\\[QWeightedObservedPoint;"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getMessage~QLocale;"
"SimpleCurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{SimpleCurveFitter.java[SimpleCurveFitter"
"WeightedObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoint.java[WeightedObservedPoint"
"withMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{SimpleCurveFitter.java[SimpleCurveFitter~withMaxIterations~I"
"newMaxIter",\N
"observations",\N
"locale",\N
"WeightedObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoint.java[WeightedObservedPoint~WeightedObservedPoint~D~D~D"
"withStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{SimpleCurveFitter.java[SimpleCurveFitter~withStartPoint~\\[D"
"getMessage","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getMessage~QLocale;~QString;"
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser~guess"
"weight",\N
"newStart",\N
"x",\N
"locale",\N
"CurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter"
"y",\N
"separator",\N
"HarmonicCurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter"
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~addObservedPoint~D~D"
"getWeight","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getWeight"
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter~create"
"getThrowable","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getThrowable"
"x",\N
"withMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter~withMaxIterations~I"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~getValue~QString;"
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getX"
"y",\N
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~addObservedPoint~D~D~D"
"newMaxIter",\N
"getY","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getY"
"key",\N
"withStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter~withStartPoint~\\[D"
"weight",\N
"setValue","=mathmain3.6/src<main.java.org.apache.commons.math3.exception.util{ExceptionContext.java[ExceptionContext~setValue~QString;~QObject;"
"PolynomialCurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialCurveFitter.java[PolynomialCurveFitter"
"x",\N
"newStart",\N
"key",\N
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialCurveFitter.java[PolynomialCurveFitter~create~I"
"y",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter[ParameterGuesser"
"value",\N
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~addObservedPoint~QWeightedObservedPoint;"
"degree",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter[ParameterGuesser~ParameterGuesser~QCollection\\<QWeightedObservedPoint;>;"
"HarmonicFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter"
"withMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialCurveFitter.java[PolynomialCurveFitter~withMaxIterations~I"
"observed",\N
"observations",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter~fit~\\[D"
"clearObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~clearObservations"
"newMaxIter",\N
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicCurveFitter.java[HarmonicCurveFitter[ParameterGuesser~guess"
"initialGuess",\N
"withStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialCurveFitter.java[PolynomialCurveFitter~withStartPoint~\\[D"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~fit~QT;~\\[D"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter~fit"
"WeightedObservedPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints~add~D~D"
"newStart",\N
"f",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser"
"initialGuess",\N
"x",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser~ParameterGuesser~\\[QWeightedObservedPoint;"
"GaussianCurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~fit~I~QT;~\\[D"
"y",\N
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter~create"
"observations",\N
"maxEval",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints~add~D~D~D"
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser~guess"
"withMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter~withMaxIterations~I"
"f",\N
"weight",\N
"initialGuess",\N
"newMaxIter",\N
"PolynomialFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialFitter.java[PolynomialFitter"
"x",\N
"getObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter~getObservations"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialFitter.java[PolynomialFitter~fit~I~\\[D"
"withStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter~withStartPoint~\\[D"
"y",\N
"TheoreticalValuesFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{CurveFitter.java[CurveFitter[TheoreticalValuesFunction"
"maxEval",\N
"newStart",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints~add~QWeightedObservedPoint;"
"guess",\N
"observed",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter[ParameterGuesser"
"AbstractEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{AbstractEvaluation.java[AbstractEvaluation"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{PolynomialFitter.java[PolynomialFitter~fit~\\[D"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter[ParameterGuesser~ParameterGuesser~QCollection\\<QWeightedObservedPoint;>;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints~clear"
"AbstractEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{AbstractEvaluation.java[AbstractEvaluation~AbstractEvaluation~I"
"observations",\N
"guess",\N
"toList","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{WeightedObservedPoints.java[WeightedObservedPoints~toList"
"observationSize",\N
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting{GaussianCurveFitter.java[GaussianCurveFitter[ParameterGuesser~guess"
"getCost","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{AbstractEvaluation.java[AbstractEvaluation~getCost"
"LeastSquaresAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresAdapter.java[LeastSquaresAdapter"
"OptimumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{OptimumImpl.java[OptimumImpl"
"LeastSquaresAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresAdapter.java[LeastSquaresAdapter~LeastSquaresAdapter~QLeastSquaresProblem;"
"getCost","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{OptimumImpl.java[OptimumImpl~getCost"
"getRMS","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{AbstractEvaluation.java[AbstractEvaluation~getRMS"
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizer.java[GaussNewtonOptimizer"
"problem",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{OptimumImpl.java[OptimumImpl~getEvaluations"
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizer.java[GaussNewtonOptimizer~GaussNewtonOptimizer"
"getObservationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresAdapter.java[LeastSquaresAdapter~getObservationSize"
"LeastSquaresBuilder","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder"
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{OptimumImpl.java[OptimumImpl~getIterations"
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizer.java[GaussNewtonOptimizer~optimize~QLeastSquaresProblem;"
"build","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~build"
"getParameterSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresAdapter.java[LeastSquaresAdapter~getParameterSize"
"lsp",\N
"getRMS","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{OptimumImpl.java[OptimumImpl~getRMS"
"lazyEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~lazyEvaluation~Z"
"DenseWeightedEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{DenseWeightedEvaluation.java[DenseWeightedEvaluation"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizer.java[GaussNewtonOptimizer~toString"
"ParameterValidator","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{ParameterValidator.java[ParameterValidator"
"newValue",\N
"ValueAndJacobianFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{ValueAndJacobianFunction.java[ValueAndJacobianFunction"
"maxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~maxEvaluations~I"
"MultivariateJacobianFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{MultivariateJacobianFunction.java[MultivariateJacobianFunction"
"EvaluationRmsChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{EvaluationRmsChecker.java[EvaluationRmsChecker"
"LeastSquaresFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory"
"EvaluationRmsChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{EvaluationRmsChecker.java[EvaluationRmsChecker~EvaluationRmsChecker~D"
"newMaxEvaluations",\N
"LeastSquaresOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresOptimizer.java[LeastSquaresOptimizer"
"LocalValueAndJacobianFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalValueAndJacobianFunction"
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresOptimizer.java[LeastSquaresOptimizer~optimize~QLeastSquaresProblem;"
"maxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~maxIterations~I"
"tol",\N
"LocalLeastSquaresProblem","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalLeastSquaresProblem"
"EvaluationRmsChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{EvaluationRmsChecker.java[EvaluationRmsChecker~EvaluationRmsChecker~D~D"
"getObservationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalLeastSquaresProblem~getObservationSize"
"leastSquaresProblem",\N
"newMaxIterations",\N
"Optimum","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresOptimizer.java[LeastSquaresOptimizer[Optimum"
"model","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~model~QMultivariateJacobianFunction;"
"relTol",\N
"getParameterSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalLeastSquaresProblem~getParameterSize"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresOptimizer.java[LeastSquaresOptimizer[Optimum~getEvaluations"
"absTol",\N
"newModel",\N
"UnweightedEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalLeastSquaresProblem[UnweightedEvaluation"
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresOptimizer.java[LeastSquaresOptimizer[Optimum~getIterations"
"parameterValidator","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~parameterValidator~QParameterValidator;"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer"
"LazyUnweightedEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresFactory.java[LeastSquaresFactory[LocalLeastSquaresProblem[LazyUnweightedEvaluation"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer"
"LeastSquaresProblem","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem"
"newValidator",\N
"AbstractFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat"
"getObservationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem~getObservationSize"
"AbstractFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~AbstractFormat"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer~D~D~D~D~D"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~start~\\[D"
"getParameterSize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem~getParameterSize"
"newStart",\N
"initialStepBoundFactor",\N
"AbstractFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~AbstractFormat~QNumberFormat;"
"costRelativeTolerance",\N
"target","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresBuilder.java[LeastSquaresBuilder~target~\\[D"
"Evaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem[Evaluation"
"format",\N
"parRelativeTolerance",\N
"getCost","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem[Evaluation~getCost"
"newTarget",\N
"AbstractFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~AbstractFormat~QNumberFormat;~QNumberFormat;"
"orthoTolerance",\N
"getRMS","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LeastSquaresProblem.java[LeastSquaresProblem[Evaluation~getRMS"
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction"
"numeratorFormat",\N
"qrRankingThreshold",\N
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~Fraction~D"
"denominatorFormat",\N
"getCostRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~getCostRelativeTolerance"
"ProperFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~format~D~QStringBuffer;~QFieldPosition;"
"value",\N
"ProperFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~ProperFractionFormat"
"getInitialStepBoundFactor","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~getInitialStepBoundFactor"
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~Fraction~D~D~I"
"value",\N
"getOrthoTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~getOrthoTolerance"
"ProperFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~ProperFractionFormat~QNumberFormat;"
"buffer",\N
"value",\N
"format",\N
"position",\N
"getParameterRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~getParameterRelativeTolerance"
"epsilon",\N
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~format~J~QStringBuffer;~QFieldPosition;"
"ProperFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~ProperFractionFormat~QNumberFormat;~QNumberFormat;~QNumberFormat;"
"maxIterations",\N
"getRankingThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~getRankingThreshold"
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~Fraction~D~I"
"wholeFormat",\N
"value",\N
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~optimize~QLeastSquaresProblem;"
"buffer",\N
"numeratorFormat",\N
"value",\N
"problem",\N
"position",\N
"denominatorFormat",\N
"maxDenominator",\N
"withCostRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~withCostRelativeTolerance~D"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~format~QFraction;~QStringBuffer;~QFieldPosition;"
"getDefaultNumberFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~getDefaultNumberFormat"
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~Fraction~I"
"newCostRelativeTolerance",\N
"fraction",\N
"getDefaultNumberFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~getDefaultNumberFormat~QLocale;"
"num",\N
"toAppendTo",\N
"withInitialStepBoundFactor","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~withInitialStepBoundFactor~D"
"Fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~Fraction~I~I"
"locale",\N
"pos",\N
"newInitialStepBoundFactor",\N
"getDenominatorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~getDenominatorFormat"
"num",\N
"getWholeFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~getWholeFormat"
"withOrthoTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~withOrthoTolerance~D"
"den",\N
"getNumeratorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~getNumeratorFormat"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~parse~QString;~QParsePosition;"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~abs"
"newOrthoTolerance",\N
"parseAndIgnoreWhitespace","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~parseAndIgnoreWhitespace~QString;~QParsePosition;"
"source",\N
"withParameterRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~withParameterRelativeTolerance~D"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~add~QFraction;"
"source",\N
"pos",\N
"newParRelativeTolerance",\N
"fraction",\N
"pos",\N
"setWholeFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperFractionFormat.java[ProperFractionFormat~setWholeFormat~QNumberFormat;"
"withRankingThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~withRankingThreshold~D"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~add~I"
"parseNextCharacter","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~parseNextCharacter~QString;~QParsePosition;"
"format",\N
"newQRRankingThreshold",\N
"i",\N
"source",\N
"FractionField","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionField.java[FractionField"
"InternalData","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer[InternalData"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~compareTo~QFraction;"
"pos",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionField.java[FractionField~getInstance"
"InternalData","=mathmain3.6/src<main.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer[InternalData~InternalData~\\[\\[D~\\[I~I~\\[D~\\[D~\\[D"
"setDenominatorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~setDenominatorFormat~QNumberFormat;"
"object",\N
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionField.java[FractionField~getOne"
"weightedJacobian",\N
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~divide~QFraction;"
"format",\N
"permutation",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionField.java[FractionField~getZero"
"setNumeratorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{AbstractFormat.java[AbstractFormat~setNumeratorFormat~QNumberFormat;"
"fraction",\N
"rank",\N
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~divide~I"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionField.java[FractionField[LazyHolder"
"diagR",\N
"format",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction"
"jacNorm",\N
"ProperBigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat"
"i",\N
"beta",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~QBigInteger;"
"ProperBigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~ProperBigFractionFormat"
"doubleValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~doubleValue"
"FractionConversionException","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionConversionException.java[FractionConversionException"
"num",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~equals~QObject;"
"ProperBigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~ProperBigFractionFormat~QNumberFormat;"
"FractionConversionException","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionConversionException.java[FractionConversionException~FractionConversionException~D~I"
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~QBigInteger;~QBigInteger;"
"other",\N
"format",\N
"value",\N
"num",\N
"floatValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~floatValue"
"ProperBigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~ProperBigFractionFormat~QNumberFormat;~QNumberFormat;~QNumberFormat;"
"maxIterations",\N
"den",\N
"FractionConversionException","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionConversionException.java[FractionConversionException~FractionConversionException~D~J~J"
"wholeFormat",\N
"getDenominator","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~getDenominator"
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~D~D~I"
"numeratorFormat",\N
"value",\N
"getField","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~getField"
"value",\N
"denominatorFormat",\N
"p",\N
"epsilon",\N
"getNumerator","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~getNumerator"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~format~QBigFraction;~QStringBuffer;~QFieldPosition;"
"q",\N
"maxIterations",\N
"FractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat"
"fraction",\N
"getReducedFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~getReducedFraction~I~I"
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~D~I"
"FractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~FractionFormat"
"toAppendTo",\N
"numerator",\N
"value",\N
"pos",\N
"FractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~FractionFormat~QNumberFormat;"
"denominator",\N
"maxDenominator",\N
"getWholeFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~getWholeFormat"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~hashCode"
"format",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~I"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~parse~QString;~QParsePosition;"
"FractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~FractionFormat~QNumberFormat;~QNumberFormat;"
"intValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~intValue"
"num",\N
"source",\N
"numeratorFormat",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~I~I"
"longValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~longValue"
"pos",\N
"denominatorFormat",\N
"num",\N
"setWholeFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{ProperBigFractionFormat.java[ProperBigFractionFormat~setWholeFormat~QNumberFormat;"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~multiply~QFraction;"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~format~QFraction;~QStringBuffer;~QFieldPosition;"
"den",\N
"fraction",\N
"format",\N
"fraction",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~J"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~multiply~I"
"toAppendTo",\N
"BigFractionField","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionField.java[BigFractionField"
"num",\N
"pos",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionField.java[BigFractionField~getInstance"
"i",\N
"BigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~BigFraction~J~J"
"formatFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~formatFraction~QFraction;"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~negate"
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionField.java[BigFractionField~getOne"
"num",\N
"f",\N
"percentageValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~percentageValue"
"den",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionField.java[BigFractionField~getZero"
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getAvailableLocales"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~abs"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~reciprocal"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionField.java[BigFractionField[LazyHolder"
"getDefaultNumberFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getDefaultNumberFormat"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~add~I"
"BigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~subtract~QFraction;"
"BigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~BigFractionFormat"
"getImproperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getImproperInstance"
"i",\N
"fraction",\N
"getImproperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getImproperInstance~QLocale;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~add~J"
"BigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~BigFractionFormat~QNumberFormat;"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~subtract~I"
"locale",\N
"format",\N
"l",\N
"i",\N
"BigFractionFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~BigFractionFormat~QNumberFormat;~QNumberFormat;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~add~QBigFraction;"
"getProperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getProperInstance"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction~toString"
"numeratorFormat",\N
"fraction",\N
"getProperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~getProperInstance~QLocale;"
"FOUR_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^FOUR_FIFTHS"
"denominatorFormat",\N
"bigDecimalValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~bigDecimalValue"
"locale",\N
"MINUS_ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^MINUS_ONE"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~format~QBigFraction;~QStringBuffer;~QFieldPosition;"
"bigDecimalValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~bigDecimalValue~I"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{FractionFormat.java[FractionFormat~parse~QString;~QParsePosition;"
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ONE"
"BigFraction",\N
"roundingMode",\N
"source",\N
"toAppendTo",\N
"ONE_FIFTH","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ONE_FIFTH"
"pos",\N
"bigDecimalValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~bigDecimalValue~I~I"
"pos",\N
"ONE_HALF","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ONE_HALF"
"OrderedCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{OrderedCrossover.java[OrderedCrossover"
"scale",\N
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~format~QObject;~QStringBuffer;~QFieldPosition;"
"RandomKey","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey"
"roundingMode",\N
"ONE_QUARTER","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ONE_QUARTER"
"obj",\N
"RandomKey","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~RandomKey~QList\\<QDouble;>;"
"toAppendTo",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~compareTo~QBigFraction;"
"ONE_THIRD","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ONE_THIRD"
"pos",\N
"representation",\N
"object",\N
"formatBigFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~formatBigFraction~QBigFraction;"
"THREE_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^THREE_FIFTHS"
"RandomKey","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~RandomKey~\\[QDouble;"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~divide~QBigInteger;"
"f",\N
"representation",\N
"THREE_QUARTERS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^THREE_QUARTERS"
"bg",\N
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~getAvailableLocales"
"checkValidity","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~checkValidity~QList\\<QDouble;>;"
"TWO","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^TWO"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~divide~I"
"getImproperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~getImproperInstance"
"chromosomeRepresentation",\N
"i",\N
"TWO_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^TWO_FIFTHS"
"comparatorPermutation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~comparatorPermutation~QList\\<QS;>;~QComparator\\<QS;>;"
"getImproperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~getImproperInstance~QLocale;"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~divide~J"
"TWO_QUARTERS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^TWO_QUARTERS"
"data",\N
"locale",\N
"l",\N
"comparator",\N
"TWO_THIRDS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^TWO_THIRDS"
"getProperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~getProperInstance"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~divide~QBigFraction;"
"decode","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~decode~QList\\<QT;>;"
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{Fraction.java[Fraction^ZERO"
"getProperInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~getProperInstance~QLocale;"
"fraction",\N
"sequence",\N
"doubleValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~doubleValue"
"PermutationChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{PermutationChromosome.java[PermutationChromosome"
"locale",\N
"identityPermutation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~identityPermutation~I"
"decode","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{PermutationChromosome.java[PermutationChromosome~decode~QList\\<QT;>;"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~parse~QString;~QParsePosition;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~equals~QObject;"
"l",\N
"sequence",\N
"source",\N
"other",\N
"isSame","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~isSame~QChromosome;"
"pos",\N
"StoppingCondition","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{StoppingCondition.java[StoppingCondition"
"floatValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~floatValue"
"another",\N
"isSatisfied","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{StoppingCondition.java[StoppingCondition~isSatisfied~QPopulation;"
"parseNextBigInteger","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFractionFormat.java[BigFractionFormat~parseNextBigInteger~QString;~QParsePosition;"
"randomPermutation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~randomPermutation~I"
"getDenominator","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getDenominator"
"source",\N
"population",\N
"l",\N
"getDenominatorAsInt","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getDenominatorAsInt"
"pos",\N
"ChromosomePair","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ChromosomePair.java[ChromosomePair"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKey.java[RandomKey~toString"
"ChromosomePair","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ChromosomePair.java[ChromosomePair~ChromosomePair~QChromosome;~QChromosome;"
"AbstractListChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome"
"getDenominatorAsLong","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getDenominatorAsLong"
"AbstractListChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~AbstractListChromosome~QList\\<QT;>;"
"CycleCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{CycleCrossover.java[CycleCrossover"
"c1",\N
"getField","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getField"
"CycleCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{CycleCrossover.java[CycleCrossover~CycleCrossover"
"representation",\N
"c2",\N
"getNumerator","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getNumerator"
"getFirst","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ChromosomePair.java[ChromosomePair~getFirst"
"AbstractListChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~AbstractListChromosome~\\[QT;"
"CycleCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{CycleCrossover.java[CycleCrossover~CycleCrossover~Z"
"getNumeratorAsInt","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getNumeratorAsInt"
"representation",\N
"getSecond","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ChromosomePair.java[ChromosomePair~getSecond"
"randomStart",\N
"AbstractListChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~AbstractListChromosome~QList\\<QT;>;~Z"
"getNumeratorAsLong","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getNumeratorAsLong"
"isRandomStart","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{CycleCrossover.java[CycleCrossover~isRandomStart"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ChromosomePair.java[ChromosomePair~toString"
"representation",\N
"getReducedFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~getReducedFraction~I~I"
"TournamentSelection","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{TournamentSelection.java[TournamentSelection"
"OnePointCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{OnePointCrossover.java[OnePointCrossover"
"copyList",\N
"TournamentSelection","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{TournamentSelection.java[TournamentSelection~TournamentSelection~I"
"numerator",\N
"MutationPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{MutationPolicy.java[MutationPolicy"
"checkValidity","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~checkValidity~QList\\<QT;>;"
"denominator",\N
"arity",\N
"Population","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Population.java[Population"
"chromosomeRepresentation",\N
"getArity","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{TournamentSelection.java[TournamentSelection~getArity"
"getFittestChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Population.java[Population~getFittestChromosome"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~hashCode"
"getLength","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~getLength"
"getPopulationLimit","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Population.java[Population~getPopulationLimit"
"setArity","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{TournamentSelection.java[TournamentSelection~setArity~I"
"intValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~intValue"
"getRepresentation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~getRepresentation"
"arity",\N
"getPopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Population.java[Population~getPopulationSize"
"longValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~longValue"
"newFixedLengthChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~newFixedLengthChromosome~QList\\<QT;>;"
"RandomKeyMutation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{RandomKeyMutation.java[RandomKeyMutation"
"nextGeneration","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Population.java[Population~nextGeneration"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~multiply~QBigInteger;"
"SelectionPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{SelectionPolicy.java[SelectionPolicy"
"chromosomeRepresentation",\N
"bg",\N
"Fitness","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Fitness.java[Fitness"
"FixedElapsedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{FixedElapsedTime.java[FixedElapsedTime"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{AbstractListChromosome.java[AbstractListChromosome~toString"
"isSatisfied","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{FixedElapsedTime.java[FixedElapsedTime~isSatisfied~QPopulation;"
"fitness","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Fitness.java[Fitness~fitness"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~multiply~I"
"NPointCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{NPointCrossover.java[NPointCrossover"
"population",\N
"i",\N
"InvalidRepresentationException","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{InvalidRepresentationException.java[InvalidRepresentationException"
"getCrossoverPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{NPointCrossover.java[NPointCrossover~getCrossoverPoints"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~multiply~J"
"BinaryChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome"
"FixedGenerationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{FixedGenerationCount.java[FixedGenerationCount"
"ElitisticListPopulation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ElitisticListPopulation.java[ElitisticListPopulation"
"getNumGenerations","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{FixedGenerationCount.java[FixedGenerationCount~getNumGenerations"
"BinaryChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome~BinaryChromosome~QList\\<QInteger;>;"
"l",\N
"getElitismRate","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ElitisticListPopulation.java[ElitisticListPopulation~getElitismRate"
"representation",\N
"isSatisfied","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{FixedGenerationCount.java[FixedGenerationCount~isSatisfied~QPopulation;"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~multiply~QBigFraction;"
"nextGeneration","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ElitisticListPopulation.java[ElitisticListPopulation~nextGeneration"
"BinaryChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome~BinaryChromosome~\\[QInteger;"
"fraction",\N
"population",\N
"Chromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome"
"representation",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~negate"
"GeneticAlgorithm","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome~compareTo~QChromosome;"
"evolve","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~evolve~QPopulation;~QStoppingCondition;"
"checkValidity","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome~checkValidity~QList\\<QInteger;>;"
"another",\N
"percentageValue","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~percentageValue"
"initial",\N
"chromosomeRepresentation",\N
"findSameChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome~findSameChromosome~QPopulation;"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~pow~I"
"condition",\N
"isSame","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome~isSame~QChromosome;"
"population",\N
"getCrossoverPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getCrossoverPolicy"
"exponent",\N
"another",\N
"getFitness","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome~getFitness"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~pow~J"
"getCrossoverRate","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getCrossoverRate"
"randomBinaryRepresentation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryChromosome.java[BinaryChromosome~randomBinaryRepresentation~I"
"isSame","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome~isSame~QChromosome;"
"exponent",\N
"getGenerationsEvolved","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getGenerationsEvolved"
"length",\N
"another",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~pow~QBigInteger;"
"BinaryMutation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{BinaryMutation.java[BinaryMutation"
"getMutationPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getMutationPolicy"
"searchForFitnessUpdate","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{Chromosome.java[Chromosome~searchForFitnessUpdate~QPopulation;"
"exponent",\N
"CrossoverPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{CrossoverPolicy.java[CrossoverPolicy"
"getMutationRate","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getMutationRate"
"population",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~pow~D"
"ListPopulation","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation"
"getChromosomeList","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~getChromosomeList"
"getSelectionPolicy","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~getSelectionPolicy"
"UniformCrossover","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{UniformCrossover.java[UniformCrossover"
"exponent",\N
"getRatio","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{UniformCrossover.java[UniformCrossover~getRatio"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~reciprocal"
"getChromosomes","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~getChromosomes"
"nextGeneration","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{GeneticAlgorithm.java[GeneticAlgorithm~nextGeneration~QPopulation;"
"reduce","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~reduce"
"Vector","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector"
"current",\N
"getFittestChromosome","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~getFittestChromosome"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~add~QVector\\<QS;>;"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~subtract~QBigInteger;"
"Point","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Point.java[Point"
"getPopulationLimit","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~getPopulationLimit"
"v",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Point.java[Point~distance~QPoint\\<QS;>;"
"bg",\N
"getPopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~getPopulationSize"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~add~D~QVector\\<QS;>;"
"p",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~subtract~I"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~iterator"
"factor",\N
"getSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Point.java[Point~getSpace"
"i",\N
"v",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.genetics{ListPopulation.java[ListPopulation~toString"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Point.java[Point~isNaN"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~subtract~J"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~distance~QVector\\<QS;>;"
"Space","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Space.java[Space"
"l",\N
"VectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat"
"v",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Space.java[Space~getDimension"
"VectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~VectorFormat"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~subtract~QBigFraction;"
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~distance1~QVector\\<QS;>;"
"fraction",\N
"VectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~VectorFormat~QNumberFormat;"
"EnclosingBall","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall"
"v",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction~toString"
"EnclosingBall","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~EnclosingBall~QP;~D~\\[QP;"
"format",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~distanceInf~QVector\\<QS;>;"
"center",\N
"FOUR_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^FOUR_FIFTHS"
"VectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~VectorFormat~QString;~QString;~QString;"
"radius",\N
"v",\N
"MINUS_ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^MINUS_ONE"
"prefix",\N
"support",\N
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~distanceSq~QVector\\<QS;>;"
"suffix",\N
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ONE"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~contains~QP;"
"separator",\N
"v",\N
"ONE_FIFTH","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ONE_FIFTH"
"point",\N
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~dotProduct~QVector\\<QS;>;"
"VectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~VectorFormat~QString;~QString;~QString;~QNumberFormat;"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~contains~QP;~D"
"ONE_HALF","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ONE_HALF"
"prefix",\N
"v",\N
"suffix",\N
"point",\N
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~getNorm"
"ONE_QUARTER","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ONE_QUARTER"
"margin",\N
"separator",\N
"getNorm1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~getNorm1"
"ONE_THIRD","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ONE_THIRD"
"format",\N
"getCenter","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~getCenter"
"getNormInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~getNormInf"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~format~QVector\\<QS;>;"
"THREE_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^THREE_FIFTHS"
"getRadius","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~getRadius"
"vector",\N
"getNormSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~getNormSq"
"THREE_QUARTERS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^THREE_QUARTERS"
"getSupport","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~getSupport"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~format~QVector\\<QS;>;~QStringBuffer;~QFieldPosition;"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~getZero"
"TWO","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^TWO"
"getSupportSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{EnclosingBall.java[EnclosingBall~getSupportSize"
"vector",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~isInfinite"
"TWO_FIFTHS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^TWO_FIFTHS"
"toAppendTo",\N
"WelzlEncloser","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser.java[WelzlEncloser"
"pos",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~negate"
"TWO_QUARTERS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^TWO_QUARTERS"
"WelzlEncloser","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser.java[WelzlEncloser~WelzlEncloser~D~QSupportBallGenerator\\<QS;QP;>;"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~format~QStringBuffer;~QFieldPosition;~\\[D"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~scalarMultiply~D"
"tolerance",\N
"TWO_THIRDS","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^TWO_THIRDS"
"toAppendTo",\N
"generator",\N
"a",\N
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.fraction{BigFraction.java[BigFraction^ZERO"
"pos",\N
"enclose","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser.java[WelzlEncloser~enclose~QIterable\\<QP;>;"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~subtract~QVector\\<QS;>;"
"coordinates",\N
"Encloser","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{Encloser.java[Encloser"
"points",\N
"v",\N
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~getAvailableLocales"
"enclose","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{Encloser.java[Encloser~enclose~QIterable\\<QP;>;"
"selectFarthest","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser.java[WelzlEncloser~selectFarthest~QIterable\\<QP;>;~QEnclosingBall\\<QS;QP;>;"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~subtract~D~QVector\\<QS;>;"
"getFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~getFormat"
"points",\N
"points",\N
"factor",\N
"SupportBallGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{SupportBallGenerator.java[SupportBallGenerator"
"getPrefix","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~getPrefix"
"ball",\N
"v",\N
"ballOnSupport","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.enclosing{SupportBallGenerator.java[SupportBallGenerator~ballOnSupport~QList\\<QP;>;"
"OrientedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{Vector.java[Vector~toString~QNumberFormat;"
"getSeparator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~getSeparator"
"support",\N
"OrientedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~OrientedPoint~QVector1D;~Z~D"
"format",\N
"getSuffix","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~getSuffix"
"Vector1DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat"
"location",\N
"Euclidean1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D"
"Vector1DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~Vector1DFormat"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~parse~QString;~QParsePosition;"
"direct",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D~getDimension"
"tolerance",\N
"source",\N
"Vector1DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~Vector1DFormat~QNumberFormat;"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D~getInstance"
"OrientedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~OrientedPoint~QVector1D;~Z"
"pos",\N
"format",\N
"parseCoordinates","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat~parseCoordinates~I~QString;~QParsePosition;"
"location",\N
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D[LazyHolder"
"Vector1DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~Vector1DFormat~QString;~QString;"
"direct",\N
"NoSubSpaceException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D[NoSubSpaceException"
"dimension",\N
"prefix",\N
"NoSubSpaceException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1D.java[Euclidean1D[NoSubSpaceException~NoSubSpaceException"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~copySelf"
"source",\N
"suffix",\N
"pos",\N
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~getLocation"
"Vector1DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~Vector1DFormat~QString;~QString;~QNumberFormat;"
"IntervalsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet"
"DEFAULT_PREFIX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat^DEFAULT_PREFIX"
"IntervalsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~IntervalsSet~D"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~getTolerance"
"prefix",\N
"DEFAULT_SEPARATOR","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat^DEFAULT_SEPARATOR"
"tolerance",\N
"suffix",\N
"isDirect","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~isDirect"
"format",\N
"DEFAULT_SUFFIX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry{VectorFormat.java[VectorFormat^DEFAULT_SUFFIX"
"IntervalsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~IntervalsSet~D~D~D"
"revertSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~revertSelf"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~getInstance"
"lower",\N
"SubOrientedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{SubOrientedPoint.java[SubOrientedPoint"
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~wholeHyperplane"
"upper",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{SubOrientedPoint.java[SubOrientedPoint~getSize"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~getInstance~QLocale;"
"tolerance",\N
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{OrientedPoint.java[OrientedPoint~wholeSpace"
"locale",\N
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{SubOrientedPoint.java[SubOrientedPoint~isEmpty"
"IntervalsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~IntervalsSet"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormat.java[Vector1DFormat~parse~QString;~QParsePosition;"
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D"
"Interval","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval"
"IntervalsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~IntervalsSet~D~D"
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~Vector1D~D"
"source",\N
"Interval","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~Interval~D~D"
"pos",\N
"lower",\N
"x",\N
"lower",\N
"upper",\N
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D"
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~Vector1D~D~QVector1D;"
"upper",\N
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~D~D"
"asList","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~asList"
"getBarycenter","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getBarycenter"
"a",\N
"x",\N
"computeGeometricalProperties","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~computeGeometricalProperties"
"u",\N
"getInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getInf"
"y",\N
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~Vector1D~D~QVector1D;~D~QVector1D;"
"getInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~getInf"
"z",\N
"getLength","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getLength"
"a1",\N
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~D"
"getSup","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~getSup"
"getLower","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getLower"
"u1",\N
"alpha",\N
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet~iterator"
"a2",\N
"getMidPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getMidPoint"
"delta",\N
"u2",\N
"SubIntervalsIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet[SubIntervalsIterator"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getSize"
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~QVector3D;"
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~Vector1D~D~QVector1D;~D~QVector1D;~D~QVector1D;"
"SubIntervalsIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet[SubIntervalsIterator~SubIntervalsIterator"
"a",\N
"getSup","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getSup"
"a1",\N
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet[SubIntervalsIterator~hasNext"
"u",\N
"u1",\N
"getUpper","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Interval.java[Interval~getUpper"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet[SubIntervalsIterator~next"
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~QVector3D;~D~QVector3D;"
"a2",\N
"u2",\N
"a1",\N
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSet.java[IntervalsSet[SubIntervalsIterator~remove"
"FieldRotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation"
"a3",\N
"u1",\N
"FieldRotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~FieldRotation~QT;~QT;~QT;~QT;~Z"
"SphereGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGenerator.java[SphereGenerator"
"u3",\N
"a2",\N
"q0",\N
"Vector1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~Vector1D~D~QVector1D;~D~QVector1D;~D~QVector1D;~D~QVector1D;"
"SphericalCoordinates","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates"
"u2",\N
"q1",\N
"SphericalCoordinates","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~SphericalCoordinates~QVector3D;"
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~QVector3D;~D~QVector3D;~D~QVector3D;"
"q2",\N
"a1",\N
"v",\N
"a1",\N
"q3",\N
"u1",\N
"SphericalCoordinates","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~SphericalCoordinates~D~D~D"
"needsNormalization",\N
"a2",\N
"u1",\N
"r",\N
"a2",\N
"u2",\N
"FieldRotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~FieldRotation~\\[\\[QT;~D"
"theta",\N
"u2",\N
"a3",\N
"phi",\N
"m",\N
"a3",\N
"u3",\N
"getCartesian","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~getCartesian"
"threshold",\N
"a4",\N
"u3",\N
"FieldRotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~FieldRotation~QRotationOrder;~QT;~QT;~QT;"
"getPhi","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~getPhi"
"u4",\N
"Vector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~Vector3D~D~QVector3D;~D~QVector3D;~D~QVector3D;~D~QVector3D;"
"order",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~distance~QVector1D;~QVector1D;"
"getR","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~getR"
"a1",\N
"alpha1",\N
"p1",\N
"u1",\N
"getTheta","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~getTheta"
"alpha2",\N
"p2",\N
"a2",\N
"alpha3",\N
"toCartesianGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~toCartesianGradient~\\[D"
"u2",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~distanceInf~QVector1D;~QVector1D;"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QFieldVector3D\\<QT;>;"
"a3",\N
"sGradient",\N
"p1",\N
"u3",\N
"u",\N
"toCartesianHessian","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates~toCartesianHessian~\\[\\[D~\\[D"
"p2",\N
"a4",\N
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QVector3D;"
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~distanceSq~QVector1D;~QVector1D;"
"sHessian",\N
"u4",\N
"u",\N
"sGradient",\N
"p1",\N
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~crossProduct~QVector3D;~QVector3D;"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~\\[QT;~\\[QT;"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates[DataTransferObject"
"p2",\N
"v1",\N
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinates.java[SphericalCoordinates[DataTransferObject~DataTransferObject~D~D~D"
"in",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~equals~QObject;"
"v2",\N
"out",\N
"x",\N
"other",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~distance~QVector3D;~QVector3D;"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~\\[D~\\[QT;"
"y",\N
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getNorm"
"v1",\N
"z",\N
"in",\N
"v2",\N
"getNorm1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getNorm1"
"OutlineExtractor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{OutlineExtractor.java[OutlineExtractor"
"out",\N
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~distance1~QVector3D;~QVector3D;"
"OutlineExtractor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{OutlineExtractor.java[OutlineExtractor~OutlineExtractor~QVector3D;~QVector3D;"
"getNormInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getNormInf"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QRotation;~QFieldVector3D\\<QT;>;"
"v1",\N
"u",\N
"r",\N
"getNormSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getNormSq"
"v2",\N
"v",\N
"u",\N
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getX"
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~distanceInf~QVector3D;~QVector3D;"
"BoundaryProjector","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{OutlineExtractor.java[OutlineExtractor[BoundaryProjector"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QFieldRotation\\<QT;>;"
"BoundaryProjector","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{OutlineExtractor.java[OutlineExtractor[BoundaryProjector~BoundaryProjector~D"
"v1",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~getZero"
"r",\N
"v2",\N
"tolerance",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~hashCode"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QRotation;"
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~distanceSq~QVector3D;~QVector3D;"
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet"
"r",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~isInfinite"
"v1",\N
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~PolyhedronsSet~D"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyInverseTo~QRotation;~QFieldRotation\\<QT;>;"
"v2",\N
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~isNaN"
"tolerance",\N
"rOuter",\N
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~dotProduct~QVector3D;~QVector3D;"
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~PolyhedronsSet~QList\\<QVector3D;>;~QList\\<\\[I>;~D"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~negate"
"rInner",\N
"v1",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QFieldVector3D\\<QT;>;"
"vertices",\N
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~scalarMultiply~D"
"v2",\N
"facets",\N
"u",\N
"a",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~equals~QObject;"
"tolerance",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QVector3D;"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~toString"
"other",\N
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~PolyhedronsSet~D~D~D~D~D~D~D"
"u",\N
"getAlpha","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getAlpha"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D~toString~QNumberFormat;"
"xMin",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~\\[QT;~\\[QT;"
"format",\N
"xMax",\N
"getDelta","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getDelta"
"in",\N
"yMin",\N
"NEGATIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D^NEGATIVE_INFINITY"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getNorm"
"out",\N
"yMax",\N
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D^NaN"
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~\\[D~\\[QT;"
"zMin",\N
"getNorm1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getNorm1"
"zMax",\N
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D^ONE"
"in",\N
"getNormInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getNormInf"
"tolerance",\N
"out",\N
"POSITIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D^POSITIVE_INFINITY"
"getNormSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getNormSq"
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~PolyhedronsSet"
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QRotation;~QFieldVector3D\\<QT;>;"
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1D.java[Vector1D^ZERO"
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getX"
"PolyhedronsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~PolyhedronsSet~D~D~D~D~D~D"
"r",\N
"u",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line"
"xMin",\N
"getY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getY"
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QFieldRotation\\<QT;>;"
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~Line~QLine;"
"xMax",\N
"getZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getZ"
"yMin",\N
"r",\N
"line",\N
"yMax",\N
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~getZero"
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QRotation;"
"closestPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~closestPoint~QLine;"
"zMin",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~hashCode"
"r",\N
"line",\N
"zMax",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~applyTo~QRotation;~QFieldRotation\\<QT;>;"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~contains~QVector3D;"
"computeGeometricalProperties","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~computeGeometricalProperties"
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~isInfinite"
"p",\N
"r1",\N
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~isNaN"
"rotate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~rotate~QVector3D;~QRotation;"
"rInner",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~distance~QVector3D;"
"center",\N
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~negate"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~distance~QFieldRotation\\<QT;>;~QFieldRotation\\<QT;>;"
"p",\N
"rotation",\N
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~scalarMultiply~D"
"r1",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~distance~QLine;"
"translate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet~translate~QVector3D;"
"r2",\N
"a",\N
"line",\N
"translation",\N
"getAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getAngle"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~toArray"
"getAbscissa","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~getAbscissa~QVector3D;"
"FacetsContributionVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[FacetsContributionVisitor"
"getAngles","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getAngles~QRotationOrder;"
"FacetsContributionVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[FacetsContributionVisitor~FacetsContributionVisitor"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~toString"
"point",\N
"order",\N
"getDirection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~getDirection"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D~toString~QNumberFormat;"
"RotationTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[RotationTransform"
"getAxis","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getAxis"
"RotationTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[RotationTransform~RotationTransform~QVector3D;~QRotation;"
"getOrigin","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~getOrigin"
"format",\N
"getMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getMatrix"
"center",\N
"MINUS_I","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^MINUS_I"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~getTolerance"
"rotation",\N
"getQ0","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getQ0"
"MINUS_J","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^MINUS_J"
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~intersection~QLine;"
"TranslationTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[TranslationTransform"
"getQ1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getQ1"
"MINUS_K","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^MINUS_K"
"TranslationTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSet.java[PolyhedronsSet[TranslationTransform~TranslationTransform~QVector3D;"
"line",\N
"getQ2","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getQ2"
"isSimilarTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~isSimilarTo~QLine;"
"translation",\N
"NEGATIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^NEGATIVE_INFINITY"
"line",\N
"NotARotationMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{NotARotationMatrixException.java[NotARotationMatrixException"
"getQ3","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~getQ3"
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^NaN"
"pointAt","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~pointAt~D"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D"
"revert","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~revert"
"PLUS_I","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^PLUS_I"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QT;~QT;"
"abscissa",\N
"toRotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotation.java[FieldRotation~toRotation"
"PLUS_J","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^PLUS_J"
"revert","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~revert"
"x",\N
"y",\N
"PLUS_K","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^PLUS_K"
"RotationOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder"
"wholeLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Line.java[Line~wholeLine"
"z",\N
"getA1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder~getA1"
"POSITIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^POSITIVE_INFINITY"
"CardanEulerSingularityException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{CardanEulerSingularityException.java[CardanEulerSingularityException"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QT;"
"getA2","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder~getA2"
"CardanEulerSingularityException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{CardanEulerSingularityException.java[CardanEulerSingularityException~CardanEulerSingularityException~Z"
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3D.java[Vector3D^ZERO"
"alpha",\N
"isCardan",\N
"getA3","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder~getA3"
"Euclidean3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3D.java[Euclidean3D"
"delta",\N
"SubPlane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SubPlane.java[SubPlane"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3D.java[Euclidean3D~getDimension"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QFieldVector3D\\<QT;>;"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder~toString"
"Rotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation"
"a",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3D.java[Euclidean3D~getInstance"
"XYX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^XYX"
"Rotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~Rotation~D~D~D~D~Z"
"u",\N
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3D.java[Euclidean3D[LazyHolder"
"XYZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^XYZ"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QVector3D;"
"q0",\N
"Plane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane"
"q1",\N
"XZX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^XZX"
"a",\N
"Plane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~Plane~QPlane;"
"q2",\N
"u",\N
"XZY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^XZY"
"plane",\N
"q3",\N
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~D~QFieldVector3D\\<QT;>;"
"needsNormalization",\N
"YXY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^YXY"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~contains~QVector3D;"
"a",\N
"Rotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~Rotation~\\[\\[D~D"
"p",\N
"YXZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^YXZ"
"u",\N
"m",\N
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~copySelf"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;"
"YZX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^YZX"
"threshold",\N
"getNormal","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getNormal"
"a1",\N
"YZY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^YZY"
"Rotation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~Rotation~QRotationOrder;~D~D~D"
"u1",\N
"getOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getOffset~QPlane;"
"order",\N
"ZXY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^ZXY"
"a2",\N
"plane",\N
"alpha1",\N
"u2",\N
"ZXZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^ZXZ"
"alpha2",\N
"getOrigin","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getOrigin"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QVector3D;~QT;~QVector3D;"
"alpha3",\N
"ZYX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^ZYX"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getTolerance"
"a1",\N
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyInverseTo~QVector3D;"
"ZYZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrder.java[RotationOrder^ZYZ"
"u1",\N
"getU","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getU"
"u",\N
"a2",\N
"Vector3DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat"
"getV","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~getV"
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyInverseTo~\\[D~\\[D"
"u2",\N
"Vector3DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~Vector3DFormat"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;"
"in",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~intersection~QLine;"
"Vector3DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~Vector3DFormat~QNumberFormat;"
"out",\N
"a1",\N
"line",\N
"applyInverseTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyInverseTo~QRotation;"
"u1",\N
"format",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~intersection~QPlane;"
"a2",\N
"Vector3DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~Vector3DFormat~QString;~QString;~QString;"
"r",\N
"other",\N
"u2",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyTo~QVector3D;"
"prefix",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~intersection~QPlane;~QPlane;~QPlane;"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;"
"suffix",\N
"u",\N
"plane1",\N
"a1",\N
"separator",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyTo~\\[D~\\[D"
"plane2",\N
"u1",\N
"Vector3DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~Vector3DFormat~QString;~QString;~QString;~QNumberFormat;"
"plane3",\N
"in",\N
"a2",\N
"prefix",\N
"out",\N
"isSimilarTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~isSimilarTo~QPlane;"
"u2",\N
"suffix",\N
"applyTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~applyTo~QRotation;"
"a3",\N
"plane",\N
"separator",\N
"u3",\N
"r",\N
"reset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~reset~QPlane;"
"format",\N
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QVector3D;~QT;~QVector3D;~QT;~QVector3D;"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~distance~QRotation;~QRotation;"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~getInstance"
"original",\N
"a1",\N
"r1",\N
"revertSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~revertSelf"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~getInstance~QLocale;"
"u1",\N
"r2",\N
"rotate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~rotate~QVector3D;~QRotation;"
"locale",\N
"a2",\N
"getAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getAngle"
"u2",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormat.java[Vector3DFormat~parse~QString;~QParsePosition;"
"center",\N
"getAngles","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getAngles~QRotationOrder;"
"a3",\N
"rotation",\N
"source",\N
"u3",\N
"order",\N
"translate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~translate~QVector3D;"
"pos",\N
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;"
"getAxis","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getAxis"
"Segment","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Segment.java[Segment"
"translation",\N
"a1",\N
"Segment","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Segment.java[Segment~Segment~QVector3D;~QVector3D;~QLine;"
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~wholeHyperplane"
"getMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getMatrix"
"u1",\N
"start",\N
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Plane.java[Plane~wholeSpace"
"getQ0","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getQ0"
"a2",\N
"end",\N
"u2",\N
"getQ1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getQ1"
"line",\N
"SubLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SubLine.java[SubLine"
"a3",\N
"getSegments","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SubLine.java[SubLine~getSegments"
"getEnd","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Segment.java[Segment~getEnd"
"getQ2","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getQ2"
"u3",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{SubLine.java[SubLine~intersection~QSubLine;~Z"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;~QT;~QFieldVector3D\\<QT;>;"
"getLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Segment.java[Segment~getLine"
"getQ3","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~getQ3"
"a1",\N
"subLine",\N
"getStart","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Segment.java[Segment~getStart"
"revert","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation~revert"
"u1",\N
"includeEndPoints",\N
"IDENTITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{Rotation.java[Rotation^IDENTITY"
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet"
"a2",\N
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D"
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~PolygonsSet~D"
"u2",\N
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~Vector2D~D~D"
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line"
"a3",\N
"tolerance",\N
"x",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~Line~QVector2D;~QVector2D;~D"
"u3",\N
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~PolygonsSet~D~D~D~D~D"
"y",\N
"p1",\N
"a4",\N
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~Vector2D~D~QVector2D;"
"xMin",\N
"u4",\N
"p2",\N
"xMax",\N
"tolerance",\N
"a",\N
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~QT;~QVector3D;~QT;~QVector3D;~QT;~QVector3D;~QT;~QVector3D;"
"yMin",\N
"u",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~Line~QVector2D;~D~D"
"a1",\N
"yMax",\N
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~Vector2D~D~QVector2D;~D~QVector2D;"
"p",\N
"u1",\N
"tolerance",\N
"a1",\N
"angle",\N
"a2",\N
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~PolygonsSet~D~\\[QVector2D;"
"tolerance",\N
"u1",\N
"u2",\N
"hyperplaneThickness",\N
"a2",\N
"a3",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~Line~QVector2D;~QVector2D;"
"vertices",\N
"u2",\N
"u3",\N
"p1",\N
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~PolygonsSet"
"a4",\N
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~Vector2D~D~QVector2D;~D~QVector2D;~D~QVector2D;"
"p2",\N
"u4",\N
"PolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~PolygonsSet~D~D~D~D"
"a1",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~Line~QVector2D;~D"
"FieldVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~FieldVector3D~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;~D~QFieldVector3D\\<QT;>;"
"u1",\N
"xMin",\N
"p",\N
"a2",\N
"a1",\N
"xMax",\N
"angle",\N
"u1",\N
"u2",\N
"yMin",\N
"Line","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~Line~QLine;"
"a2",\N
"a3",\N
"yMax",\N
"line",\N
"u2",\N
"u3",\N
"computeGeometricalProperties","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~computeGeometricalProperties"
"a3",\N
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~contains~QVector2D;"
"Vector2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~Vector2D~D~QVector2D;~D~QVector2D;~D~QVector2D;~D~QVector2D;"
"getVertices","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet~getVertices"
"u3",\N
"a1",\N
"p",\N
"a4",\N
"Vertex","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex"
"u1",\N
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~copySelf"
"u4",\N
"Vertex","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~Vertex~QVector2D;"
"a2",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~QFieldVector3D\\<QT;>;"
"location",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~distance~QVector2D;"
"u2",\N
"v",\N
"a3",\N
"bindWith","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~bindWith~QLine;"
"p",\N
"u3",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~QVector3D;"
"line",\N
"getAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~getAngle"
"a4",\N
"getIncoming","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~getIncoming"
"v",\N
"u4",\N
"getOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~getOffset~QLine;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~QT;~QFieldVector3D\\<QT;>;"
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~getLocation"
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~crossProduct~QVector2D;~QVector2D;"
"line",\N
"factor",\N
"getOutgoing","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~getOutgoing"
"p1",\N
"getOriginOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~getOriginOffset"
"v",\N
"p2",\N
"setIncoming","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~setIncoming~QEdge;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~QT;~QVector3D;"
"getReverse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~getReverse"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~distance~QVector2D;~QVector2D;"
"incoming",\N
"factor",\N
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~getTolerance"
"p1",\N
"setOutgoing","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~setOutgoing~QEdge;"
"v",\N
"p2",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~intersection~QLine;"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~D~QFieldVector3D\\<QT;>;"
"outgoing",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~distanceInf~QVector2D;~QVector2D;"
"other",\N
"sharedLineWith","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Vertex~sharedLineWith~QVertex;"
"factor",\N
"p1",\N
"isParallelTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~isParallelTo~QLine;"
"v",\N
"vertex",\N
"p2",\N
"line",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~add~D~QVector3D;"
"Edge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge"
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~distanceSq~QVector2D;~QVector2D;"
"reset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~reset~QVector2D;~QVector2D;"
"Edge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge~Edge~QVertex;~QVertex;~QLine;"
"factor",\N
"p1",\N
"v",\N
"p1",\N
"start",\N
"p2",\N
"p2",\N
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~crossProduct~QFieldVector3D\\<QT;>;"
"end",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~equals~QObject;"
"reset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~reset~QVector2D;~D"
"line",\N
"v",\N
"other",\N
"getEnd","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge~getEnd"
"p",\N
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~crossProduct~QVector3D;"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getNorm"
"alpha",\N
"getLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge~getLine"
"v",\N
"getNorm1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getNorm1"
"revertSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~revertSelf"
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~crossProduct~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"getStart","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge~getStart"
"getNormInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getNormInf"
"setAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~setAngle~D"
"v1",\N
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[Edge~split~QLine;"
"v2",\N
"angle",\N
"getNormSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getNormSq"
"splitLine",\N
"setOriginOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~setOriginOffset~D"
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~crossProduct~QFieldVector3D\\<QT;>;~QVector3D;"
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getX"
"ConnectableSegment","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment"
"v1",\N
"offset",\N
"getNext","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~getNext"
"getY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getY"
"v2",\N
"translateToPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~translateToPoint~QVector2D;"
"getPrevious","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~getPrevious"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~getZero"
"crossProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~crossProduct~QVector3D;~QFieldVector3D\\<QT;>;"
"p",\N
"isProcessed","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~isProcessed"
"v1",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~hashCode"
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~wholeHyperplane"
"v2",\N
"setNext","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~setNext~QConnectableSegment;"
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~isInfinite"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance~QFieldVector3D\\<QT;>;"
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line~wholeSpace"
"next",\N
"v",\N
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~isNaN"
"LineTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Line.java[Line[LineTransform"
"setPrevious","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~setPrevious~QConnectableSegment;"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance~QVector3D;"
"Euclidean2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2D.java[Euclidean2D"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~negate"
"previous",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2D.java[Euclidean2D~getDimension"
"v",\N
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~scalarMultiply~D"
"setProcessed","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[ConnectableSegment~setProcessed~Z"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2D.java[Euclidean2D~getInstance"
"a",\N
"processed",\N
"v1",\N
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2D.java[Euclidean2D[LazyHolder"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~toArray"
"SegmentsBuilder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[SegmentsBuilder"
"v2",\N
"DiskGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGenerator.java[DiskGenerator"
"SegmentsBuilder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[SegmentsBuilder~SegmentsBuilder~D"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~toString"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance~QFieldVector3D\\<QT;>;~QVector3D;"
"NestedLoops","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{NestedLoops.java[NestedLoops"
"tolerance",\N
"v1",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D~toString~QNumberFormat;"
"NestedLoops","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{NestedLoops.java[NestedLoops~NestedLoops~D"
"getSegments","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSet.java[PolygonsSet[SegmentsBuilder~getSegments"
"v2",\N
"format",\N
"tolerance",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance~QVector3D;~QFieldVector3D\\<QT;>;"
"Segment","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment"
"NEGATIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D^NEGATIVE_INFINITY"
"correctOrientation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{NestedLoops.java[NestedLoops~correctOrientation"
"Segment","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment~Segment~QVector2D;~QVector2D;~QLine;"
"v1",\N
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D^NaN"
"v2",\N
"SubLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine"
"start",\N
"POSITIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D^POSITIVE_INFINITY"
"SubLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine~SubLine~QVector2D;~QVector2D;~D"
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance1~QFieldVector3D\\<QT;>;"
"end",\N
"line",\N
"start",\N
"v",\N
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2D.java[Vector2D^ZERO"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment~distance~QVector2D;"
"end",\N
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance1~QVector3D;"
"Vector2DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat"
"tolerance",\N
"p",\N
"v",\N
"Vector2DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~Vector2DFormat"
"SubLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine~SubLine~QVector2D;~QVector2D;"
"getEnd","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment~getEnd"
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance1~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"Vector2DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~Vector2DFormat~QNumberFormat;"
"start",\N
"getLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment~getLine"
"v1",\N
"format",\N
"end",\N
"v2",\N
"getStart","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Segment.java[Segment~getStart"
"SubLine","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine~SubLine~QSegment;"
"Vector2DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~Vector2DFormat~QString;~QString;~QString;"
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance1~QFieldVector3D\\<QT;>;~QVector3D;"
"MonotoneChain","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChain.java[MonotoneChain"
"prefix",\N
"segment",\N
"v1",\N
"MonotoneChain","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChain.java[MonotoneChain~MonotoneChain"
"suffix",\N
"getSegments","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine~getSegments"
"v2",\N
"separator",\N
"MonotoneChain","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChain.java[MonotoneChain~MonotoneChain~Z"
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{SubLine.java[SubLine~intersection~QSubLine;~Z"
"distance1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distance1~QVector3D;~QFieldVector3D\\<QT;>;"
"Vector2DFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~Vector2DFormat~QString;~QString;~QString;~QNumberFormat;"
"includeCollinearPoints",\N
"v1",\N
"subLine",\N
"prefix",\N
"MonotoneChain","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChain.java[MonotoneChain~MonotoneChain~Z~D"
"includeEndPoints",\N
"v2",\N
"suffix",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceInf~QFieldVector3D\\<QT;>;"
"AbstractConvexHullGenerator2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AbstractConvexHullGenerator2D.java[AbstractConvexHullGenerator2D"
"includeCollinearPoints",\N
"separator",\N
"AbstractConvexHullGenerator2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AbstractConvexHullGenerator2D.java[AbstractConvexHullGenerator2D~AbstractConvexHullGenerator2D~Z"
"tolerance",\N
"format",\N
"v",\N
"AklToussaintHeuristic","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AklToussaintHeuristic.java[AklToussaintHeuristic"
"includeCollinearPoints",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceInf~QVector3D;"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~getInstance"
"ConvexHullGenerator2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2D.java[ConvexHullGenerator2D"
"AbstractConvexHullGenerator2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AbstractConvexHullGenerator2D.java[AbstractConvexHullGenerator2D~AbstractConvexHullGenerator2D~Z~D"
"v",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~getInstance~QLocale;"
"ConvexHull2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHull2D.java[ConvexHull2D"
"includeCollinearPoints",\N
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceInf~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"ConvexHullGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.hull{ConvexHullGenerator.java[ConvexHullGenerator"
"locale",\N
"tolerance",\N
"v1",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormat.java[Vector2DFormat~parse~QString;~QParsePosition;"
"ConvexHull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.hull{ConvexHull.java[ConvexHull"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AbstractConvexHullGenerator2D.java[AbstractConvexHullGenerator2D~getTolerance"
"v2",\N
"getVertices","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.hull{ConvexHull.java[ConvexHull~getVertices"
"source",\N
"isIncludeCollinearPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AbstractConvexHullGenerator2D.java[AbstractConvexHullGenerator2D~isIncludeCollinearPoints"
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceInf~QFieldVector3D\\<QT;>;~QVector3D;"
"pos",\N
"RegionFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory"
"BoundarySizeVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundarySizeVisitor.java[BoundarySizeVisitor"
"v1",\N
"BoundaryProjection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjection.java[BoundaryProjection"
"RegionFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~RegionFactory"
"BoundarySizeVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundarySizeVisitor.java[BoundarySizeVisitor~BoundarySizeVisitor"
"getOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjection.java[BoundaryProjection~getOffset"
"v2",\N
"buildConvex","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~buildConvex~\\[QHyperplane\\<QS;>;"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundarySizeVisitor.java[BoundarySizeVisitor~getSize"
"BoundaryBuilder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryBuilder.java[BoundaryBuilder"
"distanceInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceInf~QVector3D;~QFieldVector3D\\<QT;>;"
"hyperplanes",\N
"visitInternalNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryBuilder.java[BoundaryBuilder~visitInternalNode~QBSPTree\\<QS;>;"
"visitInternalNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundarySizeVisitor.java[BoundarySizeVisitor~visitInternalNode~QBSPTree\\<QS;>;"
"v1",\N
"difference","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~difference~QRegion\\<QS;>;~QRegion\\<QS;>;"
"node",\N
"v2",\N
"visitLeafNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryBuilder.java[BoundaryBuilder~visitLeafNode~QBSPTree\\<QS;>;"
"node",\N
"region1",\N
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceSq~QFieldVector3D\\<QT;>;"
"region2",\N
"visitLeafNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundarySizeVisitor.java[BoundarySizeVisitor~visitLeafNode~QBSPTree\\<QS;>;"
"node",\N
"v",\N
"getComplement","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~getComplement~QRegion\\<QS;>;"
"node",\N
"BoundaryProjector","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjector.java[BoundaryProjector"
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceSq~QVector3D;"
"region",\N
"getProjection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjector.java[BoundaryProjector~getProjection"
"AbstractRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion"
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~intersection~QRegion\\<QS;>;~QRegion\\<QS;>;"
"v",\N
"AbstractRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~AbstractRegion~D"
"visitInternalNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjector.java[BoundaryProjector~visitInternalNode~QBSPTree\\<QS;>;"
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceSq~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"region1",\N
"tolerance",\N
"node",\N
"region2",\N
"v1",\N
"AbstractRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~AbstractRegion~QBSPTree\\<QS;>;~D"
"visitLeafNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryProjector.java[BoundaryProjector~visitLeafNode~QBSPTree\\<QS;>;"
"union","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~union~QRegion\\<QS;>;~QRegion\\<QS;>;"
"v2",\N
"tree",\N
"node",\N
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceSq~QFieldVector3D\\<QT;>;~QVector3D;"
"region1",\N
"tolerance",\N
"region2",\N
"BSPTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree"
"v1",\N
"AbstractRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~AbstractRegion~QCollection\\<QSubHyperplane\\<QS;>;>;~D"
"BSPTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~BSPTree"
"xor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory~xor~QRegion\\<QS;>;~QRegion\\<QS;>;"
"v2",\N
"boundary",\N
"distanceSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~distanceSq~QVector3D;~QFieldVector3D\\<QT;>;"
"region1",\N
"BSPTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~BSPTree~QObject;"
"tolerance",\N
"region2",\N
"v1",\N
"attribute",\N
"AbstractRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~AbstractRegion~\\[QHyperplane\\<QS;>;~D"
"UnionMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[UnionMerger"
"v2",\N
"BSPTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~BSPTree~QSubHyperplane\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QObject;"
"hyperplanes",\N
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[UnionMerger~merge~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~Z~Z"
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~dotProduct~QFieldVector3D\\<QT;>;"
"cut",\N
"tolerance",\N
"leaf",\N
"v",\N
"plus",\N
"applyTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~applyTransform~QTransform\\<QS;QT;>;"
"tree",\N
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~dotProduct~QVector3D;"
"minus",\N
"transform",\N
"parentTree",\N
"attribute",\N
"v",\N
"isPlusChild",\N
"buildNew","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~buildNew~QBSPTree\\<QS;>;"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~copySelf"
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~dotProduct~QFieldVector3D\\<QT;>;~QFieldVector3D\\<QT;>;"
"leafFromInstance",\N
"newTree",\N
"getAttribute","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~getAttribute"
"IntersectionMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[IntersectionMerger"
"v1",\N
"computeGeometricalProperties","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~computeGeometricalProperties"
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[IntersectionMerger~merge~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~Z~Z"
"v2",\N
"getCut","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~getCut"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~contains~QRegion\\<QS;>;"
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~dotProduct~QFieldVector3D\\<QT;>;~QVector3D;"
"leaf",\N
"getMinus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~getMinus"
"region",\N
"tree",\N
"v1",\N
"parentTree",\N
"getParent","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~getParent"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~copySelf"
"v2",\N
"isPlusChild",\N
"dotProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~dotProduct~QVector3D;~QFieldVector3D\\<QT;>;"
"getBoundarySize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~getBoundarySize"
"getPlus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~getPlus"
"leafFromInstance",\N
"v1",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~getSize"
"insertCut","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~insertCut~QHyperplane\\<QS;>;"
"XorMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[XorMerger"
"v2",\N
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[XorMerger~merge~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~Z~Z"
"hyperplane",\N
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~getTolerance"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~equals~QObject;"
"leaf",\N
"insertInTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~insertInTree~QBSPTree\\<QS;>;~Z"
"getTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~getTree~Z"
"other",\N
"tree",\N
"parentTree",\N
"getAlpha","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getAlpha"
"includeBoundaryAttributes",\N
"parentTree",\N
"isPlusChild",\N
"isPlusChild",\N
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~intersection~QSubHyperplane\\<QS;>;"
"getDelta","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getDelta"
"insertInTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~insertInTree~QBSPTree\\<QS;>;~Z~QVanishingCutHandler\\<QS;>;"
"leafFromInstance",\N
"sub",\N
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getNorm"
"parentTree",\N
"DifferenceMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[DifferenceMerger"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~isEmpty"
"isPlusChild",\N
"DifferenceMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[DifferenceMerger~DifferenceMerger~QRegion\\<QS;>;~QRegion\\<QS;>;"
"getNorm1","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getNorm1"
"vanishingHandler",\N
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~isEmpty~QBSPTree\\<QS;>;"
"region1",\N
"getNormInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getNormInf"
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~merge~QBSPTree\\<QS;>;~QLeafMerger\\<QS;>;"
"node",\N
"region2",\N
"getNormSq","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getNormSq"
"tree",\N
"fixNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[DifferenceMerger~fixNode~QBSPTree\\<QS;>;"
"isFull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~isFull"
"leafMerger",\N
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getX"
"node",\N
"isFull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~isFull~QBSPTree\\<QS;>;"
"pruneAroundConvexCell","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~pruneAroundConvexCell~QObject;~QObject;~QObject;"
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[DifferenceMerger~merge~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~Z~Z"
"getY","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getY"
"node",\N
"cellAttribute",\N
"leaf",\N
"setSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractRegion.java[AbstractRegion~setSize~D"
"getZ","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~getZ"
"otherLeafsAttributes",\N
"tree",\N
"internalAttributes",\N
"size",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~hashCode"
"parentTree",\N
"setAttribute","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~setAttribute~QObject;"
"InsideFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{InsideFinder.java[InsideFinder"
"isPlusChild",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~isInfinite"
"InsideFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{InsideFinder.java[InsideFinder~InsideFinder~QRegion\\<QS;>;"
"attribute",\N
"leafFromInstance",\N
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~isNaN"
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~split~QSubHyperplane\\<QS;>;"
"NodesCleaner","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[NodesCleaner"
"region",\N
"visitInternalNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[NodesCleaner~visitInternalNode~QBSPTree\\<QS;>;"
"minusFound","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{InsideFinder.java[InsideFinder~minusFound"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~negate"
"sub",\N
"node",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree~visit~QBSPTreeVisitor\\<QS;>;"
"plusFound","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{InsideFinder.java[InsideFinder~plusFound"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~scalarMultiply~QT;"
"visitLeafNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[NodesCleaner~visitLeafNode~QBSPTree\\<QS;>;"
"visitor",\N
"a",\N
"recurseSides","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{InsideFinder.java[InsideFinder~recurseSides~QBSPTree\\<QS;>;~QSubHyperplane\\<QS;>;"
"node",\N
"LeafMerger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree[LeafMerger"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~scalarMultiply~D"
"node",\N
"merge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree[LeafMerger~merge~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~QBSPTree\\<QS;>;~Z~Z"
"VanishingToLeaf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[VanishingToLeaf"
"sub",\N
"a",\N
"VanishingToLeaf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[VanishingToLeaf~VanishingToLeaf~Z"
"leaf",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~QFieldVector3D\\<QT;>;"
"Characterization","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization"
"inside",\N
"tree",\N
"Characterization","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~Characterization~QBSPTree\\<QS;>;~QSubHyperplane\\<QS;>;"
"v",\N
"parentTree",\N
"fixNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{RegionFactory.java[RegionFactory[VanishingToLeaf~fixNode~QBSPTree\\<QS;>;"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~QVector3D;"
"node",\N
"isPlusChild",\N
"node",\N
"sub",\N
"leafFromInstance",\N
"v",\N
"Region","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region"
"VanishingCutHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree[VanishingCutHandler"
"getInsideSplitters","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~getInsideSplitters"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~QT;~QFieldVector3D\\<QT;>;"
"buildNew","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~buildNew~QBSPTree\\<QS;>;"
"fixNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTree.java[BSPTree[VanishingCutHandler~fixNode~QBSPTree\\<QS;>;"
"getOutsideSplitters","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~getOutsideSplitters"
"factor",\N
"newTree",\N
"node",\N
"v",\N
"insideTouching","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~insideTouching"
"contains","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~contains~QRegion\\<QS;>;"
"SubHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~QT;~QVector3D;"
"outsideTouching","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~outsideTouching"
"region",\N
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~copySelf"
"factor",\N
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~copySelf"
"v",\N
"touchInside","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~touchInside"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~D~QFieldVector3D\\<QT;>;"
"getHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~getHyperplane"
"getBoundarySize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~getBoundarySize"
"touchOutside","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Characterization.java[Characterization~touchOutside"
"factor",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~getSize"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~getSize"
"v",\N
"Hyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane"
"getTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~getTree~Z"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~isEmpty"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane~copySelf"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~subtract~D~QVector3D;"
"includeBoundaryAttributes",\N
"reunite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~reunite~QSubHyperplane\\<QS;>;"
"factor",\N
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane~getTolerance"
"intersection","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~intersection~QSubHyperplane\\<QS;>;"
"other",\N
"v",\N
"sameOrientationAs","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane~sameOrientationAs~QHyperplane\\<QS;>;"
"sub",\N
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane~split~QHyperplane\\<QS;>;"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~toArray"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~isEmpty"
"other",\N
"hyperplane",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~toString"
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane~wholeHyperplane"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~isEmpty~QBSPTree\\<QS;>;"
"SplitSubHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane[SplitSubHyperplane"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~toString~QNumberFormat;"
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Hyperplane.java[Hyperplane~wholeSpace"
"SplitSubHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane[SplitSubHyperplane~SplitSubHyperplane~QSubHyperplane\\<QU;>;~QSubHyperplane\\<QU;>;"
"node",\N
"format",\N
"isFull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~isFull"
"plus",\N
"Transform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Transform.java[Transform"
"toVector3D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3D.java[FieldVector3D~toVector3D"
"minus",\N
"apply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Transform.java[Transform~apply~QHyperplane\\<QS;>;"
"isFull","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Region.java[Region~isFull~QBSPTree\\<QS;>;"
"getMinus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane[SplitSubHyperplane~getMinus"
"Embedding","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Embedding.java[Embedding"
"node",\N
"hyperplane",\N
"NodesSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{NodesSet.java[NodesSet"
"getPlus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{SubHyperplane.java[SubHyperplane[SplitSubHyperplane~getPlus"
"apply","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{Transform.java[Transform~apply~QSubHyperplane\\<QT;>;~QHyperplane\\<QS;>;~QHyperplane\\<QS;>;"
"BSPTreeVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTreeVisitor.java[BSPTreeVisitor"
"NodesSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{NodesSet.java[NodesSet~NodesSet"
"visitInternalNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTreeVisitor.java[BSPTreeVisitor~visitInternalNode~QBSPTree\\<QS;>;"
"sub",\N
"AbstractSubHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{NodesSet.java[NodesSet~add~QBSPTree\\<QS;>;"
"original",\N
"node",\N
"AbstractSubHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~AbstractSubHyperplane~QHyperplane\\<QS;>;~QRegion\\<QT;>;"
"node",\N
"transformed",\N
"visitLeafNode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BSPTreeVisitor.java[BSPTreeVisitor~visitLeafNode~QBSPTree\\<QS;>;"
"hyperplane",\N
"addAll","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{NodesSet.java[NodesSet~addAll~QIterable\\<QBSPTree\\<QS;>;>;"
"BoundaryAttribute","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute"
"remainingRegion",\N
"node",\N
"iterator",\N
"BoundaryAttribute","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute~BoundaryAttribute~QSubHyperplane\\<QS;>;~QSubHyperplane\\<QS;>;"
"applyTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~applyTransform~QTransform\\<QS;QT;>;"
"AVLTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{NodesSet.java[NodesSet~iterator"
"plusOutside",\N
"transform",\N
"AVLTree","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~AVLTree"
"plusInside",\N
"OrderedTuple","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple"
"buildNew","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~buildNew~QHyperplane\\<QS;>;~QRegion\\<QT;>;"
"delete","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~delete~QT;"
"OrderedTuple","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple~OrderedTuple~\\[D"
"BoundaryAttribute","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute~BoundaryAttribute~QSubHyperplane\\<QS;>;~QSubHyperplane\\<QS;>;~QNodesSet\\<QS;>;"
"hyper",\N
"element",\N
"components",\N
"plusOutside",\N
"remaining",\N
"getLargest","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~getLargest"
"plusInside",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple~compareTo~QOrderedTuple;"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~copySelf"
"splitters",\N
"getNotLarger","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~getNotLarger~QT;"
"ot",\N
"getHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~getHyperplane"
"getPlusInside","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute~getPlusInside"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple~equals~QObject;"
"reference",\N
"getRemainingRegion","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~getRemainingRegion"
"getPlusOutside","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute~getPlusOutside"
"getNotSmaller","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~getNotSmaller~QT;"
"other",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~getSize"
"getSplitters","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{BoundaryAttribute.java[BoundaryAttribute~getSplitters"
"getComponents","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple~getComponents"
"reference",\N
"getSmallest","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~getSmallest"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~isEmpty"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{OrderedTuple.java[OrderedTuple~hashCode"
"LimitAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle"
"LimitAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~LimitAngle~QS1Point;~Z~D"
"insert","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~insert~QT;"
"reunite","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~reunite~QSubHyperplane\\<QS;>;"
"Arc","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc"
"location",\N
"other",\N
"element",\N
"getBarycenter","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc~getBarycenter"
"direct",\N
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning{AbstractSubHyperplane.java[AbstractSubHyperplane~split~QHyperplane\\<QS;>;"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~isEmpty"
"getInf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc~getInf"
"tolerance",\N
"hyper",\N
"size","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree~size"
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~copySelf"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc~getSize"
"SubLimitAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{SubLimitAngle.java[SubLimitAngle"
"Node","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node"
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~getLocation"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{SubLimitAngle.java[SubLimitAngle~getSize"
"getSup","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc~getSup"
"Node","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~Node~QT;~QNode;"
"getReverse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~getReverse"
"isEmpty","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{SubLimitAngle.java[SubLimitAngle~isEmpty"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Arc.java[Arc~getTolerance"
"element",\N
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~getTolerance"
"parent",\N
"S1Point","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point"
"ArcsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet"
"delete","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~delete"
"S1Point","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~S1Point~D"
"ArcsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet~ArcsSet~D"
"isDirect","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~isDirect"
"getElement","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~getElement"
"tolerance",\N
"alpha",\N
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~wholeHyperplane"
"asList","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet~asList"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~distance~QS1Point;~QS1Point;"
"getLargest","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~getLargest"
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngle.java[LimitAngle~wholeSpace"
"p1",\N
"computeGeometricalProperties","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet~computeGeometricalProperties"
"getNext","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~getNext"
"Sphere1D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D"
"p2",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D~getDimension"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet~iterator"
"getPrevious","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~getPrevious"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~equals~QObject;"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D~getInstance"
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet~split~QArc;"
"getSmallest","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~getSmallest"
"other",\N
"arc",\N
"getAlpha","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~getAlpha"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D[LazyHolder"
"insert","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~insert~QT;"
"SubArcsIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[SubArcsIterator"
"NoSubSpaceException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D[NoSubSpaceException"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~hashCode"
"newElement",\N
"SubArcsIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[SubArcsIterator~SubArcsIterator"
"NoSubSpaceException","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1D.java[Sphere1D[NoSubSpaceException~NoSubSpaceException"
"size","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTree.java[AVLTree[Node~size"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point~isNaN"
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[SubArcsIterator~hasNext"
"Edge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge"
"EdgesBuilder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{EdgesBuilder.java[EdgesBuilder"
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{S1Point.java[S1Point^NaN"
"Edge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~Edge~QVertex;~QVertex;~D~QCircle;"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[SubArcsIterator~next"
"SphericalPolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSet.java[SphericalPolygonsSet"
"SphericalPolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSet.java[SphericalPolygonsSet~SphericalPolygonsSet~D"
"SubCircle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{SubCircle.java[SubCircle"
"start",\N
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[SubArcsIterator~remove"
"Vertex","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex"
"end",\N
"tolerance",\N
"Split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[Split"
"Vertex","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~Vertex~QS2Point;"
"length",\N
"SphericalPolygonsSet","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSet.java[SphericalPolygonsSet~SphericalPolygonsSet~D~\\[QS2Point;"
"getMinus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[Split~getMinus"
"circle",\N
"location",\N
"hyperplaneThickness",\N
"getPlus","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[Split~getPlus"
"getCircle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~getCircle"
"bindWith","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~bindWith~QCircle;"
"vertices",\N
"getEnd","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~getEnd"
"InconsistentStateAt2PiWrapping","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[InconsistentStateAt2PiWrapping"
"circle",\N
"PropertiesComputer","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{PropertiesComputer.java[PropertiesComputer"
"InconsistentStateAt2PiWrapping","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSet.java[ArcsSet[InconsistentStateAt2PiWrapping~InconsistentStateAt2PiWrapping"
"PropertiesComputer","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{PropertiesComputer.java[PropertiesComputer~PropertiesComputer~D"
"getIncoming","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~getIncoming"
"getLength","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~getLength"
"Sphere2D","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Sphere2D.java[Sphere2D"
"tolerance",\N
"getLocation","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~getLocation"
"getStart","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~getStart"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Sphere2D.java[Sphere2D~getDimension"
"getArea","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{PropertiesComputer.java[PropertiesComputer~getArea"
"getOutgoing","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~getOutgoing"
"setNextEdge","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~setNextEdge~QEdge;"
"getBarycenter","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{PropertiesComputer.java[PropertiesComputer~getBarycenter"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Sphere2D.java[Sphere2D~getInstance"
"setIncoming","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~setIncoming~QEdge;"
"next",\N
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Sphere2D.java[Sphere2D[LazyHolder"
"S2Point","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point"
"split","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Edge.java[Edge~split~QCircle;~QList\\<QEdge;>;~QList\\<QEdge;>;"
"incoming",\N
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~distance~QS2Point;~QS2Point;"
"Circle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle"
"setOutgoing","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~setOutgoing~QEdge;"
"splitCircle",\N
"Circle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~Circle~QS2Point;~QS2Point;~D"
"p1",\N
"outsideList",\N
"outgoing",\N
"p2",\N
"first",\N
"insideList",\N
"sharedCircleWith","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Vertex.java[Vertex~sharedCircleWith~QVertex;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~equals~QObject;"
"second",\N
"RealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector"
"vertex",\N
"other",\N
"tolerance",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~append~QRealVector;"
"IllConditionedOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IllConditionedOperatorException.java[IllConditionedOperatorException"
"getPhi","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~getPhi"
"Circle","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~Circle~QCircle;"
"IllConditionedOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IllConditionedOperatorException.java[IllConditionedOperatorException~IllConditionedOperatorException~D"
"v",\N
"getTheta","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~getTheta"
"circle",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~append~D"
"cond",\N
"copySelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~copySelf"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~hashCode"
"RealVectorPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorPreservingVisitor.java[RealVectorPreservingVisitor"
"d",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorPreservingVisitor.java[RealVectorPreservingVisitor~end"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~copy"
"getReverse","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~getReverse"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~isNaN"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorPreservingVisitor.java[RealVectorPreservingVisitor~start~I~I~I"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getDimension"
"getTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~getTolerance"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point~negate"
"dimension",\N
"revertSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~revertSelf"
"getL1Norm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getL1Norm"
"MINUS_I","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^MINUS_I"
"start",\N
"wholeHyperplane","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~wholeHyperplane"
"getLInfNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getLInfNorm"
"end",\N
"MINUS_J","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^MINUS_J"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorPreservingVisitor.java[RealVectorPreservingVisitor~visit~I~D"
"wholeSpace","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle~wholeSpace"
"getMaxIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getMaxIndex"
"MINUS_K","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^MINUS_K"
"index",\N
"getMaxValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getMaxValue"
"CircleTransform","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{Circle.java[Circle[CircleTransform"
"NaN","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^NaN"
"value",\N
"SparseFieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector"
"getMinIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getMinIndex"
"PLUS_I","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^PLUS_I"
"DefaultRealMatrixChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixChangingVisitor.java[DefaultRealMatrixChangingVisitor"
"SparseFieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~SparseFieldVector~QSparseFieldVector\\<QT;>;~I"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixChangingVisitor.java[DefaultRealMatrixChangingVisitor~end"
"getMinValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getMinValue"
"PLUS_J","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^PLUS_J"
"v",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixChangingVisitor.java[DefaultRealMatrixChangingVisitor~start~I~I~I~I~I~I"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~getNorm"
"resize",\N
"PLUS_K","=mathmain3.6/src<main.java.org.apache.commons.math3.geometry.spherical.twod{S2Point.java[S2Point^PLUS_K"
"rows",\N
"SparseFieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~SparseFieldVector~QSparseFieldVector\\<QT;>;"
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~isInfinite"
"RealMatrixChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixChangingVisitor.java[RealMatrixChangingVisitor"
"columns",\N
"v",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixChangingVisitor.java[RealMatrixChangingVisitor~end"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~isNaN"
"startRow",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~append~QSparseFieldVector\\<QT;>;"
"endRow",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixChangingVisitor.java[RealMatrixChangingVisitor~start~I~I~I~I~I~I"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~iterator"
"startColumn",\N
"v",\N
"rows",\N
"mapAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapAdd~D"
"endColumn",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~append~QFieldVector\\<QT;>;"
"columns",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixChangingVisitor.java[DefaultRealMatrixChangingVisitor~visit~I~I~D"
"d",\N
"startRow",\N
"v",\N
"mapAddToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapAddToSelf~D"
"row",\N
"endRow",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~copy"
"column",\N
"startColumn",\N
"d",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~equals~QObject;"
"endColumn",\N
"value",\N
"mapDivide","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapDivide~D"
"obj",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixChangingVisitor.java[RealMatrixChangingVisitor~visit~I~I~D"
"FieldDecompositionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldDecompositionSolver.java[FieldDecompositionSolver"
"d",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~getData"
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldDecompositionSolver.java[FieldDecompositionSolver~getInverse"
"row",\N
"mapDivideToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapDivideToSelf~D"
"column",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~getDimension"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldDecompositionSolver.java[FieldDecompositionSolver~isNonSingular"
"d",\N
"value",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~hashCode"
"mapMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapMultiply~D"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldDecompositionSolver.java[FieldDecompositionSolver~solve~QFieldVector\\<QT;>;"
"NonSquareOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSquareOperatorException.java[NonSquareOperatorException"
"NonSquareOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSquareOperatorException.java[NonSquareOperatorException~NonSquareOperatorException~I~I"
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~outerProduct~QSparseFieldVector\\<QT;>;"
"d",\N
"b",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldDecompositionSolver.java[FieldDecompositionSolver~solve~QFieldMatrix\\<QT;>;"
"mapMultiplyToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapMultiplyToSelf~D"
"wrong",\N
"v",\N
"expected",\N
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~outerProduct~QFieldVector\\<QT;>;"
"d",\N
"b",\N
"DiagonalMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix"
"mapSubtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapSubtract~D"
"RealMatrixFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat"
"v",\N
"DiagonalMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~DiagonalMatrix~\\[D"
"RealMatrixFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~RealMatrixFormat"
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~set~QT;"
"d",\N
"d",\N
"mapSubtractToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~mapSubtractToSelf~D"
"RealMatrixFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~RealMatrixFormat~QNumberFormat;"
"value",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~add~QDiagonalMatrix;"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~toArray"
"format",\N
"d",\N
"m",\N
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~outerProduct~QRealVector;"
"RealMatrixFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~RealMatrixFormat~QString;~QString;~QString;~QString;~QString;~QString;"
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~walkInDefaultOrder~QFieldVectorPreservingVisitor\\<QT;>;"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~copy"
"prefix",\N
"v",\N
"visitor",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~getColumnDimension"
"suffix",\N
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~set~D"
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~walkInDefaultOrder~QFieldVectorChangingVisitor\\<QT;>;"
"rowPrefix",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~getData"
"value",\N
"visitor",\N
"rowSuffix",\N
"sparseIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~sparseIterator"
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~getDataRef"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~walkInOptimizedOrder~QFieldVectorPreservingVisitor\\<QT;>;"
"rowSeparator",\N
"columnSeparator",\N
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~toArray"
"visitor",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~getRowDimension"
"RealMatrixFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~RealMatrixFormat~QString;~QString;~QString;~QString;~QString;~QString;~QNumberFormat;"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldVector.java[SparseFieldVector~walkInOptimizedOrder~QFieldVectorChangingVisitor\\<QT;>;"
"unmodifiableRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~unmodifiableRealVector~QRealVector;"
"inverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~inverse"
"prefix",\N
"visitor",\N
"v",\N
"inverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~inverse~D"
"suffix",\N
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~walkInDefaultOrder~QRealVectorPreservingVisitor;"
"ConjugateGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ConjugateGradient.java[ConjugateGradient"
"rowPrefix",\N
"threshold",\N
"ConjugateGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ConjugateGradient.java[ConjugateGradient~ConjugateGradient~I~D~Z"
"rowSuffix",\N
"visitor",\N
"isSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~isSingular~D"
"rowSeparator",\N
"maxIterations",\N
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~walkInDefaultOrder~QRealVectorChangingVisitor;"
"threshold",\N
"delta",\N
"columnSeparator",\N
"visitor",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DiagonalMatrix.java[DiagonalMatrix~subtract~QDiagonalMatrix;"
"format",\N
"check",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~walkInOptimizedOrder~QRealVectorPreservingVisitor;"
"getCheck","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ConjugateGradient.java[ConjugateGradient~getCheck"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~format~QRealMatrix;"
"m",\N
"visitor",\N
"NonSelfAdjointOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSelfAdjointOperatorException.java[NonSelfAdjointOperatorException"
"m",\N
"OPERATOR","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ConjugateGradient.java[ConjugateGradient^OPERATOR"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector~walkInOptimizedOrder~QRealVectorChangingVisitor;"
"NonSelfAdjointOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSelfAdjointOperatorException.java[NonSelfAdjointOperatorException~NonSelfAdjointOperatorException"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~format~QRealMatrix;~QStringBuffer;~QFieldPosition;"
"VECTOR","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ConjugateGradient.java[ConjugateGradient^VECTOR"
"visitor",\N
"NonSymmetricMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSymmetricMatrixException.java[NonSymmetricMatrixException"
"matrix",\N
"Entry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry"
"RectangularCholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RectangularCholeskyDecomposition.java[RectangularCholeskyDecomposition"
"NonSymmetricMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSymmetricMatrixException.java[NonSymmetricMatrixException~NonSymmetricMatrixException~I~I~D"
"toAppendTo",\N
"Entry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry~Entry"
"RectangularCholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RectangularCholeskyDecomposition.java[RectangularCholeskyDecomposition~RectangularCholeskyDecomposition~QRealMatrix;"
"pos",\N
"row",\N
"matrix",\N
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getAvailableLocales"
"getIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry~getIndex"
"column",\N
"RectangularCholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RectangularCholeskyDecomposition.java[RectangularCholeskyDecomposition~RectangularCholeskyDecomposition~QRealMatrix;~D"
"threshold",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry~getValue"
"getColumnSeparator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getColumnSeparator"
"getColumn","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSymmetricMatrixException.java[NonSymmetricMatrixException~getColumn"
"matrix",\N
"setIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry~setIndex~I"
"getFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getFormat"
"small",\N
"getRow","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSymmetricMatrixException.java[NonSymmetricMatrixException~getRow"
"getRank","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RectangularCholeskyDecomposition.java[RectangularCholeskyDecomposition~getRank"
"index",\N
"getThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSymmetricMatrixException.java[NonSymmetricMatrixException~getThreshold"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getInstance"
"getRootMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RectangularCholeskyDecomposition.java[RectangularCholeskyDecomposition~getRootMatrix"
"setValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[Entry~setValue~D"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getInstance~QLocale;"
"DefaultFieldMatrixChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixChangingVisitor.java[DefaultFieldMatrixChangingVisitor"
"FieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix"
"value",\N
"DefaultFieldMatrixChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixChangingVisitor.java[DefaultFieldMatrixChangingVisitor~DefaultFieldMatrixChangingVisitor~QT;"
"locale",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~add~QFieldMatrix\\<QT;>;"
"SparseEntryIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[SparseEntryIterator"
"zero",\N
"getPrefix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getPrefix"
"SparseEntryIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[SparseEntryIterator~SparseEntryIterator"
"m",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixChangingVisitor.java[DefaultFieldMatrixChangingVisitor~end"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~copy"
"getRowPrefix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getRowPrefix"
"advance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[SparseEntryIterator~advance~QEntry;"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixChangingVisitor.java[DefaultFieldMatrixChangingVisitor~start~I~I~I~I~I~I"
"getRowSeparator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getRowSeparator"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~getData"
"e",\N
"rows",\N
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[SparseEntryIterator~hasNext"
"getTrace","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~getTrace"
"getRowSuffix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getRowSuffix"
"columns",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVector.java[RealVector[SparseEntryIterator~next"
"startRow",\N
"getSuffix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~getSuffix"
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~scalarAdd~QT;"
"endRow",\N
"NonSquareMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSquareMatrixException.java[NonSquareMatrixException"
"d",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~parse~QString;"
"startColumn",\N
"NonSquareMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonSquareMatrixException.java[NonSquareMatrixException~NonSquareMatrixException~I~I"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~scalarMultiply~QT;"
"source",\N
"endColumn",\N
"wrong",\N
"d",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixFormat.java[RealMatrixFormat~parse~QString;~QParsePosition;"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixChangingVisitor.java[DefaultFieldMatrixChangingVisitor~visit~I~I~QT;"
"expected",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~subtract~QFieldMatrix\\<QT;>;"
"row",\N
"source",\N
"SparseRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseRealMatrix.java[SparseRealMatrix"
"column",\N
"m",\N
"pos",\N
"JacobiPreconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner"
"LUDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition"
"value",\N
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~transpose"
"JacobiPreconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~JacobiPreconditioner~\\[D~Z"
"LUDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~LUDecomposition~QRealMatrix;"
"ArrayFieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInColumnOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"diag",\N
"matrix",\N
"ArrayFieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~ArrayFieldVector~I~QT;"
"visitor",\N
"deep",\N
"LUDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~LUDecomposition~QRealMatrix;~D"
"size",\N
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~create~QRealLinearOperator;"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInColumnOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"preset",\N
"matrix",\N
"a",\N
"visitor",\N
"singularityThreshold",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~append~QFieldVector\\<QT;>;"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInOptimizedOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~getColumnDimension"
"getDeterminant","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getDeterminant"
"v",\N
"visitor",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~getRowDimension"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~append~QArrayFieldVector\\<QT;>;"
"getL","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getL"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInOptimizedOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"operate","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~operate~QRealVector;"
"v",\N
"getP","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getP"
"visitor",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~append~QT;"
"x",\N
"getPivot","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getPivot"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInRowOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{JacobiPreconditioner.java[JacobiPreconditioner~sqrt"
"in",\N
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getSolver"
"visitor",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~copy"
"RRQRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrix.java[FieldMatrix~walkInRowOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"getU","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition~getU"
"RRQRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~RRQRDecomposition~QRealMatrix;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~equals~QObject;"
"visitor",\N
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition[Solver"
"other",\N
"matrix",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition[Solver~getInverse"
"FieldVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~getData"
"RRQRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~RRQRDecomposition~QRealMatrix;~D"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~append~QFieldVector\\<QT;>;"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition[Solver~isNonSingular"
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~getDataRef"
"matrix",\N
"v",\N
"threshold",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition[Solver~solve~QRealVector;"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~getDimension"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~append~QT;"
"decompose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~decompose~\\[\\[D"
"b",\N
"getEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~getEntry~I"
"d",\N
"qrt",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{LUDecomposition.java[LUDecomposition[Solver~solve~QRealMatrix;"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~copy"
"index",\N
"getP","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~getP"
"b",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~hashCode"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~getData"
"getRank","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~getRank~D"
"SchurTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer"
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~outerProduct~QFieldVector\\<QT;>;"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~getDimension"
"SchurTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer~SchurTransformer~QRealMatrix;"
"dropThreshold",\N
"v",\N
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~outerProduct~QFieldVector\\<QT;>;"
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~getSolver"
"matrix",\N
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~outerProduct~QArrayFieldVector\\<QT;>;"
"getP","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer~getP"
"v",\N
"performHouseholderReflection","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition~performHouseholderReflection~I~\\[\\[D"
"v",\N
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~set~QT;"
"getPT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer~getPT"
"minor",\N
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~set~QT;"
"value",\N
"qrt",\N
"getT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer~getT"
"value",\N
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVector.java[FieldVector~toArray"
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition[Solver"
"setEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~setEntry~I~QT;"
"ShiftInfo","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer[ShiftInfo"
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition[Solver~getInverse"
"Array2DRowFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix"
"exShift","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer[ShiftInfo^exShift"
"index",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~add~QArray2DRowFieldMatrix\\<QT;>;"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition[Solver~isNonSingular"
"value",\N
"w","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer[ShiftInfo^w"
"m",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition[Solver~solve~QRealVector;"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~toArray"
"x","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer[ShiftInfo^x"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~copy"
"b",\N
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~walkInDefaultOrder~QFieldVectorPreservingVisitor\\<QT;>;"
"y","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SchurTransformer.java[SchurTransformer[ShiftInfo^y"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RRQRDecomposition.java[RRQRDecomposition[Solver~solve~QRealMatrix;"
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~getColumnDimension"
"visitor",\N
"b",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~getData"
"SymmLQ","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ"
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~walkInDefaultOrder~QFieldVectorChangingVisitor\\<QT;>;"
"SymmLQ","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ~SymmLQ~I~D~Z"
"NonPositiveDefiniteMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteMatrixException.java[NonPositiveDefiniteMatrixException"
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~getDataRef"
"visitor",\N
"NonPositiveDefiniteMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteMatrixException.java[NonPositiveDefiniteMatrixException~NonPositiveDefiniteMatrixException~D~I~D"
"maxIterations",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~walkInOptimizedOrder~QFieldVectorPreservingVisitor\\<QT;>;"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~getRowDimension"
"delta",\N
"wrong",\N
"visitor",\N
"check",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~subtract~QArray2DRowFieldMatrix\\<QT;>;"
"index",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayFieldVector.java[ArrayFieldVector~walkInOptimizedOrder~QFieldVectorChangingVisitor\\<QT;>;"
"getCheck","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ~getCheck"
"threshold",\N
"m",\N
"visitor",\N
"getColumn","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteMatrixException.java[NonPositiveDefiniteMatrixException~getColumn"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~walkInColumnOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"State","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector"
"State","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~State~QRealLinearOperator;~QRealLinearOperator;~QRealVector;~Z~D~D~Z"
"getRow","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteMatrixException.java[NonPositiveDefiniteMatrixException~getRow"
"visitor",\N
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector"
"a",\N
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~walkInColumnOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"getThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteMatrixException.java[NonPositiveDefiniteMatrixException~getThreshold"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~I"
"m",\N
"visitor",\N
"RealLinearOperator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealLinearOperator.java[RealLinearOperator"
"b",\N
"size",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~walkInRowOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealLinearOperator.java[RealLinearOperator~getColumnDimension"
"goodb",\N
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~I~D"
"shift",\N
"visitor",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealLinearOperator.java[RealLinearOperator~getRowDimension"
"size",\N
"delta",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowFieldMatrix.java[Array2DRowFieldMatrix~walkInRowOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"preset",\N
"isTransposable","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealLinearOperator.java[RealLinearOperator~isTransposable"
"check",\N
"visitor",\N
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~\\[D"
"bEqualsNullVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~bEqualsNullVector"
"HessenbergTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer"
"RealVectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat"
"d",\N
"HessenbergTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer~HessenbergTransformer~QRealMatrix;"
"betaEqualsZero","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~betaEqualsZero"
"RealVectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~RealVectorFormat"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~\\[QDouble;"
"matrix",\N
"getNormOfResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~getNormOfResidual"
"RealVectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~RealVectorFormat~QNumberFormat;"
"getH","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer~getH"
"d",\N
"hasConverged","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~hasConverged"
"format",\N
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~QArrayRealVector;~Z"
"getHouseholderVectorsRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer~getHouseholderVectorsRef"
"RealVectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~RealVectorFormat~QString;~QString;~QString;"
"v",\N
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~init"
"getP","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer~getP"
"prefix",\N
"deep",\N
"refineSolution","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~refineSolution~QRealVector;"
"suffix",\N
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~QArrayRealVector;~QArrayRealVector;"
"getPT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{HessenbergTransformer.java[HessenbergTransformer~getPT"
"x",\N
"separator",\N
"v1",\N
"Array2DRowRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix"
"RealVectorFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~RealVectorFormat~QString;~QString;~QString;~QNumberFormat;"
"update","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State~update"
"v2",\N
"Array2DRowRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~Array2DRowRealMatrix"
"prefix",\N
"CBRT_MACH_PREC","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State^CBRT_MACH_PREC"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~QArrayRealVector;~QRealVector;"
"Array2DRowRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~Array2DRowRealMatrix~\\[D"
"suffix",\N
"v1",\N
"MACH_PREC","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SymmLQ.java[SymmLQ[State^MACH_PREC"
"separator",\N
"v",\N
"v2",\N
"format",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~add~QArray2DRowRealMatrix;"
"AbstractFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~QRealVector;~QArrayRealVector;"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~format~QRealVector;"
"AbstractFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~AbstractFieldMatrix"
"m",\N
"v1",\N
"v",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~copy"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~add~QFieldMatrix\\<QT;>;"
"v2",\N
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~format~QRealVector;~QStringBuffer;~QFieldPosition;"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~QArrayRealVector;~\\[D"
"m",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~getColumnDimension"
"vector",\N
"checkAdditionCompatible","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~checkAdditionCompatible~QFieldMatrix\\<QT;>;"
"v1",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~getData"
"toAppendTo",\N
"v2",\N
"m",\N
"pos",\N
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~getDataRef"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~\\[D~QArrayRealVector;"
"checkSubtractionCompatible","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~checkSubtractionCompatible~QFieldMatrix\\<QT;>;"
"getAvailableLocales","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getAvailableLocales"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~getRowDimension"
"v1",\N
"m",\N
"getFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getFormat"
"v2",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~copy"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~subtract~QArray2DRowRealMatrix;"
"ArrayRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~ArrayRealVector~\\[D~\\[D"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getInstance"
"m",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~equals~QObject;"
"v1",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getInstance~QLocale;"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~walkInColumnOrder~QRealMatrixChangingVisitor;"
"object",\N
"v2",\N
"locale",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~getColumnDimension"
"visitor",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~append~QRealVector;"
"getPrefix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getPrefix"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~walkInColumnOrder~QRealMatrixPreservingVisitor;"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~getData"
"v",\N
"getSeparator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getSeparator"
"visitor",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~append~QArrayRealVector;"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~getRowDimension"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~walkInRowOrder~QRealMatrixChangingVisitor;"
"getSuffix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~getSuffix"
"v",\N
"getTrace","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~getTrace"
"visitor",\N
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~parse~QString;"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~append~D"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~hashCode"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{Array2DRowRealMatrix.java[Array2DRowRealMatrix~walkInRowOrder~QRealMatrixPreservingVisitor;"
"in",\N
"source",\N
"visitor",\N
"isSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~isSquare"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~copy"
"parse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorFormat.java[RealVectorFormat~parse~QString;~QParsePosition;"
"OpenMapRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix"
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~scalarAdd~QT;"
"source",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~equals~QObject;"
"OpenMapRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~OpenMapRealMatrix~QOpenMapRealMatrix;"
"pos",\N
"d",\N
"other",\N
"matrix",\N
"FieldVectorPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorPreservingVisitor.java[FieldVectorPreservingVisitor"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~scalarMultiply~QT;"
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~getDataRef"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorPreservingVisitor.java[FieldVectorPreservingVisitor~end"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~add~QOpenMapRealMatrix;"
"d",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~getDimension"
"m",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorPreservingVisitor.java[FieldVectorPreservingVisitor~start~I~I~I"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~subtract~QFieldMatrix\\<QT;>;"
"getL1Norm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~getL1Norm"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~copy"
"dimension",\N
"m",\N
"start",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~getColumnDimension"
"getLInfNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~getLInfNorm"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~toString"
"end",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~getRowDimension"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~getNorm"
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~transpose"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorPreservingVisitor.java[FieldVectorPreservingVisitor~visit~I~QT;"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~hashCode"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~subtract~QRealMatrix;"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInColumnOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"index",\N
"m",\N
"value",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~isInfinite"
"visitor",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealMatrix.java[OpenMapRealMatrix~subtract~QOpenMapRealMatrix;"
"FieldMatrixPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixPreservingVisitor.java[FieldMatrixPreservingVisitor"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInColumnOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~isNaN"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixPreservingVisitor.java[FieldMatrixPreservingVisitor~end"
"m",\N
"visitor",\N
"mapAddToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~mapAddToSelf~D"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixPreservingVisitor.java[FieldMatrixPreservingVisitor~start~I~I~I~I~I~I"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInOptimizedOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"SparseFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix"
"d",\N
"SparseFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~SparseFieldMatrix~QSparseFieldMatrix\\<QT;>;"
"rows",\N
"visitor",\N
"mapDivideToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~mapDivideToSelf~D"
"columns",\N
"other",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInOptimizedOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"d",\N
"startRow",\N
"SparseFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~SparseFieldMatrix~QFieldMatrix\\<QT;>;"
"visitor",\N
"mapMultiplyToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~mapMultiplyToSelf~D"
"endRow",\N
"other",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInRowOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"startColumn",\N
"d",\N
"addToEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~addToEntry~I~I~QT;"
"endColumn",\N
"visitor",\N
"mapSubtractToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~mapSubtractToSelf~D"
"row",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractFieldMatrix.java[AbstractFieldMatrix~walkInRowOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixPreservingVisitor.java[FieldMatrixPreservingVisitor~visit~I~I~QT;"
"d",\N
"column",\N
"row",\N
"visitor",\N
"outerProduct","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~outerProduct~QRealVector;"
"increment",\N
"column",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~copy"
"BlockFieldMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix"
"v",\N
"value",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~add~QFieldMatrix\\<QT;>;"
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~set~D"
"createMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~createMatrix~I~I"
"AnyMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AnyMatrix.java[AnyMatrix"
"m",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AnyMatrix.java[AnyMatrix~getColumnDimension"
"value",\N
"rowDimension",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~add~QBlockFieldMatrix\\<QT;>;"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~toArray"
"columnDimension",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AnyMatrix.java[AnyMatrix~getRowDimension"
"m",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~getColumnDimension"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~toString"
"isSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AnyMatrix.java[AnyMatrix~isSquare"
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~walkInDefaultOrder~QRealVectorPreservingVisitor;"
"getEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~getEntry~I~I"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~copy"
"RealVectorChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorChangingVisitor.java[RealVectorChangingVisitor"
"visitor",\N
"row",\N
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~getColumnDimension"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorChangingVisitor.java[RealVectorChangingVisitor~end"
"column",\N
"walkInDefaultOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~walkInDefaultOrder~QRealVectorChangingVisitor;"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~getData"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~getRowDimension"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorChangingVisitor.java[RealVectorChangingVisitor~start~I~I~I"
"visitor",\N
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~getRowDimension"
"multiplyEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~multiplyEntry~I~I~QT;"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~walkInOptimizedOrder~QRealVectorPreservingVisitor;"
"dimension",\N
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~scalarAdd~QT;"
"start",\N
"row",\N
"visitor",\N
"end",\N
"column",\N
"d",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{ArrayRealVector.java[ArrayRealVector~walkInOptimizedOrder~QRealVectorChangingVisitor;"
"visitor",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealVectorChangingVisitor.java[RealVectorChangingVisitor~visit~I~D"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~scalarMultiply~QT;"
"factor",\N
"NonPositiveDefiniteOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteOperatorException.java[NonPositiveDefiniteOperatorException"
"d",\N
"index",\N
"setEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseFieldMatrix.java[SparseFieldMatrix~setEntry~I~I~QT;"
"NonPositiveDefiniteOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{NonPositiveDefiniteOperatorException.java[NonPositiveDefiniteOperatorException~NonPositiveDefiniteOperatorException"
"value",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~subtract~QFieldMatrix\\<QT;>;"
"row",\N
"RealMatrixPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixPreservingVisitor.java[RealMatrixPreservingVisitor"
"DefaultFieldMatrixPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixPreservingVisitor.java[DefaultFieldMatrixPreservingVisitor"
"column",\N
"m",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixPreservingVisitor.java[RealMatrixPreservingVisitor~end"
"DefaultFieldMatrixPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixPreservingVisitor.java[DefaultFieldMatrixPreservingVisitor~DefaultFieldMatrixPreservingVisitor~QT;"
"value",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~subtract~QBlockFieldMatrix\\<QT;>;"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixPreservingVisitor.java[RealMatrixPreservingVisitor~start~I~I~I~I~I~I"
"zero",\N
"IterativeLinearSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolver.java[IterativeLinearSolver"
"m",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixPreservingVisitor.java[DefaultFieldMatrixPreservingVisitor~end"
"IterativeLinearSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolver.java[IterativeLinearSolver~IterativeLinearSolver~I"
"rows",\N
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~transpose"
"columns",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixPreservingVisitor.java[DefaultFieldMatrixPreservingVisitor~start~I~I~I~I~I~I"
"maxIterations",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~walkInOptimizedOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"startRow",\N
"TriDiagonalTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer"
"rows",\N
"endRow",\N
"visitor",\N
"TriDiagonalTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~TriDiagonalTransformer~QRealMatrix;"
"columns",\N
"startColumn",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~walkInOptimizedOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"startRow",\N
"endColumn",\N
"matrix",\N
"endRow",\N
"visitor",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrixPreservingVisitor.java[RealMatrixPreservingVisitor~visit~I~I~D"
"getHouseholderVectorsRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getHouseholderVectorsRef"
"startColumn",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~walkInRowOrder~QFieldMatrixChangingVisitor\\<QT;>;"
"row",\N
"getMainDiagonalRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getMainDiagonalRef"
"endColumn",\N
"visitor",\N
"column",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultFieldMatrixPreservingVisitor.java[DefaultFieldMatrixPreservingVisitor~visit~I~I~QT;"
"getQ","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getQ"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix~walkInRowOrder~QFieldMatrixPreservingVisitor\\<QT;>;"
"value",\N
"row",\N
"getQT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getQT"
"visitor",\N
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector"
"column",\N
"BLOCK_SIZE","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockFieldMatrix.java[BlockFieldMatrix^BLOCK_SIZE"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector"
"getSecondaryDiagonalRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getSecondaryDiagonalRef"
"value",\N
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~I"
"SingularOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularOperatorException.java[SingularOperatorException"
"MatrixDimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException"
"getT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{TriDiagonalTransformer.java[TriDiagonalTransformer~getT"
"SingularOperatorException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularOperatorException.java[SingularOperatorException~SingularOperatorException"
"MatrixDimensionMismatchException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException~MatrixDimensionMismatchException~I~I~I~I"
"dimension",\N
"PreconditionedIterativeLinearSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{PreconditionedIterativeLinearSolver.java[PreconditionedIterativeLinearSolver"
"wrongRowDim",\N
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~I~D"
"SingularValueDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition"
"PreconditionedIterativeLinearSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{PreconditionedIterativeLinearSolver.java[PreconditionedIterativeLinearSolver~PreconditionedIterativeLinearSolver~I"
"wrongColDim",\N
"SingularValueDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~SingularValueDecomposition~QRealMatrix;"
"dimension",\N
"maxIterations",\N
"expectedRowDim",\N
"epsilon",\N
"matrix",\N
"CholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition"
"expectedColDim",\N
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~QOpenMapRealVector;~I"
"getConditionNumber","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getConditionNumber"
"CholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~CholeskyDecomposition~QRealMatrix;"
"getExpectedColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException~getExpectedColumnDimension"
"v",\N
"matrix",\N
"getCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getCovariance~D"
"getExpectedRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException~getExpectedRowDimension"
"resize",\N
"CholeskyDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~CholeskyDecomposition~QRealMatrix;~D~D"
"minSingularValue",\N
"getWrongColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException~getWrongColumnDimension"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~I~I"
"matrix",\N
"getInverseConditionNumber","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getInverseConditionNumber"
"dimension",\N
"getWrongRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixDimensionMismatchException.java[MatrixDimensionMismatchException~getWrongRowDimension"
"relativeSymmetryThreshold",\N
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getNorm"
"expectedSize",\N
"absolutePositivityThreshold",\N
"BlockRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~I~I~D"
"getRank","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getRank"
"getDeterminant","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~getDeterminant"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~add~QRealMatrix;"
"dimension",\N
"getL","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~getL"
"getS","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getS"
"m",\N
"expectedSize",\N
"getLT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~getLT"
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~add~QBlockRealMatrix;"
"getSingularValues","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getSingularValues"
"epsilon",\N
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~\\[D"
"m",\N
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition~getSolver"
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getSolver"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~copy"
"values",\N
"getU","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getU"
"DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition^DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~\\[D~D"
"createBlocksLayout","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~createBlocksLayout~I~I"
"DEFAULT_RELATIVE_SYMMETRY_THRESHOLD","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition^DEFAULT_RELATIVE_SYMMETRY_THRESHOLD"
"getUT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getUT"
"values",\N
"rows",\N
"getV","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getV"
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition[Solver"
"epsilon",\N
"columns",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition[Solver~getInverse"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~\\[QDouble;"
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~getColumnDimension"
"getVT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition~getVT"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition[Solver~isNonSingular"
"values",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~getData"
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition[Solver"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~\\[QDouble;~D"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition[Solver~solve~QRealVector;"
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition[Solver~getInverse"
"getFrobeniusNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~getFrobeniusNorm"
"values",\N
"b",\N
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition[Solver~isNonSingular"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~getNorm"
"epsilon",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{CholeskyDecomposition.java[CholeskyDecomposition[Solver~solve~QRealMatrix;"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition[Solver~solve~QRealVector;"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~QOpenMapRealVector;"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~getRowDimension"
"b",\N
"b",\N
"v",\N
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~scalarAdd~D"
"AbstractRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularValueDecomposition.java[SingularValueDecomposition[Solver~solve~QRealMatrix;"
"OpenMapRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~OpenMapRealVector~QRealVector;"
"AbstractRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~AbstractRealMatrix"
"d",\N
"b",\N
"v",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~add~QRealMatrix;"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~scalarMultiply~D"
"IterativeLinearSolverEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~append~QOpenMapRealVector;"
"d",\N
"m",\N
"IterativeLinearSolverEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~IterativeLinearSolverEvent~QObject;~I"
"v",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~copy"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~subtract~QRealMatrix;"
"source",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~append~QRealVector;"
"iterations",\N
"m",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~equals~QObject;"
"v",\N
"getNormOfResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~getNormOfResidual"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~subtract~QBlockRealMatrix;"
"object",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~append~D"
"m",\N
"getResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~getResidual"
"getColumnDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getColumnDimension"
"d",\N
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~transpose"
"getRightHandSideVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~getRightHandSideVector"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getData"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~copy"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~walkInOptimizedOrder~QRealMatrixChangingVisitor;"
"getSolution","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~getSolution"
"getFrobeniusNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getFrobeniusNorm"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~equals~QObject;"
"visitor",\N
"providesResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{IterativeLinearSolverEvent.java[IterativeLinearSolverEvent~providesResidual"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getNorm"
"obj",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~walkInOptimizedOrder~QRealMatrixPreservingVisitor;"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~getDimension"
"getRowDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getRowDimension"
"RealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix"
"visitor",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~add~QRealMatrix;"
"getSparsity","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~getSparsity"
"getTrace","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~getTrace"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~walkInRowOrder~QRealMatrixChangingVisitor;"
"m",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~hashCode"
"visitor",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~hashCode"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~copy"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix~walkInRowOrder~QRealMatrixPreservingVisitor;"
"isDefaultValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~isDefaultValue~D"
"isSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~isSquare"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~getData"
"visitor",\N
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~scalarAdd~D"
"value",\N
"BLOCK_SIZE","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BlockRealMatrix.java[BlockRealMatrix^BLOCK_SIZE"
"getFrobeniusNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~getFrobeniusNorm"
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~isInfinite"
"d",\N
"BiDiagonalTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer"
"getNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~getNorm"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~scalarMultiply~D"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~isNaN"
"BiDiagonalTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~BiDiagonalTransformer~QRealMatrix;"
"getTrace","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~getTrace"
"d",\N
"mapAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~mapAdd~D"
"matrix",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~subtract~QRealMatrix;"
"scalarAdd","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~scalarAdd~D"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getB"
"d",\N
"m",\N
"d",\N
"mapAddToSelf","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~mapAddToSelf~D"
"getHouseholderVectorsRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getHouseholderVectorsRef"
"scalarMultiply","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~scalarMultiply~D"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~toString"
"d",\N
"getMainDiagonalRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getMainDiagonalRef"
"d",\N
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~transpose"
"set","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~set~D"
"getSecondaryDiagonalRef","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getSecondaryDiagonalRef"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~subtract~QRealMatrix;"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInColumnOrder~QRealMatrixChangingVisitor;"
"value",\N
"m",\N
"getU","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getU"
"sparseIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~sparseIterator"
"visitor",\N
"transpose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~transpose"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInColumnOrder~QRealMatrixPreservingVisitor;"
"getV","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~getV"
"toArray","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector~toArray"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInColumnOrder~QRealMatrixChangingVisitor;"
"visitor",\N
"isUpperBiDiagonal","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{BiDiagonalTransformer.java[BiDiagonalTransformer~isUpperBiDiagonal"
"DEFAULT_ZERO_TOLERANCE","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector^DEFAULT_ZERO_TOLERANCE"
"visitor",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInOptimizedOrder~QRealMatrixChangingVisitor;"
"OpenMapEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapEntry"
"EigenDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition"
"walkInColumnOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInColumnOrder~QRealMatrixPreservingVisitor;"
"visitor",\N
"getIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapEntry~getIndex"
"EigenDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~EigenDecomposition~\\[D~\\[D"
"visitor",\N
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInOptimizedOrder~QRealMatrixPreservingVisitor;"
"main",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapEntry~getValue"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInOptimizedOrder~QRealMatrixChangingVisitor;"
"visitor",\N
"secondary",\N
"setValue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapEntry~setValue~D"
"visitor",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInRowOrder~QRealMatrixChangingVisitor;"
"EigenDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~EigenDecomposition~\\[D~\\[D~D"
"walkInOptimizedOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInOptimizedOrder~QRealMatrixPreservingVisitor;"
"value",\N
"visitor",\N
"main",\N
"OpenMapSparseIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapSparseIterator"
"visitor",\N
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{AbstractRealMatrix.java[AbstractRealMatrix~walkInRowOrder~QRealMatrixPreservingVisitor;"
"secondary",\N
"OpenMapSparseIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapSparseIterator~OpenMapSparseIterator"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInRowOrder~QRealMatrixChangingVisitor;"
"splitTolerance",\N
"visitor",\N
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapSparseIterator~hasNext"
"getD","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getD"
"visitor",\N
"MatrixUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils"
"walkInRowOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{RealMatrix.java[RealMatrix~walkInRowOrder~QRealMatrixPreservingVisitor;"
"blockInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~blockInverse~QRealMatrix;~I"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapSparseIterator~next"
"getDeterminant","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getDeterminant"
"visitor",\N
"m",\N
"getEigenvector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getEigenvector~I"
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{OpenMapRealVector.java[OpenMapRealVector[OpenMapSparseIterator~remove"
"splitIndex",\N
"DefaultIterativeLinearSolverEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent"
"i",\N
"SingularMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularMatrixException.java[SingularMatrixException"
"checkAdditionCompatible","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~checkAdditionCompatible~QAnyMatrix;~QAnyMatrix;"
"DefaultIterativeLinearSolverEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~DefaultIterativeLinearSolverEvent~QObject;~I~QRealVector;~QRealVector;~QRealVector;~D"
"SingularMatrixException","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SingularMatrixException.java[SingularMatrixException~SingularMatrixException"
"getImagEigenvalue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getImagEigenvalue~I"
"left",\N
"source",\N
"i",\N
"iterations",\N
"right",\N
"SparseRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{SparseRealVector.java[SparseRealVector"
"getImagEigenvalues","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getImagEigenvalues"
"x",\N
"checkSubtractionCompatible","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~checkSubtractionCompatible~QAnyMatrix;~QAnyMatrix;"
"DefaultRealMatrixPreservingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixPreservingVisitor.java[DefaultRealMatrixPreservingVisitor"
"b",\N
"getRealEigenvalue","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getRealEigenvalue~I"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixPreservingVisitor.java[DefaultRealMatrixPreservingVisitor~end"
"left",\N
"r",\N
"right",\N
"i",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixPreservingVisitor.java[DefaultRealMatrixPreservingVisitor~start~I~I~I~I~I~I"
"rnorm",\N
"checkSymmetric","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~checkSymmetric~QRealMatrix;~D"
"getRealEigenvalues","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getRealEigenvalues"
"DefaultIterativeLinearSolverEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~DefaultIterativeLinearSolverEvent~QObject;~I~QRealVector;~QRealVector;~D"
"rows",\N
"matrix",\N
"columns",\N
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getSolver"
"source",\N
"eps",\N
"startRow",\N
"iterations",\N
"getSquareRoot","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getSquareRoot"
"createFieldDiagonalMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~createFieldDiagonalMatrix~\\[QT;"
"endRow",\N
"x",\N
"startColumn",\N
"getV","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getV"
"b",\N
"diagonal",\N
"endColumn",\N
"rnorm",\N
"createRealDiagonalMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~createRealDiagonalMatrix~\\[D"
"getVT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~getVT"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultRealMatrixPreservingVisitor.java[DefaultRealMatrixPreservingVisitor~visit~I~I~D"
"getNormOfResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~getNormOfResidual"
"diagonal",\N
"hasComplexEigenvalues","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition~hasComplexEigenvalues"
"row",\N
"getResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~getResidual"
"createRealIdentityMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~createRealIdentityMatrix~I"
"column",\N
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition[Solver"
"dimension",\N
"getRightHandSideVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~getRightHandSideVector"
"value",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition[Solver~getInverse"
"createRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~createRealMatrix~I~I"
"FieldMatrixChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixChangingVisitor.java[FieldMatrixChangingVisitor"
"getSolution","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~getSolution"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition[Solver~isNonSingular"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixChangingVisitor.java[FieldMatrixChangingVisitor~end"
"rows",\N
"providesResidual","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DefaultIterativeLinearSolverEvent.java[DefaultIterativeLinearSolverEvent~providesResidual"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition[Solver~solve~QRealVector;"
"columns",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixChangingVisitor.java[FieldMatrixChangingVisitor~start~I~I~I~I~I~I"
"deserializeRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~deserializeRealMatrix~QObject;~QString;~QObjectInputStream;"
"FieldVectorChangingVisitor","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorChangingVisitor.java[FieldVectorChangingVisitor"
"b",\N
"rows",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorChangingVisitor.java[FieldVectorChangingVisitor~end"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{EigenDecomposition.java[EigenDecomposition[Solver~solve~QRealMatrix;"
"instance",\N
"columns",\N
"fieldName",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorChangingVisitor.java[FieldVectorChangingVisitor~start~I~I~I"
"startRow",\N
"b",\N
"ois",\N
"endRow",\N
"FieldLUDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition"
"dimension",\N
"deserializeRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~deserializeRealVector~QObject;~QString;~QObjectInputStream;"
"startColumn",\N
"FieldLUDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~FieldLUDecomposition~QFieldMatrix\\<QT;>;"
"start",\N
"endColumn",\N
"instance",\N
"end",\N
"matrix",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldMatrixChangingVisitor.java[FieldMatrixChangingVisitor~visit~I~I~QT;"
"fieldName",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldVectorChangingVisitor.java[FieldVectorChangingVisitor~visit~I~QT;"
"getDeterminant","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getDeterminant"
"ois",\N
"row",\N
"index",\N
"getL","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getL"
"isSymmetric","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~isSymmetric~QRealMatrix;~D"
"column",\N
"value",\N
"value",\N
"getP","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getP"
"matrix",\N
"QRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition"
"eps",\N
"DecompositionSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DecompositionSolver.java[DecompositionSolver"
"QRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~QRDecomposition~QRealMatrix;"
"getPivot","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getPivot"
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DecompositionSolver.java[DecompositionSolver~getInverse"
"serializeRealMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~serializeRealMatrix~QRealMatrix;~QObjectOutputStream;"
"matrix",\N
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getSolver"
"matrix",\N
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DecompositionSolver.java[DecompositionSolver~isNonSingular"
"QRDecomposition","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~QRDecomposition~QRealMatrix;~D"
"getU","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition~getU"
"oos",\N
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DecompositionSolver.java[DecompositionSolver~solve~QRealVector;"
"matrix",\N
"serializeRealVector","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils~serializeRealVector~QRealVector;~QObjectOutputStream;"
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver"
"threshold",\N
"b",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver~getInverse"
"vector",\N
"decompose","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~decompose~\\[\\[D"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{DecompositionSolver.java[DecompositionSolver~solve~QRealMatrix;"
"oos",\N
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver~isNonSingular"
"DEFAULT_FORMAT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils^DEFAULT_FORMAT"
"b",\N
"matrix",\N
"OCTAVE_FORMAT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils^OCTAVE_FORMAT"
"getH","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~getH"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver~solve~QFieldVector\\<QT;>;"
"DBSCANClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DBSCANClusterer.java[DBSCANClusterer"
"FractionMatrixConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[FractionMatrixConverter"
"getQ","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~getQ"
"b",\N
"getEps","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DBSCANClusterer.java[DBSCANClusterer~getEps"
"FractionMatrixConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[FractionMatrixConverter~FractionMatrixConverter"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver~solve~QArrayFieldVector\\<QT;>;"
"getQT","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~getQT"
"getMinPts","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DBSCANClusterer.java[DBSCANClusterer~getMinPts"
"getConvertedMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[FractionMatrixConverter~getConvertedMatrix"
"b",\N
"getR","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~getR"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{FieldLUDecomposition.java[FieldLUDecomposition[Solver~solve~QFieldMatrix\\<QT;>;"
"MultiKMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClusterer.java[MultiKMeansPlusPlusClusterer"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[FractionMatrixConverter~start~I~I~I~I~I~I"
"getSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~getSolver"
"MultiKMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClusterer.java[MultiKMeansPlusPlusClusterer~MultiKMeansPlusPlusClusterer~QKMeansPlusPlusClusterer\\<QT;>;~I"
"b",\N
"rows",\N
"performHouseholderReflection","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition~performHouseholderReflection~I~\\[\\[D"
"clusterer",\N
"Clusterable","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Clusterable.java[Clusterable"
"columns",\N
"numTrials",\N
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Clusterable.java[Clusterable~getPoint"
"startRow",\N
"minor",\N
"getClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClusterer.java[MultiKMeansPlusPlusClusterer~getClusterer"
"matrix",\N
"endRow",\N
"KMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer"
"startColumn",\N
"Solver","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition[Solver"
"KMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer~KMeansPlusPlusClusterer~I"
"getNumTrials","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClusterer.java[MultiKMeansPlusPlusClusterer~getNumTrials"
"endColumn",\N
"getInverse","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition[Solver~getInverse"
"k",\N
"Clusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Clusterer.java[Clusterer"
"BigFractionMatrixConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[BigFractionMatrixConverter"
"isNonSingular","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition[Solver~isNonSingular"
"distance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Clusterer.java[Clusterer~distance~QClusterable;~QClusterable;"
"KMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer~KMeansPlusPlusClusterer~I~I"
"BigFractionMatrixConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[BigFractionMatrixConverter~BigFractionMatrixConverter"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition[Solver~solve~QRealVector;"
"k",\N
"p1",\N
"getConvertedMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[BigFractionMatrixConverter~getConvertedMatrix"
"maxIterations",\N
"p2",\N
"b",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{MatrixUtils.java[MatrixUtils[BigFractionMatrixConverter~start~I~I~I~I~I~I"
"getK","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer~getK"
"solve","=mathmain3.6/src<main.java.org.apache.commons.math3.linear{QRDecomposition.java[QRDecomposition[Solver~solve~QRealMatrix;"
"DoublePoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint"
"rows",\N
"DoublePoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~DoublePoint~\\[D"
"b",\N
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer~getMaxIterations"
"columns",\N
"point",\N
"CentroidCluster","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{CentroidCluster.java[CentroidCluster"
"startRow",\N
"Cluster","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Cluster.java[Cluster"
"CentroidCluster","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{CentroidCluster.java[CentroidCluster~CentroidCluster~QClusterable;"
"DoublePoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~DoublePoint~\\[I"
"endRow",\N
"Cluster","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Cluster.java[Cluster~Cluster"
"startColumn",\N
"point",\N
"center",\N
"endColumn",\N
"addPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Cluster.java[Cluster~addPoint~QT;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~equals~QObject;"
"getCenter","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{CentroidCluster.java[CentroidCluster~getCenter"
"FuzzyKMeansClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer"
"point",\N
"other",\N
"SumOfClusterVariances","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering.evaluation{SumOfClusterVariances.java[SumOfClusterVariances"
"getClusters","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getClusters"
"getPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{Cluster.java[Cluster~getPoints"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~getPoint"
"ClusterEvaluator","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering.evaluation{ClusterEvaluator.java[ClusterEvaluator"
"getDataPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getDataPoints"
"ClusterEvaluator","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering.evaluation{ClusterEvaluator.java[ClusterEvaluator~ClusterEvaluator"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~hashCode"
"ChebyshevDistance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{ChebyshevDistance.java[ChebyshevDistance"
"getEpsilon","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getEpsilon"
"isBetterScore","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering.evaluation{ClusterEvaluator.java[ClusterEvaluator~isBetterScore~D~D"
"DistanceMeasure","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{DistanceMeasure.java[DistanceMeasure"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{DoublePoint.java[DoublePoint~toString"
"getFuzziness","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getFuzziness"
"EuclideanDistance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{EuclideanDistance.java[EuclideanDistance"
"score1",\N
"CanberraDistance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{CanberraDistance.java[CanberraDistance"
"EarthMoversDistance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{EarthMoversDistance.java[EarthMoversDistance"
"score2",\N
"getK","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getK"
"ManhattanDistance","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.distance{ManhattanDistance.java[ManhattanDistance"
"FeatureInitializer","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{FeatureInitializer.java[FeatureInitializer"
"Neuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron"
"Network","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network"
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getMaxIterations"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{FeatureInitializer.java[FeatureInitializer~value"
"Neuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~Neuron~J~\\[D"
"Network","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~Network~J~I~\\[QNeuron;~\\[\\[J"
"getObjectiveFunctionValue","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClusterer.java[FuzzyKMeansClusterer~getObjectiveFunctionValue"
"identifier",\N
"MapUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{MapUtils.java[MapUtils"
"nextId",\N
"features",\N
"PairNeuronDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{MapUtils.java[MapUtils[PairNeuronDouble"
"UpdateAction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{UpdateAction.java[UpdateAction"
"featureSize",\N
"PairNeuronDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{MapUtils.java[MapUtils[PairNeuronDouble~PairNeuronDouble~QNeuron;~D"
"compareAndSetFeatures","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~compareAndSetFeatures~\\[D~\\[D"
"update","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{UpdateAction.java[UpdateAction~update~QNetwork;~\\[D"
"neuronList",\N
"neuron",\N
"neighbourIdList",\N
"expect",\N
"net",\N
"value",\N
"update",\N
"Network","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~Network~J~I"
"features",\N
"getNeuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{MapUtils.java[MapUtils[PairNeuronDouble~getNeuron"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~copy"
"FeatureInitializerFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{FeatureInitializerFactory.java[FeatureInitializerFactory"
"initialIdentifier",\N
"uniform","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{FeatureInitializerFactory.java[FeatureInitializerFactory~uniform~D~D"
"featureSize",\N
"COMPARATOR","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{MapUtils.java[MapUtils[PairNeuronDouble^COMPARATOR"
"getFeatures","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~getFeatures"
"addLink","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~addLink~QNeuron;~QNeuron;"
"min",\N
"getIdentifier","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~getIdentifier"
"NeuronString","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString"
"max",\N
"a",\N
"NeuronString","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString~NeuronString~Z~\\[\\[D"
"getNumberOfAttemptedUpdates","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~getNumberOfAttemptedUpdates"
"b",\N
"KohonenTrainingTask","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenTrainingTask.java[KohonenTrainingTask"
"wrap",\N
"getNumberOfSuccessfulUpdates","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~getNumberOfSuccessfulUpdates"
"run","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenTrainingTask.java[KohonenTrainingTask~run"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~copy"
"featuresList",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron~getSize"
"createNeuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~createNeuron~\\[D"
"getFeatures","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString~getFeatures~I"
"KohonenUpdateAction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenUpdateAction.java[KohonenUpdateAction"
"getNumberOfCalls","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenUpdateAction.java[KohonenUpdateAction~getNumberOfCalls"
"features",\N
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron[SerializationProxy"
"i",\N
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Neuron.java[Neuron[SerializationProxy~SerializationProxy~J~\\[D"
"deleteLink","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~deleteLink~QNeuron;~QNeuron;"
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString~getSize"
"LearningFactorFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunction.java[LearningFactorFunction"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunction.java[LearningFactorFunction~value~J"
"a",\N
"identifier",\N
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString[SerializationProxy"
"features",\N
"b",\N
"numCall",\N
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronString.java[NeuronString[SerializationProxy~SerializationProxy~Z~\\[\\[D"
"deleteNeuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~deleteNeuron~QNeuron;"
"NeighbourhoodSizeFunctionFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactory.java[NeighbourhoodSizeFunctionFactory"
"NeighbourhoodSizeFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunction.java[NeighbourhoodSizeFunction"
"wrap",\N
"exponentialDecay","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactory.java[NeighbourhoodSizeFunctionFactory~exponentialDecay~D~D~J"
"neuron",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunction.java[NeighbourhoodSizeFunction~value~J"
"featuresList",\N
"getFeaturesSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getFeaturesSize"
"initValue",\N
"LearningFactorFunctionFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactory.java[LearningFactorFunctionFactory"
"numCall",\N
"valueAtNumCall",\N
"exponentialDecay","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactory.java[LearningFactorFunctionFactory~exponentialDecay~D~D~J"
"getNeighbours","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeighbours~QIterable\\<QNeuron;>;"
"ExponentialDecayFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunction.java[ExponentialDecayFunction"
"numCall",\N
"ExponentialDecayFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunction.java[ExponentialDecayFunction~ExponentialDecayFunction~D~D~J"
"initValue",\N
"neurons",\N
"quasiSigmoidDecay","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactory.java[NeighbourhoodSizeFunctionFactory~quasiSigmoidDecay~D~D~J"
"valueAtNumCall",\N
"initValue",\N
"getNeighbours","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeighbours~QIterable\\<QNeuron;>;~QIterable\\<QNeuron;>;"
"initValue",\N
"numCall",\N
"valueAtNumCall",\N
"neurons",\N
"slope",\N
"quasiSigmoidDecay","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactory.java[LearningFactorFunctionFactory~quasiSigmoidDecay~D~D~J"
"numCall",\N
"exclude",\N
"numCall",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunction.java[ExponentialDecayFunction~value~J"
"initValue",\N
"getNeighbours","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeighbours~QNeuron;"
"QuasiSigmoidDecayFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunction.java[QuasiSigmoidDecayFunction"
"slope",\N
"numCall",\N
"QuasiSigmoidDecayFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunction.java[QuasiSigmoidDecayFunction~QuasiSigmoidDecayFunction~D~D~J"
"neuron",\N
"numCall",\N
"getNeighbours","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeighbours~QNeuron;~QIterable\\<QNeuron;>;"
"initValue",\N
"NeuronSquareMesh2D","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2D.java[NeuronSquareMesh2D"
"MapVisualization","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{MapVisualization.java[MapVisualization"
"slope",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2D.java[NeuronSquareMesh2D~copy"
"neuron",\N
"SmoothedDataHistogram","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{SmoothedDataHistogram.java[SmoothedDataHistogram"
"numCall",\N
"exclude",\N
"getNumberOfColumns","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2D.java[NeuronSquareMesh2D~getNumberOfColumns"
"TopographicErrorHistogram","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{TopographicErrorHistogram.java[TopographicErrorHistogram"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunction.java[QuasiSigmoidDecayFunction~value~J"
"getNeuron","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeuron~J"
"UnifiedDistanceMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{UnifiedDistanceMatrix.java[UnifiedDistanceMatrix"
"getNumberOfRows","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2D.java[NeuronSquareMesh2D~getNumberOfRows"
"numCall",\N
"id",\N
"MapDataVisualization","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{MapDataVisualization.java[MapDataVisualization"
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2D.java[NeuronSquareMesh2D[SerializationProxy"
"LocationFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinder.java[LocationFinder"
"getNeurons","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~getNeurons~QComparator\\<QNeuron;>;"
"QuantizationError","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{QuantizationError.java[QuantizationError"
"Location","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinder.java[LocationFinder[Location"
"HitHistogram","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{HitHistogram.java[HitHistogram"
"comparator",\N
"ParameterJacobianWrapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterJacobianWrapper.java[ParameterJacobianWrapper"
"SecondaryEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondaryEquations.java[SecondaryEquations"
"Location","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinder.java[LocationFinder[Location~Location~I~I"
"ParameterJacobianWrapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterJacobianWrapper.java[ParameterJacobianWrapper~ParameterJacobianWrapper~QFirstOrderDifferentialEquations;~QParameterizedODE;~\\[QParameterConfiguration;"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network~iterator"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondaryEquations.java[SecondaryEquations~getDimension"
"row",\N
"fode",\N
"NeuronIdentifierComparator","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network[NeuronIdentifierComparator"
"FirstOrderDifferentialEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderDifferentialEquations.java[FirstOrderDifferentialEquations"
"column",\N
"pode",\N
"compare","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network[NeuronIdentifierComparator~compare~QNeuron;~QNeuron;"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderDifferentialEquations.java[FirstOrderDifferentialEquations~getDimension"
"getColumn","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinder.java[LocationFinder[Location~getColumn"
"paramsAndSteps",\N
"a",\N
"MainStateJacobianProvider","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MainStateJacobianProvider.java[MainStateJacobianProvider"
"getParametersNames","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterJacobianWrapper.java[ParameterJacobianWrapper~getParametersNames"
"getRow","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinder.java[LocationFinder[Location~getRow"
"b",\N
"FieldSecondaryEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldSecondaryEquations.java[FieldSecondaryEquations"
"isSupported","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterJacobianWrapper.java[ParameterJacobianWrapper~isSupported~QString;"
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network[SerializationProxy"
"ParameterJacobianProvider","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterJacobianProvider.java[ParameterJacobianProvider"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldSecondaryEquations.java[FieldSecondaryEquations~getDimension"
"SerializationProxy","=mathmain3.6/src<main.java.org.apache.commons.math3.ml.neuralnet{Network.java[Network[SerializationProxy~SerializationProxy~J~I~\\[QNeuron;~\\[\\[J"
"FieldExpandableODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldExpandableODE.java[FieldExpandableODE"
"name",\N
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldSecondaryEquations.java[FieldSecondaryEquations~init~QT;~\\[QT;~\\[QT;~QT;"
"FieldExpandableODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldExpandableODE.java[FieldExpandableODE~FieldExpandableODE~QFirstOrderFieldDifferentialEquations\\<QT;>;"
"nextId",\N
"AbstractParameterizable","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable"
"t0",\N
"primary",\N
"featureSize",\N
"AbstractParameterizable","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable~AbstractParameterizable~\\[QString;"
"primary0",\N
"neuronList",\N
"addSecondaryEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldExpandableODE.java[FieldExpandableODE~addSecondaryEquations~QFieldSecondaryEquations\\<QT;>;"
"names",\N
"secondary0",\N
"neighbourIdList",\N
"secondary",\N
"AbstractParameterizable","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable~AbstractParameterizable~QCollection\\<QString;>;"
"finalTime",\N
"AbstractIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator"
"getMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldExpandableODE.java[FieldExpandableODE~getMapper"
"FieldEquationsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper"
"names",\N
"AbstractIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~AbstractIntegrator~QString;"
"FieldEquationsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper~FieldEquationsMapper~QFieldEquationsMapper\\<QT;>;~I"
"complainIfNotSupported","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable~complainIfNotSupported~QString;"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldExpandableODE.java[FieldExpandableODE~init~QT;~\\[QT;~QT;"
"name",\N
"mapper",\N
"name",\N
"t0",\N
"AbstractIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~AbstractIntegrator"
"dimension",\N
"y0",\N
"getParametersNames","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable~getParametersNames"
"clearEventHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~clearEventHandlers"
"getNumberOfEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper~getNumberOfEquations"
"finalTime",\N
"isSupported","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractParameterizable.java[AbstractParameterizable~isSupported~QString;"
"clearStepHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~clearStepHandlers"
"ODEIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator"
"getTotalDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper~getTotalDimension"
"name",\N
"clearEventHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~clearEventHandlers"
"getCurrentSignedStepsize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getCurrentSignedStepsize"
"mapDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper~mapDerivative~QFieldODEStateAndDerivative\\<QT;>;"
"SecondOrderIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondOrderIntegrator.java[SecondOrderIntegrator"
"clearStepHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~clearStepHandlers"
"getCurrentStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getCurrentStepStart"
"state",\N
"ContinuousOutputFieldModel","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel"
"getCurrentSignedStepsize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~getCurrentSignedStepsize"
"mapState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldEquationsMapper.java[FieldEquationsMapper~mapState~QFieldODEState\\<QT;>;"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getEvaluations"
"ContinuousOutputFieldModel","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel~ContinuousOutputFieldModel"
"getCurrentStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~getCurrentStepStart"
"state",\N
"getExpandable","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getExpandable"
"getFinalTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel~getFinalTime"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~getEvaluations"
"JacobianMatrices","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getMaxEvaluations"
"getInitialTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel~getInitialTime"
"JacobianMatrices","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~JacobianMatrices~QMainStateJacobianProvider;~\\[QString;"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~getMaxEvaluations"
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~getName"
"getInterpolatedState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel~getInterpolatedState~QT;"
"jode",\N
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~getName"
"initIntegration","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~initIntegration~D~\\[D~D"
"time",\N
"parameters",\N
"addParameterJacobianProvider","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~addParameterJacobianProvider~QParameterJacobianProvider;"
"setMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ODEIntegrator.java[ODEIntegrator~setMaxEvaluations~I"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputFieldModel.java[ContinuousOutputFieldModel~init~QFieldODEStateAndDerivative\\<QT;>;~QT;"
"t0",\N
"y0",\N
"initialState",\N
"provider",\N
"maxEvaluations",\N
"t",\N
"t",\N
"getCurrentMainSetJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~getCurrentMainSetJacobian~\\[\\[D"
"ContinuousOutputModel","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel"
"setEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~setEquations~QExpandableStatefulODE;"
"ContinuousOutputModel","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~ContinuousOutputModel"
"MultistepIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator"
"dYdY0",\N
"equations",\N
"MultistepIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~MultistepIntegrator~QString;~I~I~D~D~\\[D~\\[D"
"getFinalTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~getFinalTime"
"getCurrentParameterJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~getCurrentParameterJacobian~QString;~\\[D"
"setMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~setMaxEvaluations~I"
"name",\N
"pName",\N
"getInitialTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~getInitialTime"
"nSteps",\N
"maxEvaluations",\N
"dYdP",\N
"getInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~getInterpolatedTime"
"order",\N
"setStateInitialized","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator~setStateInitialized~Z"
"setParameterStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~setParameterStep~QString;~D"
"minStep",\N
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~init~D~\\[D~D"
"stateInitialized",\N
"parameter",\N
"maxStep",\N
"isLastStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator^isLastStep"
"hP",\N
"t0",\N
"vecAbsoluteTolerance",\N
"y0",\N
"setParameterizedODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices~setParameterizedODE~QParameterizedODE;"
"vecRelativeTolerance",\N
"resetOccurred","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator^resetOccurred"
"t",\N
"computeStepGrowShrinkFactor","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~computeStepGrowShrinkFactor~D"
"parameterizedOde",\N
"stepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator^stepSize"
"setInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ContinuousOutputModel.java[ContinuousOutputModel~setInterpolatedTime~D"
"JacobiansSecondaryEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[JacobiansSecondaryEquations"
"error",\N
"stepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractIntegrator.java[AbstractIntegrator^stepStart"
"time",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[JacobiansSecondaryEquations~getDimension"
"getMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~getMaxGrowth"
"EquationsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{EquationsMapper.java[EquationsMapper"
"MainStateJacobianWrapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[MainStateJacobianWrapper"
"SecondOrderDifferentialEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondOrderDifferentialEquations.java[SecondOrderDifferentialEquations"
"getMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~getMinReduction"
"EquationsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{EquationsMapper.java[EquationsMapper~EquationsMapper~I~I"
"computeSecondDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondOrderDifferentialEquations.java[SecondOrderDifferentialEquations~computeSecondDerivatives~D~\\[D~\\[D~\\[D"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[MainStateJacobianWrapper~getDimension"
"getNSteps","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~getNSteps"
"firstIndex",\N
"t",\N
"MismatchedEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[MismatchedEquations"
"dimension",\N
"getSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~getSafety"
"y",\N
"MismatchedEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{JacobianMatrices.java[JacobianMatrices[MismatchedEquations~MismatchedEquations"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{EquationsMapper.java[EquationsMapper~getDimension"
"yDot",\N
"getStarterIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~getStarterIntegrator"
"ParameterizedWrapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper"
"yDDot",\N
"getFirstIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{EquationsMapper.java[EquationsMapper~getFirstIndex"
"ParameterizedWrapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~ParameterizedWrapper~QFirstOrderDifferentialEquations;"
"setMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~setMaxGrowth~D"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{SecondOrderDifferentialEquations.java[SecondOrderDifferentialEquations~getDimension"
"FirstOrderFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator"
"ode",\N
"maxGrowth",\N
"MultistepFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator"
"clearEventHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~clearEventHandlers"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~getDimension"
"setMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~setMinReduction~D"
"computeStepGrowShrinkFactor","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~computeStepGrowShrinkFactor~QT;"
"clearStepHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~clearStepHandlers"
"getParameter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~getParameter~QString;"
"minReduction",\N
"error",\N
"getCurrentSignedStepsize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~getCurrentSignedStepsize"
"setSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~setSafety~D"
"name",\N
"getMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~getMaxGrowth"
"getParametersNames","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~getParametersNames"
"safety",\N
"getCurrentStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~getCurrentStepStart"
"getMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~getMinReduction"
"setStarterIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator~setStarterIntegrator~QFirstOrderIntegrator;"
"isSupported","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~isSupported~QString;"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~getEvaluations"
"getNSteps","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~getNSteps"
"starterIntegrator",\N
"name",\N
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~getMaxEvaluations"
"getSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~getSafety"
"setParameter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedWrapper.java[ParameterizedWrapper~setParameter~QString;~D"
"scaled","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator^scaled"
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~getName"
"getStarterIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~getStarterIntegrator"
"name",\N
"NordsieckTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[NordsieckTransformer"
"setMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldIntegrator.java[FirstOrderFieldIntegrator~setMaxEvaluations~I"
"value",\N
"rescale","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~rescale~QT;"
"NordsieckInitializer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[NordsieckInitializer"
"NordsieckInitializer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[NordsieckInitializer~NordsieckInitializer~I~I"
"FieldODEState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState"
"newStepSize",\N
"maxEvaluations",\N
"FieldODEState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~FieldODEState~QT;~\\[QT;"
"setMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~setMaxGrowth~D"
"FieldODEStateAndDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEStateAndDerivative.java[FieldODEStateAndDerivative"
"nbStartPoints",\N
"FieldODEStateAndDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEStateAndDerivative.java[FieldODEStateAndDerivative~FieldODEStateAndDerivative~QT;~\\[QT;~\\[QT;"
"n",\N
"time",\N
"maxGrowth",\N
"state",\N
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[NordsieckInitializer~init~D~\\[D~D"
"time",\N
"setMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~setMinReduction~D"
"FieldODEState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~FieldODEState~QT;~\\[QT;~\\[\\[QT;"
"state",\N
"t0",\N
"minReduction",\N
"derivative",\N
"time",\N
"y0",\N
"setSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~setSafety~D"
"FieldODEStateAndDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEStateAndDerivative.java[FieldODEStateAndDerivative~FieldODEStateAndDerivative~QT;~\\[QT;~\\[QT;~\\[\\[QT;~\\[\\[QT;"
"time",\N
"state",\N
"safety",\N
"secondaryState",\N
"InitializationCompletedMarkerException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[InitializationCompletedMarkerException"
"time",\N
"setStarterIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator~setStarterIntegrator~QFirstOrderFieldIntegrator\\<QT;>;"
"InitializationCompletedMarkerException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepIntegrator.java[MultistepIntegrator[InitializationCompletedMarkerException~InitializationCompletedMarkerException"
"getNumberOfSecondaryStates","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getNumberOfSecondaryStates"
"state",\N
"starterIntegrator",\N
"derivative",\N
"getSecondaryState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getSecondaryState~I"
"Parameterizable","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{Parameterizable.java[Parameterizable"
"secondaryState",\N
"scaled","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator^scaled"
"getParametersNames","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{Parameterizable.java[Parameterizable~getParametersNames"
"index",\N
"secondaryDerivative",\N
"FieldNordsieckInitializer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator[FieldNordsieckInitializer"
"getSecondaryStateDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getSecondaryStateDimension~I"
"isSupported","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{Parameterizable.java[Parameterizable~isSupported~QString;"
"getDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEStateAndDerivative.java[FieldODEStateAndDerivative~getDerivative"
"FieldNordsieckInitializer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator[FieldNordsieckInitializer~FieldNordsieckInitializer~QFieldEquationsMapper\\<QT;>;~I"
"index",\N
"name",\N
"getSecondaryDerivative","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEStateAndDerivative.java[FieldODEStateAndDerivative~getSecondaryDerivative~I"
"mapper",\N
"getState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getState"
"ParameterConfiguration","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterConfiguration.java[ParameterConfiguration"
"nbStartPoints",\N
"index",\N
"ParameterConfiguration","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterConfiguration.java[ParameterConfiguration~ParameterConfiguration~QString;~D"
"getStateDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getStateDimension"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator[FieldNordsieckInitializer~init~QFieldODEStateAndDerivative\\<QT;>;~QT;"
"FirstOrderConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderConverter.java[FirstOrderConverter"
"parameterName",\N
"FirstOrderConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderConverter.java[FirstOrderConverter~FirstOrderConverter~QSecondOrderDifferentialEquations;"
"getTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FieldODEState.java[FieldODEState~getTime"
"initialState",\N
"hP",\N
"finalTime",\N
"equations",\N
"FirstOrderFieldDifferentialEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldDifferentialEquations.java[FirstOrderFieldDifferentialEquations"
"getHP","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterConfiguration.java[ParameterConfiguration~getHP"
"computeDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderConverter.java[FirstOrderConverter~computeDerivatives~D~\\[D~\\[D"
"InitializationCompletedMarkerException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator[InitializationCompletedMarkerException"
"computeDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldDifferentialEquations.java[FirstOrderFieldDifferentialEquations~computeDerivatives~QT;~\\[QT;"
"getParameterName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterConfiguration.java[ParameterConfiguration~getParameterName"
"InitializationCompletedMarkerException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{MultistepFieldIntegrator.java[MultistepFieldIntegrator[InitializationCompletedMarkerException~InitializationCompletedMarkerException"
"t",\N
"t",\N
"y",\N
"setHP","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterConfiguration.java[ParameterConfiguration~setHP~D"
"ExpandableStatefulODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE"
"y",\N
"yDot",\N
"ExpandableStatefulODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~ExpandableStatefulODE~QFirstOrderDifferentialEquations;"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldDifferentialEquations.java[FirstOrderFieldDifferentialEquations~getDimension"
"hParam",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderConverter.java[FirstOrderConverter~getDimension"
"primary",\N
"UnknownParameterException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{UnknownParameterException.java[UnknownParameterException"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderFieldDifferentialEquations.java[FirstOrderFieldDifferentialEquations~init~QT;~\\[QT;~QT;"
"addSecondaryEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~addSecondaryEquations~QSecondaryEquations;"
"FirstOrderIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{FirstOrderIntegrator.java[FirstOrderIntegrator"
"UnknownParameterException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{UnknownParameterException.java[UnknownParameterException~UnknownParameterException~QString;"
"t0",\N
"ParameterizedODE","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedODE.java[ParameterizedODE"
"secondary",\N
"y0",\N
"name",\N
"getParameter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedODE.java[ParameterizedODE~getParameter~QString;"
"getPrimary","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getPrimary"
"finalTime",\N
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{UnknownParameterException.java[UnknownParameterException~getName"
"name",\N
"AbstractFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator"
"getPrimaryMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getPrimaryMapper"
"FieldEventState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState"
"clearEventHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~clearEventHandlers"
"setParameter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ParameterizedODE.java[ParameterizedODE~setParameter~QString;~D"
"getConvergence","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~getConvergence"
"getPrimaryState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getPrimaryState"
"name",\N
"clearStepHandlers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~clearStepHandlers"
"getEventHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~getEventHandler"
"getPrimaryStateDot","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getPrimaryStateDot"
"value",\N
"getCurrentSignedStepsize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getCurrentSignedStepsize"
"getEventTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~getEventTime"
"getSecondaryMappers","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getSecondaryMappers"
"FieldEventHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventHandler.java[FieldEventHandler"
"getCurrentStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getCurrentStepStart"
"EventHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventHandler.java[EventHandler"
"getSecondaryState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getSecondaryState~I"
"getMaxCheckInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~getMaxCheckInterval"
"g","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventHandler.java[EventHandler~g~D~\\[D"
"getEquations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getEquations"
"index",\N
"getMaxIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~getMaxIterationCount"
"t",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getEvaluations"
"getSecondaryStateDot","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getSecondaryStateDot~I"
"y",\N
"stop","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{FieldEventState.java[FieldEventState~stop"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getMaxEvaluations"
"index",\N
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventHandler.java[EventHandler~init~D~\\[D~D"
"EventFilter","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventFilter.java[EventFilter"
"getTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getTime"
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getName"
"t0",\N
"g","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventFilter.java[EventFilter~g~D~\\[D"
"y0",\N
"getTotalDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~getTotalDimension"
"getStepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getStepSize"
"t",\N
"t",\N
"y",\N
"setTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE~setTime~D"
"getStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~getStepStart"
"resetState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventHandler.java[EventHandler~resetState~D~\\[D"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventFilter.java[EventFilter~init~D~\\[D~D"
"time",\N
"initIntegration","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~initIntegration~QFieldExpandableODE\\<QT;>;~QT;~\\[QT;~QT;"
"t",\N
"t0",\N
"SecondaryComponent","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE[SecondaryComponent"
"y",\N
"eqn",\N
"y0",\N
"SecondaryComponent","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{ExpandableStatefulODE.java[ExpandableStatefulODE[SecondaryComponent~SecondaryComponent~QSecondaryEquations;~I"
"t0",\N
"EventState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState"
"t",\N
"equation",\N
"y0",\N
"getConvergence","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~getConvergence"
"resetState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventFilter.java[EventFilter~resetState~D~\\[D"
"firstIndex",\N
"t",\N
"getEventHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~getEventHandler"
"t",\N
"isLastStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~isLastStep"
"ThreeEighthesFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegrator.java[ThreeEighthesFieldIntegrator"
"y",\N
"getEventTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~getEventTime"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegrator.java[ThreeEighthesFieldIntegrator~getA"
"resetOccurred","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~resetOccurred"
"AdamsNordsieckFieldTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckFieldTransformer.java[AdamsNordsieckFieldTransformer"
"getMaxCheckInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~getMaxCheckInterval"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegrator.java[ThreeEighthesFieldIntegrator~getB"
"GraggBulirschStoerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator"
"setIsLastStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~setIsLastStep~Z"
"GraggBulirschStoerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~GraggBulirschStoerStepInterpolator"
"getMaxIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~getMaxIterationCount"
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegrator.java[ThreeEighthesFieldIntegrator~getC"
"isLastStep",\N
"GraggBulirschStoerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~GraggBulirschStoerStepInterpolator~QGraggBulirschStoerStepInterpolator;"
"setMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~setMaxEvaluations~I"
"reset","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~reset~D~\\[D"
"AdamsMoultonFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator"
"interpolator",\N
"Corrector","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator[Corrector"
"t",\N
"maxEvaluations",\N
"Corrector","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator[Corrector~Corrector~\\[QT;~\\[QT;~\\[QT;"
"computeCoefficients","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~computeCoefficients~I~D"
"y",\N
"setStateInitialized","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~setStateInitialized~Z"
"stepAccepted","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~stepAccepted~D~\\[D"
"mu",\N
"previous",\N
"stateInitialized",\N
"h",\N
"scaled",\N
"t",\N
"setStepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~setStepSize~QT;"
"state",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"y",\N
"stepSize",\N
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator[Corrector~end"
"stop","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState~stop"
"theta",\N
"setStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode{AbstractFieldIntegrator.java[AbstractFieldIntegrator~setStepStart~QFieldODEStateAndDerivative\\<QT;>;"
"oneMinusThetaH",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator[Corrector~start~I~I~I~I~I~I"
"LocalMaxCountExceededException","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.events{EventState.java[EventState[LocalMaxCountExceededException"
"stepStart",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~estimateError~\\[D"
"ClassicalRungeKuttaFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldStepInterpolator.java[ClassicalRungeKuttaFieldStepInterpolator"
"rows",\N
"GillStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillStepInterpolator.java[GillStepInterpolator"
"ClassicalRungeKuttaFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegrator.java[ClassicalRungeKuttaFieldIntegrator"
"columns",\N
"scale",\N
"GillStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillStepInterpolator.java[GillStepInterpolator~GillStepInterpolator"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegrator.java[ClassicalRungeKuttaFieldIntegrator~getA"
"startRow",\N
"readExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~readExternal~QObjectInput;"
"GillStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillStepInterpolator.java[GillStepInterpolator~GillStepInterpolator~QGillStepInterpolator;"
"endRow",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegrator.java[ClassicalRungeKuttaFieldIntegrator~getB"
"in",\N
"startColumn",\N
"interpolator",\N
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegrator.java[ClassicalRungeKuttaFieldIntegrator~getC"
"endColumn",\N
"writeExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolator.java[GraggBulirschStoerStepInterpolator~writeExternal~QObjectOutput;"
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillStepInterpolator.java[GillStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"EmbeddedRungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator"
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegrator.java[AdamsMoultonFieldIntegrator[Corrector~visit~I~I~QT;"
"out",\N
"theta",\N
"EmbeddedRungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~EmbeddedRungeKuttaIntegrator~QString;~Z~\\[D~\\[\\[D~\\[D~QRungeKuttaStepInterpolator;~D~D~D~D"
"row",\N
"oneMinusThetaH",\N
"ThreeEighthesStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesStepInterpolator.java[ThreeEighthesStepInterpolator"
"name",\N
"column",\N
"ThreeEighthesStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesStepInterpolator.java[ThreeEighthesStepInterpolator~ThreeEighthesStepInterpolator"
"DormandPrince54FieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator"
"fsal",\N
"value",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator~estimateError~\\[\\[QT;~\\[QT;~\\[QT;~QT;"
"c",\N
"ThreeEighthesStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesStepInterpolator.java[ThreeEighthesStepInterpolator~ThreeEighthesStepInterpolator~QThreeEighthesStepInterpolator;"
"AdaptiveStepsizeFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator"
"yDotK",\N
"a",\N
"interpolator",\N
"getMaxStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~getMaxStep"
"y0",\N
"b",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesStepInterpolator.java[ThreeEighthesStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"y1",\N
"prototype",\N
"getMinStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~getMinStep"
"h",\N
"theta",\N
"minStep",\N
"resetInternalState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~resetInternalState"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator~getA"
"maxStep",\N
"oneMinusThetaH",\N
"scalAbsoluteTolerance",\N
"setInitialStepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~setInitialStepSize~QT;"
"AdamsMoultonIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator~getB"
"scalRelativeTolerance",\N
"AdamsMoultonIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator~AdamsMoultonIntegrator~I~D~D~\\[D~\\[D"
"initialStepSize",\N
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator~getC"
"EmbeddedRungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~EmbeddedRungeKuttaIntegrator~QString;~Z~\\[D~\\[\\[D~\\[D~QRungeKuttaStepInterpolator;~D~D~\\[D~\\[D"
"nSteps",\N
"setStepSizeControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~setStepSizeControl~D~D~D~D"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegrator.java[DormandPrince54FieldIntegrator~getOrder"
"minimalStep",\N
"minStep",\N
"name",\N
"HighamHall54FieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldStepInterpolator.java[HighamHall54FieldStepInterpolator"
"maxStep",\N
"maximalStep",\N
"fsal",\N
"DormandPrince54FieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldStepInterpolator.java[DormandPrince54FieldStepInterpolator"
"vecAbsoluteTolerance",\N
"absoluteTolerance",\N
"c",\N
"FieldButcherArrayProvider","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{FieldButcherArrayProvider.java[FieldButcherArrayProvider"
"vecRelativeTolerance",\N
"a",\N
"relativeTolerance",\N
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{FieldButcherArrayProvider.java[FieldButcherArrayProvider~getA"
"Corrector","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator[Corrector"
"b",\N
"setStepSizeControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator~setStepSizeControl~D~D~\\[D~\\[D"
"Corrector","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator[Corrector~Corrector~\\[D~\\[D~\\[D"
"prototype",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{FieldButcherArrayProvider.java[FieldButcherArrayProvider~getB"
"minimalStep",\N
"minStep",\N
"previous",\N
"maximalStep",\N
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{FieldButcherArrayProvider.java[FieldButcherArrayProvider~getC"
"maxStep",\N
"scaled",\N
"absoluteTolerance",\N
"vecAbsoluteTolerance",\N
"GillIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillIntegrator.java[GillIntegrator"
"state",\N
"relativeTolerance",\N
"vecRelativeTolerance",\N
"GillIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillIntegrator.java[GillIntegrator~GillIntegrator~D"
"end","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator[Corrector~end"
"mainSetDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator^mainSetDimension"
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~estimateError~\\[\\[D~\\[D~\\[D~D"
"step",\N
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator[Corrector~start~I~I~I~I~I~I"
"scalAbsoluteTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator^scalAbsoluteTolerance"
"yDotK",\N
"AdamsBashforthIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegrator.java[AdamsBashforthIntegrator"
"rows",\N
"y0",\N
"scalRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator^scalRelativeTolerance"
"AdamsBashforthIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegrator.java[AdamsBashforthIntegrator~AdamsBashforthIntegrator~I~D~D~\\[D~\\[D"
"columns",\N
"y1",\N
"vecAbsoluteTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator^vecAbsoluteTolerance"
"nSteps",\N
"startRow",\N
"h",\N
"endRow",\N
"minStep",\N
"vecRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeFieldIntegrator.java[AdaptiveStepsizeFieldIntegrator^vecRelativeTolerance"
"getMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~getMaxGrowth"
"startColumn",\N
"maxStep",\N
"getMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~getMinReduction"
"ThreeEighthesFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldStepInterpolator.java[ThreeEighthesFieldStepInterpolator"
"vecAbsoluteTolerance",\N
"endColumn",\N
"HighamHall54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54StepInterpolator.java[HighamHall54StepInterpolator"
"vecRelativeTolerance",\N
"visit","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegrator.java[AdamsMoultonIntegrator[Corrector~visit~I~I~D"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~getOrder"
"HighamHall54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54StepInterpolator.java[HighamHall54StepInterpolator~HighamHall54StepInterpolator"
"RungeKuttaFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolator.java[RungeKuttaFieldStepInterpolator"
"row",\N
"getSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~getSafety"
"HighamHall54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54StepInterpolator.java[HighamHall54StepInterpolator~HighamHall54StepInterpolator~QHighamHall54StepInterpolator;"
"currentStateLinearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolator.java[RungeKuttaFieldStepInterpolator~currentStateLinearCombination~\\[QT;"
"column",\N
"setMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~setMaxGrowth~D"
"value",\N
"interpolator",\N
"coefficients",\N
"GillFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillFieldStepInterpolator.java[GillFieldStepInterpolator"
"maxGrowth",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54StepInterpolator.java[HighamHall54StepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"derivativeLinearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolator.java[RungeKuttaFieldStepInterpolator~derivativeLinearCombination~\\[QT;"
"LutherStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherStepInterpolator.java[LutherStepInterpolator"
"setMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~setMinReduction~D"
"theta",\N
"coefficients",\N
"LutherStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherStepInterpolator.java[LutherStepInterpolator~LutherStepInterpolator"
"oneMinusThetaH",\N
"minReduction",\N
"previousStateLinearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolator.java[RungeKuttaFieldStepInterpolator~previousStateLinearCombination~\\[QT;"
"LutherStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherStepInterpolator.java[LutherStepInterpolator~LutherStepInterpolator~QLutherStepInterpolator;"
"setSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaIntegrator.java[EmbeddedRungeKuttaIntegrator~setSafety~D"
"DormandPrince853FieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldStepInterpolator.java[DormandPrince853FieldStepInterpolator"
"coefficients",\N
"interpolator",\N
"LutherFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegrator.java[LutherFieldIntegrator"
"safety",\N
"AdamsBashforthFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegrator.java[AdamsBashforthFieldIntegrator"
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherStepInterpolator.java[LutherStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegrator.java[LutherFieldIntegrator~getA"
"RungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator"
"DormandPrince54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolator.java[DormandPrince54StepInterpolator"
"theta",\N
"DormandPrince54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolator.java[DormandPrince54StepInterpolator~DormandPrince54StepInterpolator"
"RungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator~RungeKuttaStepInterpolator"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegrator.java[LutherFieldIntegrator~getB"
"oneMinusThetaH",\N
"DormandPrince54StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolator.java[DormandPrince54StepInterpolator~DormandPrince54StepInterpolator~QDormandPrince54StepInterpolator;"
"RungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator~RungeKuttaStepInterpolator~QRungeKuttaStepInterpolator;"
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegrator.java[LutherFieldIntegrator~getC"
"DormandPrince853Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853Integrator.java[DormandPrince853Integrator"
"interpolator",\N
"interpolator",\N
"DormandPrince853Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853Integrator.java[DormandPrince853Integrator~DormandPrince853Integrator~D~D~D~D"
"AdaptiveStepsizeIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator"
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolator.java[DormandPrince54StepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"readExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator~readExternal~QObjectInput;"
"AdaptiveStepsizeIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~AdaptiveStepsizeIntegrator~QString;~D~D~D~D"
"minStep",\N
"theta",\N
"maxStep",\N
"in",\N
"name",\N
"scalAbsoluteTolerance",\N
"oneMinusThetaH",\N
"shift","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator~shift"
"minStep",\N
"scalRelativeTolerance",\N
"storeTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolator.java[DormandPrince54StepInterpolator~storeTime~D"
"maxStep",\N
"writeExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator~writeExternal~QObjectOutput;"
"DormandPrince853Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853Integrator.java[DormandPrince853Integrator~DormandPrince853Integrator~D~D~\\[D~\\[D"
"scalAbsoluteTolerance",\N
"t",\N
"out",\N
"scalRelativeTolerance",\N
"minStep",\N
"AdamsNordsieckTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformer.java[AdamsNordsieckTransformer"
"previousState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator^previousState"
"AdaptiveStepsizeIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~AdaptiveStepsizeIntegrator~QString;~D~D~\\[D~\\[D"
"maxStep",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformer.java[AdamsNordsieckTransformer~getInstance~I"
"vecAbsoluteTolerance",\N
"yDotK","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaStepInterpolator.java[RungeKuttaStepInterpolator^yDotK"
"name",\N
"nSteps",\N
"vecRelativeTolerance",\N
"minStep",\N
"ClassicalRungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegrator.java[ClassicalRungeKuttaIntegrator"
"getNSteps","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformer.java[AdamsNordsieckTransformer~getNSteps"
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853Integrator.java[DormandPrince853Integrator~estimateError~\\[\\[D~\\[D~\\[D~D"
"maxStep",\N
"ClassicalRungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegrator.java[ClassicalRungeKuttaIntegrator~ClassicalRungeKuttaIntegrator~D"
"vecAbsoluteTolerance",\N
"yDotK",\N
"RungeKuttaFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegrator.java[RungeKuttaFieldIntegrator"
"step",\N
"vecRelativeTolerance",\N
"y0",\N
"fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegrator.java[RungeKuttaFieldIntegrator~fraction~I~I"
"EulerFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerFieldStepInterpolator.java[EulerFieldStepInterpolator"
"y1",\N
"getCurrentStepStart","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~getCurrentStepStart"
"GillFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegrator.java[GillFieldIntegrator"
"p",\N
"h",\N
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegrator.java[GillFieldIntegrator~getA"
"q",\N
"getMaxStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~getMaxStep"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853Integrator.java[DormandPrince853Integrator~getOrder"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegrator.java[GillFieldIntegrator~getB"
"DormandPrince54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54Integrator.java[DormandPrince54Integrator"
"getMinStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~getMinStep"
"DormandPrince54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54Integrator.java[DormandPrince54Integrator~DormandPrince54Integrator~D~D~D~D"
"ClassicalRungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaStepInterpolator.java[ClassicalRungeKuttaStepInterpolator"
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegrator.java[GillFieldIntegrator~getC"
"resetInternalState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~resetInternalState"
"ClassicalRungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaStepInterpolator.java[ClassicalRungeKuttaStepInterpolator~ClassicalRungeKuttaStepInterpolator"
"minStep",\N
"MidpointFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldStepInterpolator.java[MidpointFieldStepInterpolator"
"setInitialStepSize","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~setInitialStepSize~D"
"maxStep",\N
"ClassicalRungeKuttaStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaStepInterpolator.java[ClassicalRungeKuttaStepInterpolator~ClassicalRungeKuttaStepInterpolator~QClassicalRungeKuttaStepInterpolator;"
"DormandPrince853FieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator"
"scalAbsoluteTolerance",\N
"initialStepSize",\N
"interpolator",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator~estimateError~\\[\\[QT;~\\[QT;~\\[QT;~QT;"
"scalRelativeTolerance",\N
"setStepSizeControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~setStepSizeControl~D~D~D~D"
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaStepInterpolator.java[ClassicalRungeKuttaStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"yDotK",\N
"DormandPrince54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54Integrator.java[DormandPrince54Integrator~DormandPrince54Integrator~D~D~\\[D~\\[D"
"minimalStep",\N
"y0",\N
"theta",\N
"minStep",\N
"maximalStep",\N
"y1",\N
"oneMinusThetaH",\N
"maxStep",\N
"absoluteTolerance",\N
"h",\N
"ThreeEighthesIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesIntegrator.java[ThreeEighthesIntegrator"
"vecAbsoluteTolerance",\N
"relativeTolerance",\N
"ThreeEighthesIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesIntegrator.java[ThreeEighthesIntegrator~ThreeEighthesIntegrator~D"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator~getA"
"vecRelativeTolerance",\N
"setStepSizeControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator~setStepSizeControl~D~D~\\[D~\\[D"
"step",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator~getB"
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54Integrator.java[DormandPrince54Integrator~estimateError~\\[\\[D~\\[D~\\[D~D"
"minimalStep",\N
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator~getC"
"MidpointIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointIntegrator.java[MidpointIntegrator"
"yDotK",\N
"maximalStep",\N
"MidpointIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointIntegrator.java[MidpointIntegrator~MidpointIntegrator~D"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegrator.java[DormandPrince853FieldIntegrator~getOrder"
"y0",\N
"absoluteTolerance",\N
"step",\N
"y1",\N
"relativeTolerance",\N
"RungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaIntegrator.java[RungeKuttaIntegrator"
"h",\N
"HighamHall54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54Integrator.java[HighamHall54Integrator"
"RungeKuttaIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaIntegrator.java[RungeKuttaIntegrator~RungeKuttaIntegrator~QString;~\\[D~\\[\\[D~\\[D~QRungeKuttaStepInterpolator;~D"
"mainSetDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator^mainSetDimension"
"HighamHall54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54Integrator.java[HighamHall54Integrator~HighamHall54Integrator~D~D~D~D"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54Integrator.java[DormandPrince54Integrator~getOrder"
"name",\N
"scalAbsoluteTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator^scalAbsoluteTolerance"
"minStep",\N
"c",\N
"AdamsFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldStepInterpolator.java[AdamsFieldStepInterpolator"
"scalRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator^scalRelativeTolerance"
"maxStep",\N
"a",\N
"DormandPrince853StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator"
"scalAbsoluteTolerance",\N
"b",\N
"vecAbsoluteTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator^vecAbsoluteTolerance"
"DormandPrince853StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator~DormandPrince853StepInterpolator"
"scalRelativeTolerance",\N
"prototype",\N
"vecRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdaptiveStepsizeIntegrator.java[AdaptiveStepsizeIntegrator^vecRelativeTolerance"
"DormandPrince853StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator~DormandPrince853StepInterpolator~QDormandPrince853StepInterpolator;"
"HighamHall54Integrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54Integrator.java[HighamHall54Integrator~HighamHall54Integrator~D~D~\\[D~\\[D"
"step",\N
"interpolator",\N
"minStep",\N
"GraggBulirschStoerIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator"
"AdamsIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsIntegrator.java[AdamsIntegrator"
"readExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator~readExternal~QObjectInput;"
"maxStep",\N
"GraggBulirschStoerIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~GraggBulirschStoerIntegrator~D~D~D~D"
"AdamsIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsIntegrator.java[AdamsIntegrator~AdamsIntegrator~QString;~I~I~D~D~\\[D~\\[D"
"vecAbsoluteTolerance",\N
"in",\N
"minStep",\N
"name",\N
"vecRelativeTolerance",\N
"storeTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator~storeTime~D"
"maxStep",\N
"nSteps",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54Integrator.java[HighamHall54Integrator~estimateError~\\[\\[D~\\[D~\\[D~D"
"scalAbsoluteTolerance",\N
"order",\N
"t",\N
"yDotK",\N
"scalRelativeTolerance",\N
"minStep",\N
"writeExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolator.java[DormandPrince853StepInterpolator~writeExternal~QObjectOutput;"
"y0",\N
"GraggBulirschStoerIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~GraggBulirschStoerIntegrator~D~D~\\[D~\\[D"
"maxStep",\N
"out",\N
"y1",\N
"vecAbsoluteTolerance",\N
"minStep",\N
"h",\N
"EulerFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegrator.java[EulerFieldIntegrator"
"vecRelativeTolerance",\N
"maxStep",\N
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegrator.java[EulerFieldIntegrator~getA"
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54Integrator.java[HighamHall54Integrator~getOrder"
"EmbeddedRungeKuttaFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator"
"vecAbsoluteTolerance",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~estimateError~\\[\\[QT;~\\[QT;~\\[QT;~QT;"
"vecRelativeTolerance",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegrator.java[EulerFieldIntegrator~getB"
"EulerIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerIntegrator.java[EulerIntegrator"
"EulerIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerIntegrator.java[EulerIntegrator~EulerIntegrator~D"
"setControlFactors","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~setControlFactors~D~D~D~D"
"yDotK",\N
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegrator.java[EulerFieldIntegrator~getC"
"y0",\N
"step",\N
"control1",\N
"y1",\N
"MidpointStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointStepInterpolator.java[MidpointStepInterpolator"
"control2",\N
"LutherFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherFieldStepInterpolator.java[LutherFieldStepInterpolator"
"h",\N
"MidpointStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointStepInterpolator.java[MidpointStepInterpolator~MidpointStepInterpolator"
"control3",\N
"AdamsFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegrator.java[AdamsFieldIntegrator"
"fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~fraction~I~I"
"control4",\N
"MidpointStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointStepInterpolator.java[MidpointStepInterpolator~MidpointStepInterpolator~QMidpointStepInterpolator;"
"EulerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolator.java[EulerStepInterpolator"
"setInterpolationControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~setInterpolationControl~Z~I"
"p",\N
"EulerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolator.java[EulerStepInterpolator~EulerStepInterpolator"
"interpolator",\N
"q",\N
"useInterpolationErrorForControl",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointStepInterpolator.java[MidpointStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"EulerStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolator.java[EulerStepInterpolator~EulerStepInterpolator~QEulerStepInterpolator;"
"fraction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~fraction~D~D"
"mudifControlParameter",\N
"theta",\N
"interpolator",\N
"setOrderControl","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~setOrderControl~I~D~D"
"p",\N
"oneMinusThetaH",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolator.java[EulerStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"q",\N
"maximalOrder",\N
"HighamHall54FieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator"
"getMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~getMaxGrowth"
"theta",\N
"control1",\N
"estimateError","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator~estimateError~\\[\\[QT;~\\[QT;~\\[QT;~QT;"
"control2",\N
"oneMinusThetaH",\N
"getMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~getMinReduction"
"yDotK",\N
"setStabilityCheck","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegrator.java[GraggBulirschStoerIntegrator~setStabilityCheck~Z~I~I~D"
"MidpointFieldIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegrator.java[MidpointFieldIntegrator"
"y0",\N
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~getOrder"
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegrator.java[MidpointFieldIntegrator~getA"
"performStabilityCheck",\N
"y1",\N
"getSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~getSafety"
"maxNumIter",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegrator.java[MidpointFieldIntegrator~getB"
"h",\N
"maxNumChecks",\N
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator~getA"
"setMaxGrowth","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~setMaxGrowth~QT;"
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegrator.java[MidpointFieldIntegrator~getC"
"stepsizeReductionFactor",\N
"maxGrowth",\N
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator~getB"
"LutherIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherIntegrator.java[LutherIntegrator"
"AbstractFieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractFieldStepInterpolator.java[AbstractFieldStepInterpolator"
"setMinReduction","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~setMinReduction~QT;"
"LutherIntegrator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{LutherIntegrator.java[LutherIntegrator~LutherIntegrator~D"
"isForward","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractFieldStepInterpolator.java[AbstractFieldStepInterpolator~isForward"
"getC","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator~getC"
"minReduction",\N
"step",\N
"getOrder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegrator.java[HighamHall54FieldIntegrator~getOrder"
"AbstractStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator"
"setSafety","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegrator.java[EmbeddedRungeKuttaFieldIntegrator~setSafety~QT;"
"DummyStepHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{DummyStepHandler.java[DummyStepHandler"
"AbstractStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~AbstractStepInterpolator"
"NordsieckStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{DummyStepHandler.java[DummyStepHandler~getInstance"
"safety",\N
"NordsieckStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~NordsieckStepInterpolator"
"AbstractStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~AbstractStepInterpolator~QAbstractStepInterpolator;"
"StepHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepHandler.java[StepHandler"
"handleStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{DummyStepHandler.java[DummyStepHandler~handleStep~QStepInterpolator;~Z"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepHandler.java[StepHandler~init~D~\\[D~D"
"NordsieckStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~NordsieckStepInterpolator~QNordsieckStepInterpolator;"
"interpolator",\N
"interpolator",\N
"doCopy","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~doCopy"
"t0",\N
"interpolator",\N
"isLast",\N
"y0",\N
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{DummyStepHandler.java[DummyStepHandler~init~D~\\[D~D"
"getCurrentTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~getCurrentTime"
"t",\N
"theta",\N
"t0",\N
"getGlobalCurrentTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~getGlobalCurrentTime"
"FixedStepHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FixedStepHandler.java[FixedStepHandler"
"oneMinusThetaH",\N
"y0",\N
"handleStep","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FixedStepHandler.java[FixedStepHandler~handleStep~D~\\[D~\\[D~Z"
"getGlobalPreviousTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~getGlobalPreviousTime"
"doCopy","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~doCopy"
"t",\N
"t",\N
"getInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~getInterpolatedTime"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{DummyStepHandler.java[DummyStepHandler[LazyHolder"
"readExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~readExternal~QObjectInput;"
"y",\N
"FieldFixedStepHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldFixedStepHandler.java[FieldFixedStepHandler"
"getPreviousTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~getPreviousTime"
"in",\N
"yDot",\N
"FieldStepHandler","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldStepHandler.java[FieldStepHandler"
"rescale","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~rescale~D"
"isLast",\N
"isForward","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~isForward"
"StepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FixedStepHandler.java[FixedStepHandler~init~D~\\[D~D"
"stepSize",\N
"getCurrentTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator~getCurrentTime"
"readBaseExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~readBaseExternal~QObjectInput;"
"writeExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator~writeExternal~QObjectOutput;"
"t0",\N
"getInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator~getInterpolatedTime"
"in",\N
"y0",\N
"out",\N
"readExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~readExternal~QObjectInput;"
"getPreviousTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator~getPreviousTime"
"t",\N
"stateVariation","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolator.java[NordsieckStepInterpolator^stateVariation"
"in",\N
"StepNormalizer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepNormalizer.java[StepNormalizer"
"isForward","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator~isForward"
"FieldStepNormalizer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldStepNormalizer.java[FieldStepNormalizer"
"setInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~setInterpolatedTime~D"
"StepNormalizer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepNormalizer.java[StepNormalizer~StepNormalizer~D~QFixedStepHandler;"
"setInterpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepInterpolator.java[StepInterpolator~setInterpolatedTime~D"
"FieldStepNormalizer","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldStepNormalizer.java[FieldStepNormalizer~FieldStepNormalizer~D~QFieldFixedStepHandler\\<QT;>;"
"time",\N
"h",\N
"h",\N
"time",\N
"setSoftCurrentTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~setSoftCurrentTime~D"
"handler",\N
"handler",\N
"FieldStepInterpolator","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldStepInterpolator.java[FieldStepInterpolator"
"init","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{StepNormalizer.java[StepNormalizer~init~D~\\[D~D"
"softCurrentTime",\N
"isForward","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{FieldStepInterpolator.java[FieldStepInterpolator~isForward"
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair"
"setSoftPreviousTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~setSoftPreviousTime~D"
"t0",\N
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~PointVectorValuePair~\\[D~\\[D"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleValueChecker.java[SimpleValueChecker"
"y0",\N
"softPreviousTime",\N
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleValueChecker.java[SimpleValueChecker~SimpleValueChecker~D~D"
"point",\N
"t",\N
"shift","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~shift"
"value",\N
"relativeThreshold",\N
"AbstractConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractConvergenceChecker.java[AbstractConvergenceChecker"
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~PointVectorValuePair~\\[D~\\[D~Z"
"storeTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~storeTime~D"
"absoluteThreshold",\N
"AbstractConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractConvergenceChecker.java[AbstractConvergenceChecker~AbstractConvergenceChecker~D~D"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleValueChecker.java[SimpleValueChecker~SimpleValueChecker~D~D~I"
"t",\N
"point",\N
"value",\N
"relativeThreshold",\N
"writeBaseExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~writeBaseExternal~QObjectOutput;"
"relativeThreshold",\N
"absoluteThreshold",\N
"copyArray",\N
"absoluteThreshold",\N
"out",\N
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~getPoint"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractConvergenceChecker.java[AbstractConvergenceChecker~converged~I~QPAIR;~QPAIR;"
"maxIter",\N
"writeExternal","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator~writeExternal~QObjectOutput;"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleValueChecker.java[SimpleValueChecker~converged~I~QPointValuePair;~QPointValuePair;"
"iteration",\N
"getPointRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~getPointRef"
"out",\N
"previous",\N
"iteration",\N
"currentState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^currentState"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~getValue"
"current",\N
"previous",\N
"getAbsoluteThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractConvergenceChecker.java[AbstractConvergenceChecker~getAbsoluteThreshold"
"getValueRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair~getValueRef"
"h","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^h"
"current",\N
"SimpleBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleBounds.java[SimpleBounds"
"interpolatedDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedDerivatives"
"getRelativeThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractConvergenceChecker.java[AbstractConvergenceChecker~getRelativeThreshold"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair[DataTransferObject"
"SimpleBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleBounds.java[SimpleBounds~SimpleBounds~\\[D~\\[D"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointVectorValuePair.java[PointVectorValuePair[DataTransferObject~DataTransferObject~\\[D~\\[D"
"interpolatedPrimaryDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedPrimaryDerivatives"
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimplePointChecker.java[SimplePointChecker"
"lB",\N
"point",\N
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimplePointChecker.java[SimplePointChecker~SimplePointChecker~D~D"
"interpolatedPrimaryState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedPrimaryState"
"uB",\N
"value",\N
"relativeThreshold",\N
"getLower","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleBounds.java[SimpleBounds~getLower"
"interpolatedSecondaryDerivatives","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedSecondaryDerivatives"
"OptimizationProblem","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{OptimizationProblem.java[OptimizationProblem"
"absoluteThreshold",\N
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{OptimizationProblem.java[OptimizationProblem~getConvergenceChecker"
"getUpper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleBounds.java[SimpleBounds~getUpper"
"interpolatedSecondaryState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedSecondaryState"
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimplePointChecker.java[SimplePointChecker~SimplePointChecker~D~D~I"
"BaseMultiStartMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer"
"unbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleBounds.java[SimpleBounds~unbounded~I"
"interpolatedState","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedState"
"relativeThreshold",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~clear"
"dim",\N
"absoluteThreshold",\N
"interpolatedTime","=mathmain3.6/src<main.java.org.apache.commons.math3.ode.sampling{AbstractStepInterpolator.java[AbstractStepInterpolator^interpolatedTime"
"maxIter",\N
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~doOptimize"
"BaseMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleVectorValueChecker.java[SimpleVectorValueChecker"
"BaseMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~BaseMultivariateOptimizer~QConvergenceChecker\\<QPAIR;>;"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimplePointChecker.java[SimplePointChecker~converged~I~QPAIR;~QPAIR;"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~getEvaluations"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleVectorValueChecker.java[SimpleVectorValueChecker~SimpleVectorValueChecker~D~D"
"iteration",\N
"checker",\N
"getOptima","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~getOptima"
"relativeThreshold",\N
"previous",\N
"getLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~getLowerBound"
"absoluteThreshold",\N
"current",\N
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~optimize~\\[QOptimizationData;"
"getStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~getStartPoint"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleVectorValueChecker.java[SimpleVectorValueChecker~SimpleVectorValueChecker~D~D~I"
"BaseOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer"
"optData",\N
"getUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~getUpperBound"
"relativeThreshold",\N
"BaseOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~BaseOptimizer~QConvergenceChecker\\<QPAIR;>;"
"store","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultiStartMultivariateOptimizer.java[BaseMultiStartMultivariateOptimizer~store~QPAIR;"
"absoluteThreshold",\N
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~optimize~\\[QOptimizationData;"
"checker",\N
"optimum",\N
"maxIter",\N
"BaseOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~BaseOptimizer~QConvergenceChecker\\<QPAIR;>;~I~I"
"optData",\N
"AbstractOptimizationProblem","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{SimpleVectorValueChecker.java[SimpleVectorValueChecker~converged~I~QPointVectorValuePair;~QPointVectorValuePair;"
"parseOptimizationData","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer~parseOptimizationData~\\[QOptimizationData;"
"checker",\N
"AbstractOptimizationProblem","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem~AbstractOptimizationProblem~I~I~QConvergenceChecker\\<QPAIR;>;"
"iteration",\N
"maxEval",\N
"optData",\N
"maxEvaluations",\N
"previous",\N
"maxIter",\N
"ConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{ConvergenceChecker.java[ConvergenceChecker"
"maxIterations",\N
"current",\N
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~doOptimize"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{ConvergenceChecker.java[ConvergenceChecker~converged~I~QPAIR;~QPAIR;"
"checker",\N
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair"
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem~getConvergenceChecker"
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair~PointValuePair~\\[D~D"
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~getConvergenceChecker"
"iteration",\N
"previous",\N
"point",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~getEvaluations"
"MaxEvalCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem[MaxEvalCallback"
"current",\N
"value",\N
"trigger","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem[MaxEvalCallback~trigger~I"
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~getIterations"
"MaxEval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxEval.java[MaxEval"
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair~PointValuePair~\\[D~D~Z"
"max",\N
"MaxEval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxEval.java[MaxEval~MaxEval~I"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~getMaxEvaluations"
"point",\N
"MaxIterCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem[MaxIterCallback"
"max",\N
"value",\N
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~getMaxIterations"
"trigger","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{AbstractOptimizationProblem.java[AbstractOptimizationProblem[MaxIterCallback~trigger~I"
"getMaxEval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxEval.java[MaxEval~getMaxEval"
"copyArray",\N
"max",\N
"parseOptimizationData","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer~parseOptimizationData~\\[QOptimizationData;"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair~getPoint"
"unlimited","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxEval.java[MaxEval~unlimited"
"MaxIter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxIter.java[MaxIter"
"optData",\N
"MaxIter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxIter.java[MaxIter~MaxIter~I"
"getPointRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair~getPointRef"
"InitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{InitialGuess.java[InitialGuess"
"MaxEvalCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer[MaxEvalCallback"
"InitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{InitialGuess.java[InitialGuess~InitialGuess~\\[D"
"max",\N
"trigger","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer[MaxEvalCallback~trigger~I"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair[DataTransferObject"
"getMaxIter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxIter.java[MaxIter~getMaxIter"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{PointValuePair.java[PointValuePair[DataTransferObject~DataTransferObject~\\[D~D"
"startPoint",\N
"max",\N
"getInitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{InitialGuess.java[InitialGuess~getInitialGuess"
"point",\N
"unlimited","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{MaxIter.java[MaxIter~unlimited"
"MaxIterCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer[MaxIterCallback"
"value",\N
"trigger","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{BaseOptimizer.java[BaseOptimizer[MaxIterCallback~trigger~I"
"OptimizationData","=mathmain3.6/src<main.java.org.apache.commons.math3.optim{OptimizationData.java[OptimizationData"
"SolutionCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SolutionCallback.java[SolutionCallback"
"max",\N
"LinearConstraint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraint.java[LinearConstraint"
"isSolutionOptimal","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SolutionCallback.java[SolutionCallback~isSolutionOptimal"
"LinearConstraintSet","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraintSet.java[LinearConstraintSet"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraint.java[LinearConstraint~equals~QObject;"
"UnboundedSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{UnboundedSolutionException.java[UnboundedSolutionException"
"LinearConstraintSet","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraintSet.java[LinearConstraintSet~LinearConstraintSet~\\[QLinearConstraint;"
"setTableau","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SolutionCallback.java[SolutionCallback~setTableau~QSimplexTableau;"
"UnboundedSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{UnboundedSolutionException.java[UnboundedSolutionException~UnboundedSolutionException"
"other",\N
"constraints",\N
"tableau",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraint.java[LinearConstraint~getValue"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver"
"LinearConstraintSet","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraintSet.java[LinearConstraintSet~LinearConstraintSet~QCollection\\<QLinearConstraint;>;"
"LinearOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearOptimizer.java[LinearOptimizer"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver~SimplexSolver"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraint.java[LinearConstraint~hashCode"
"constraints",\N
"LinearOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearOptimizer.java[LinearOptimizer~LinearOptimizer"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver~SimplexSolver~D"
"getConstraints","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearConstraintSet.java[LinearConstraintSet~getConstraints"
"SimplexTableau","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau"
"getConstraints","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearOptimizer.java[LinearOptimizer~getConstraints"
"divideRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~divideRow~I~D"
"epsilon",\N
"NoFeasibleSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{NoFeasibleSolutionException.java[NoFeasibleSolutionException"
"getFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearOptimizer.java[LinearOptimizer~getFunction"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver~SimplexSolver~D~I"
"dividendRowIndex",\N
"NoFeasibleSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{NoFeasibleSolutionException.java[NoFeasibleSolutionException~NoFeasibleSolutionException"
"divisor",\N
"isRestrictedToNonNegative","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearOptimizer.java[LinearOptimizer~isRestrictedToNonNegative"
"epsilon",\N
"LinearObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction"
"dropPhase1Objective","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~dropPhase1Objective"
"maxUlps",\N
"NonNegativeConstraint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{NonNegativeConstraint.java[NonNegativeConstraint"
"LinearObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~LinearObjectiveFunction~\\[D~D"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver~SimplexSolver~D~I~D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~equals~QObject;"
"NonNegativeConstraint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{NonNegativeConstraint.java[NonNegativeConstraint~NonNegativeConstraint~Z"
"coefficients",\N
"epsilon",\N
"other",\N
"restricted",\N
"constantTerm",\N
"maxUlps",\N
"getArtificialVariableOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getArtificialVariableOffset"
"isRestrictedToNonNegative","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{NonNegativeConstraint.java[NonNegativeConstraint~isRestrictedToNonNegative"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~equals~QObject;"
"cutOff",\N
"getBasicRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getBasicRow~I"
"DEFAULT_CUT_OFF","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver^DEFAULT_CUT_OFF"
"other",\N
"MultivariateFunctionMappingAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter"
"col",\N
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~boundedToUnbounded~\\[D"
"getConstantTerm","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~getConstantTerm"
"DEFAULT_ULPS","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexSolver.java[SimplexSolver^DEFAULT_ULPS"
"getBasicVariable","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getBasicVariable~I"
"point",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~hashCode"
"LineSearch","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{LineSearch.java[LineSearch"
"row",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~unboundedToBounded~\\[D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~value~\\[D"
"LineSearch","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{LineSearch.java[LineSearch~LineSearch~QMultivariateOptimizer;~D~D~D"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getData"
"point",\N
"point",\N
"optimizer",\N
"getEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getEntry~I~I"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~value~\\[D"
"MultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateOptimizer.java[MultivariateOptimizer"
"relativeTolerance",\N
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateOptimizer.java[MultivariateOptimizer~computeObjectiveValue~\\[D"
"point",\N
"absoluteTolerance",\N
"row",\N
"column",\N
"initialBracketingRange",\N
"Mapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper"
"params",\N
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper~boundedToUnbounded~D"
"getHeight","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getHeight"
"ObjectiveFunctionGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{ObjectiveFunctionGradient.java[ObjectiveFunctionGradient"
"LeastSquaresConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{LeastSquaresConverter.java[LeastSquaresConverter"
"x",\N
"getNumArtificialVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getNumArtificialVariables"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{LeastSquaresConverter.java[LeastSquaresConverter~value~\\[D"
"MultivariateFunctionPenaltyAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapter.java[MultivariateFunctionPenaltyAdapter"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper~unboundedToBounded~D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapter.java[MultivariateFunctionPenaltyAdapter~value~\\[D"
"point",\N
"getNumDecisionVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getNumDecisionVariables"
"point",\N
"y",\N
"GradientMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{GradientMultivariateOptimizer.java[GradientMultivariateOptimizer"
"ObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{ObjectiveFunction.java[ObjectiveFunction"
"getNumObjectiveFunctions","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getNumObjectiveFunctions"
"NoBoundsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper"
"computeObjectiveGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{GradientMultivariateOptimizer.java[GradientMultivariateOptimizer~computeObjectiveGradient~\\[D"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper~boundedToUnbounded~D"
"MultiStartMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizer.java[MultiStartMultivariateOptimizer"
"getNumSlackVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getNumSlackVariables"
"params",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizer.java[MultiStartMultivariateOptimizer~clear"
"x",\N
"getOriginalNumDecisionVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getOriginalNumDecisionVariables"
"NonLinearConjugateGradientOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper~unboundedToBounded~D"
"Preconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{Preconditioner.java[Preconditioner"
"BracketingStep","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[BracketingStep"
"getRhsOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getRhsOffset"
"precondition","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{Preconditioner.java[Preconditioner~precondition~\\[D~\\[D"
"y",\N
"BracketingStep","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[BracketingStep~BracketingStep~D"
"getRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getRow~I"
"point",\N
"LowerBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper"
"step",\N
"r",\N
"LowerBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~LowerBoundMapper~D"
"row",\N
"getBracketingStep","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[BracketingStep~getBracketingStep"
"getSlackVariableOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getSlackVariableOffset"
"lower",\N
"CMAESOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer"
"IdentityPreconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[IdentityPreconditioner"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~boundedToUnbounded~D"
"getStatisticsFitnessHistory","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer~getStatisticsFitnessHistory"
"getWidth","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~getWidth"
"precondition","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[IdentityPreconditioner~precondition~\\[D~\\[D"
"x",\N
"getStatisticsSigmaHistory","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer~getStatisticsSigmaHistory"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~hashCode"
"variables",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~unboundedToBounded~D"
"r",\N
"Sigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[Sigma"
"initializeColumnLabels","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~initializeColumnLabels"
"y",\N
"getSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[Sigma~getSigma"
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizer.java[PowellOptimizer"
"isOptimal","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~isOptimal"
"UpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper"
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizer.java[PowellOptimizer~PowellOptimizer~D~D"
"PopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[PopulationSize"
"UpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~UpperBoundMapper~D"
"normalizeConstraints","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~normalizeConstraints~QCollection\\<QLinearConstraint;>;"
"getPopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[PopulationSize~getPopulationSize"
"rel",\N
"upper",\N
"originalConstraints",\N
"abs",\N
"DoubleIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~boundedToUnbounded~D"
"performRowOperations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~performRowOperations~I~I"
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizer.java[PowellOptimizer~PowellOptimizer~D~D~D~D"
"DoubleIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~DoubleIndex~D~I"
"x",\N
"rel",\N
"pivotCol",\N
"value",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~unboundedToBounded~D"
"pivotRow",\N
"abs",\N
"index",\N
"lineRel",\N
"setEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~setEntry~I~I~D"
"y",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~compareTo~QDoubleIndex;"
"lineAbs",\N
"LowerUpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper"
"row",\N
"o",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex"
"LowerUpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~LowerUpperBoundMapper~D~D"
"column",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~equals~QObject;"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I"
"value",\N
"lower",\N
"other",\N
"n",\N
"subtractRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.linear{SimplexTableau.java[SimplexTableau~subtractRow~I~I~D"
"upper",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~hashCode"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~boundedToUnbounded~D"
"minuendRowIndex",\N
"ValuePenaltyPair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[ValuePenaltyPair"
"subtrahendRowIndex",\N
"n",\N
"x",\N
"ValuePenaltyPair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[ValuePenaltyPair~ValuePenaltyPair~D~D"
"multiplier",\N
"sideLength",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~unboundedToBounded~D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D~D"
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex"
"value",\N
"y",\N
"penalty",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~I"
"n",\N
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer"
"FitnessFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction"
"khi",\N
"n",\N
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer~BOBYQAOptimizer~I"
"FitnessFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~FitnessFunction"
"gamma",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~I~D"
"numberOfInterpolationPoints",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D~D~D"
"isFeasible","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~isFeasible~\\[D"
"n",\N
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer~BOBYQAOptimizer~I~D~D"
"n",\N
"x",\N
"sideLength",\N
"numberOfInterpolationPoints",\N
"sideLength",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~\\[D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~value~\\[D"
"khi",\N
"initialTrustRegionRadius",\N
"point",\N
"steps",\N
"gamma",\N
"stoppingTrustRegionRadius",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~\\[\\[D"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[D"
"DEFAULT_INITIAL_RADIUS","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer^DEFAULT_INITIAL_RADIUS"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I"
"referenceSimplex",\N
"steps",\N
"DEFAULT_STOPPING_RADIUS","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer^DEFAULT_STOPPING_RADIUS"
"n",\N
"build","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~build~\\[D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[D~D~D"
"MINIMUM_PROBLEM_DIMENSION","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer^MINIMUM_PROBLEM_DIMENSION"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D"
"startPoint",\N
"steps",\N
"PathIsExploredException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer[PathIsExploredException"
"n",\N
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~getDimension"
"khi",\N
"PathIsExploredException","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizer.java[BOBYQAOptimizer[PathIsExploredException~PathIsExploredException"
"sideLength",\N
"gamma",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{AbstractSimplex.java[AbstractSimplex~getSize"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D~D~D~D~D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[\\[D"
"SimplexOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizer.java[SimplexOptimizer"
"JacobianMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{JacobianMultivariateVectorOptimizer.java[JacobianMultivariateVectorOptimizer"
"n",\N
"SimplexOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizer.java[SimplexOptimizer~SimplexOptimizer~D~D"
"referenceSimplex",\N
"computeJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{JacobianMultivariateVectorOptimizer.java[JacobianMultivariateVectorOptimizer~computeJacobian~\\[D"
"sideLength",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[\\[D~D~D"
"rel",\N
"rho",\N
"params",\N
"abs",\N
"referenceSimplex",\N
"khi",\N
"Weight","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{Weight.java[Weight"
"ModelFunctionJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{ModelFunctionJacobian.java[ModelFunctionJacobian"
"khi",\N
"gamma",\N
"Weight","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{Weight.java[Weight~Weight~\\[D"
"MultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultivariateVectorOptimizer.java[MultivariateVectorOptimizer"
"gamma",\N
"sigma",\N
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultivariateVectorOptimizer.java[MultivariateVectorOptimizer~computeObjectiveValue~\\[D"
"weight",\N
"ModelFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{ModelFunction.java[ModelFunction"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D~D~D~D"
"Target","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{Target.java[Target"
"MultiStartMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizer.java[MultiStartMultivariateVectorOptimizer"
"params",\N
"n",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizer.java[MultiStartMultivariateVectorOptimizer~clear"
"Target","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{Target.java[Target~Target~\\[D"
"getTarget","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultivariateVectorOptimizer.java[MultivariateVectorOptimizer~getTarget"
"rho",\N
"observations",\N
"khi",\N
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizer.java[GaussNewtonOptimizer"
"getTargetSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{MultivariateVectorOptimizer.java[MultivariateVectorOptimizer~getTargetSize"
"getTarget","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector{Target.java[Target~getTarget"
"gamma",\N
"AbstractLeastSquaresOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer"
"sigma",\N
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder"
"computeCost","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeCost~\\[D"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[D"
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~BracketFinder"
"residuals",\N
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer~D~D~D"
"steps",\N
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~BracketFinder~D~I"
"computeCovariances","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeCovariances~\\[D~D"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[D~D~D~D~D"
"costRelativeTolerance",\N
"growLimit",\N
"params",\N
"parRelativeTolerance",\N
"steps",\N
"maxEvaluations",\N
"threshold",\N
"orthoTolerance",\N
"rho",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getEvaluations"
"computeResiduals","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeResiduals~\\[D"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer~D~D~D~D~D"
"khi",\N
"getFHi","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getFHi"
"gamma",\N
"objectiveValue",\N
"initialStepBoundFactor",\N
"sigma",\N
"computeSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeSigma~\\[D~D"
"costRelativeTolerance",\N
"getFLo","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getFLo"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[\\[D"
"parRelativeTolerance",\N
"params",\N
"getFMid","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getFMid"
"orthoTolerance",\N
"referenceSimplex",\N
"covarianceSingularityThreshold",\N
"threshold",\N
"getHi","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getHi"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[\\[D~D~D~D~D"
"getChiSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getChiSquare"
"SearchInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval"
"getLo","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getLo"
"referenceSimplex",\N
"getRMS","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getRMS"
"SearchInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval~SearchInterval~D~D~D"
"rho",\N
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getMaxEvaluations"
"setCost","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~setCost~D"
"lo",\N
"khi",\N
"getMid","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BracketFinder.java[BracketFinder~getMid"
"cost",\N
"gamma",\N
"hi",\N
"init",\N
"sigma",\N
"UnivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateOptimizer.java[UnivariateOptimizer"
"UnivariatePointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair"
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateOptimizer.java[UnivariateOptimizer~computeObjectiveValue~D"
"SearchInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval~SearchInterval~D~D"
"MultiStartUnivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizer.java[MultiStartUnivariateOptimizer"
"UnivariatePointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~UnivariatePointValuePair~D~D"
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizer.java[MultiStartUnivariateOptimizer~doOptimize"
"x",\N
"lo",\N
"point",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateOptimizer.java[UnivariateOptimizer~getMax"
"hi",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizer.java[MultiStartUnivariateOptimizer~getEvaluations"
"value",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval~getMax"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateOptimizer.java[UnivariateOptimizer~getMin"
"getOptima","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizer.java[MultiStartUnivariateOptimizer~getOptima"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~getPoint"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval~getMin"
"getStartValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateOptimizer.java[UnivariateOptimizer~getStartValue"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~getValue"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker"
"getStartValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SearchInterval.java[SearchInterval~getStartValue"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~SimpleUnivariateValueChecker~D~D"
"BrentOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BrentOptimizer.java[BrentOptimizer"
"UnivariateObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{UnivariateObjectiveFunction.java[UnivariateObjectiveFunction"
"BrentOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BrentOptimizer.java[BrentOptimizer~BrentOptimizer~D~D"
"DifferentiableMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{DifferentiableMultivariateOptimizer.java[DifferentiableMultivariateOptimizer"
"relativeThreshold",\N
"MultivariateDifferentiableOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateDifferentiableOptimizer.java[MultivariateDifferentiableOptimizer"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleVectorValueChecker.java[SimpleVectorValueChecker"
"absoluteThreshold",\N
"rel",\N
"OptimizationData","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{OptimizationData.java[OptimizationData"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleVectorValueChecker.java[SimpleVectorValueChecker~SimpleVectorValueChecker"
"abs",\N
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~SimpleUnivariateValueChecker~D~D~I"
"MultivariateMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizer.java[MultivariateMultiStartOptimizer"
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{BrentOptimizer.java[BrentOptimizer~doOptimize"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleVectorValueChecker.java[SimpleVectorValueChecker~SimpleVectorValueChecker~D~D"
"BaseMultivariateSimpleBoundsOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateSimpleBoundsOptimizer.java[BaseMultivariateSimpleBoundsOptimizer"
"relativeThreshold",\N
"MultivariateDifferentiableMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateDifferentiableMultiStartOptimizer.java[MultivariateDifferentiableMultiStartOptimizer"
"absoluteThreshold",\N
"Target","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{Target.java[Target"
"relativeThreshold",\N
"DifferentiableMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{DifferentiableMultivariateVectorOptimizer.java[DifferentiableMultivariateVectorOptimizer"
"maxIter",\N
"Target","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{Target.java[Target~Target~\\[D"
"absoluteThreshold",\N
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~converged~I~QUnivariatePointValuePair;~QUnivariatePointValuePair;"
"SimpleVectorValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleVectorValueChecker.java[SimpleVectorValueChecker~SimpleVectorValueChecker~D~D~I"
"observations",\N
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~PointVectorValuePair~\\[D~\\[D"
"iteration",\N
"getTarget","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{Target.java[Target~getTarget"
"relativeThreshold",\N
"point",\N
"previous",\N
"absoluteThreshold",\N
"DifferentiableMultivariateVectorMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{DifferentiableMultivariateVectorMultiStartOptimizer.java[DifferentiableMultivariateVectorMultiStartOptimizer"
"value",\N
"current",\N
"maxIter",\N
"SimpleBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleBounds.java[SimpleBounds"
"PointVectorValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~PointVectorValuePair~\\[D~\\[D~Z"
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimplePointChecker.java[SimplePointChecker"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleVectorValueChecker.java[SimpleVectorValueChecker~converged~I~QPointVectorValuePair;~QPointVectorValuePair;"
"SimpleBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleBounds.java[SimpleBounds~SimpleBounds~\\[D~\\[D"
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimplePointChecker.java[SimplePointChecker~SimplePointChecker"
"point",\N
"iteration",\N
"lB",\N
"value",\N
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimplePointChecker.java[SimplePointChecker~SimplePointChecker~D~D"
"previous",\N
"uB",\N
"copyArray",\N
"current",\N
"relativeThreshold",\N
"getLower","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleBounds.java[SimpleBounds~getLower"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~getPoint"
"Weight","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{Weight.java[Weight"
"absoluteThreshold",\N
"getUpper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleBounds.java[SimpleBounds~getUpper"
"Weight","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{Weight.java[Weight~Weight~\\[D"
"getPointRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~getPointRef"
"SimplePointChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimplePointChecker.java[SimplePointChecker~SimplePointChecker~D~D~I"
"MultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateOptimizer.java[MultivariateOptimizer"
"weight",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~getValue"
"relativeThreshold",\N
"absoluteThreshold",\N
"BaseOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseOptimizer.java[BaseOptimizer"
"ConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{ConvergenceChecker.java[ConvergenceChecker"
"getValueRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair~getValueRef"
"maxIter",\N
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{ConvergenceChecker.java[ConvergenceChecker~converged~I~QPAIR;~QPAIR;"
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseOptimizer.java[BaseOptimizer~getConvergenceChecker"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair[DataTransferObject"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimplePointChecker.java[SimplePointChecker~converged~I~QPAIR;~QPAIR;"
"iteration",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseOptimizer.java[BaseOptimizer~getEvaluations"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointVectorValuePair.java[PointVectorValuePair[DataTransferObject~DataTransferObject~\\[D~\\[D"
"previous",\N
"iteration",\N
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseOptimizer.java[BaseOptimizer~getMaxEvaluations"
"point",\N
"current",\N
"previous",\N
"value",\N
"current",\N
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair"
"AbstractConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker"
"BaseMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorOptimizer.java[BaseMultivariateVectorOptimizer"
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair~PointValuePair~\\[D~D"
"AbstractConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker~AbstractConvergenceChecker"
"MultivariateDifferentiableVectorMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizer.java[MultivariateDifferentiableVectorMultiStartOptimizer"
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorOptimizer.java[BaseMultivariateVectorOptimizer~optimize~I~QFUNC;~\\[D~\\[D~\\[D"
"DifferentiableMultivariateMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{DifferentiableMultivariateMultiStartOptimizer.java[DifferentiableMultivariateMultiStartOptimizer"
"point",\N
"AbstractConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker~AbstractConvergenceChecker~D~D"
"maxEval",\N
"LeastSquaresConverter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{LeastSquaresConverter.java[LeastSquaresConverter"
"value",\N
"relativeThreshold",\N
"f",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{LeastSquaresConverter.java[LeastSquaresConverter~value~\\[D"
"PointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair~PointValuePair~\\[D~D~Z"
"absoluteThreshold",\N
"target",\N
"point",\N
"point",\N
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker~converged~I~QPAIR;~QPAIR;"
"weight",\N
"InitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{InitialGuess.java[InitialGuess"
"value",\N
"startPoint",\N
"iteration",\N
"copyArray",\N
"InitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{InitialGuess.java[InitialGuess~InitialGuess~\\[D"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleValueChecker.java[SimpleValueChecker"
"previous",\N
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair~getPoint"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleValueChecker.java[SimpleValueChecker~SimpleValueChecker"
"current",\N
"startPoint",\N
"getInitialGuess","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{InitialGuess.java[InitialGuess~getInitialGuess"
"getPointRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair~getPointRef"
"getAbsoluteThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker~getAbsoluteThreshold"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleValueChecker.java[SimpleValueChecker~SimpleValueChecker~D~D"
"getRelativeThreshold","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{AbstractConvergenceChecker.java[AbstractConvergenceChecker~getRelativeThreshold"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair[DataTransferObject"
"relativeThreshold",\N
"BaseMultivariateVectorMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer"
"DataTransferObject","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{PointValuePair.java[PointValuePair[DataTransferObject~DataTransferObject~\\[D~D"
"absoluteThreshold",\N
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer~getConvergenceChecker"
"BaseMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateOptimizer.java[BaseMultivariateOptimizer"
"SimpleValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleValueChecker.java[SimpleValueChecker~SimpleValueChecker~D~D~I"
"point",\N
"BaseMultivariateMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateMultiStartOptimizer.java[BaseMultivariateMultiStartOptimizer"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer~getEvaluations"
"value",\N
"getConvergenceChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateMultiStartOptimizer.java[BaseMultivariateMultiStartOptimizer~getConvergenceChecker"
"relativeThreshold",\N
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer~getMaxEvaluations"
"absoluteThreshold",\N
"MultivariateDifferentiableVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorOptimizer.java[MultivariateDifferentiableVectorOptimizer"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateMultiStartOptimizer.java[BaseMultivariateMultiStartOptimizer~getEvaluations"
"maxIter",\N
"getOptima","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer~getOptima"
"CMAESOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateMultiStartOptimizer.java[BaseMultivariateMultiStartOptimizer~getMaxEvaluations"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{SimpleValueChecker.java[SimpleValueChecker~converged~I~QPointValuePair;~QPointValuePair;"
"CMAESOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer~CMAESOptimizer"
"optimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateVectorMultiStartOptimizer.java[BaseMultivariateVectorMultiStartOptimizer~optimize~I~QFUNC;~\\[D~\\[D~\\[D"
"getOptima","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization{BaseMultivariateMultiStartOptimizer.java[BaseMultivariateMultiStartOptimizer~getOptima"
"iteration",\N
"CMAESOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer~CMAESOptimizer~I"
"maxEval",\N
"previous",\N
"f",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex"
"lambda",\N
"current",\N
"target",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~I"
"CMAESOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer~CMAESOptimizer~I~\\[D"
"MultivariateFunctionMappingAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter"
"weights",\N
"n",\N
"lambda",\N
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~boundedToUnbounded~\\[D"
"startPoint",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~I~D"
"inputSigma",\N
"MultivariateFunctionPenaltyAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapter.java[MultivariateFunctionPenaltyAdapter"
"point",\N
"getStatisticsFitnessHistory","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer~getStatisticsFitnessHistory"
"n",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapter.java[MultivariateFunctionPenaltyAdapter~value~\\[D"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~unboundedToBounded~\\[D"
"sideLength",\N
"getStatisticsSigmaHistory","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer~getStatisticsSigmaHistory"
"point",\N
"point",\N
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~\\[D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter~value~\\[D"
"DEFAULT_CHECKFEASABLECOUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer^DEFAULT_CHECKFEASABLECOUNT"
"steps",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I"
"point",\N
"DEFAULT_DIAGONALONLY","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer^DEFAULT_DIAGONALONLY"
"AbstractSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~AbstractSimplex~\\[\\[D"
"n",\N
"Mapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper"
"DEFAULT_ISACTIVECMA","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer^DEFAULT_ISACTIVECMA"
"referenceSimplex",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper~boundedToUnbounded~D"
"build","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~build~\\[D"
"DEFAULT_MAXITERATIONS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer^DEFAULT_MAXITERATIONS"
"n",\N
"x",\N
"sideLength",\N
"startPoint",\N
"DEFAULT_STOPFITNESS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer^DEFAULT_STOPFITNESS"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[Mapper~unboundedToBounded~D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D~D"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~getDimension"
"y",\N
"Sigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[Sigma"
"n",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{AbstractSimplex.java[AbstractSimplex~getSize"
"getSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[Sigma~getSigma"
"NoBoundsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper"
"khi",\N
"NoBoundsMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper~NoBoundsMapper"
"PopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[PopulationSize"
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer"
"gamma",\N
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer~BOBYQAOptimizer~I"
"getPopulationSize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[PopulationSize~getPopulationSize"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper~boundedToUnbounded~D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~I~D~D~D"
"x",\N
"numberOfInterpolationPoints",\N
"DoubleIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex"
"n",\N
"DoubleIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~DoubleIndex~D~I"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[NoBoundsMapper~unboundedToBounded~D"
"BOBYQAOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer~BOBYQAOptimizer~I~D~D"
"sideLength",\N
"khi",\N
"y",\N
"value",\N
"numberOfInterpolationPoints",\N
"gamma",\N
"index",\N
"initialTrustRegionRadius",\N
"LowerBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[D"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~compareTo~QDoubleIndex;"
"stoppingTrustRegionRadius",\N
"LowerBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~LowerBoundMapper~D"
"steps",\N
"DEFAULT_INITIAL_RADIUS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer^DEFAULT_INITIAL_RADIUS"
"o",\N
"lower",\N
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[D~D~D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~equals~QObject;"
"DEFAULT_STOPPING_RADIUS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer^DEFAULT_STOPPING_RADIUS"
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~boundedToUnbounded~D"
"steps",\N
"other",\N
"x",\N
"MINIMUM_PROBLEM_DIMENSION","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer^MINIMUM_PROBLEM_DIMENSION"
"khi",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[DoubleIndex~hashCode"
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerBoundMapper~unboundedToBounded~D"
"gamma",\N
"PathIsExploredException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer[PathIsExploredException"
"FitnessFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction"
"y",\N
"PathIsExploredException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizer.java[BOBYQAOptimizer[PathIsExploredException~PathIsExploredException"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[\\[D"
"FitnessFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~FitnessFunction"
"UpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper"
"referenceSimplex",\N
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{PowellOptimizer.java[PowellOptimizer"
"UpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~UpperBoundMapper~D"
"isFeasible","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~isFeasible~\\[D"
"MultiDirectionalSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultiDirectionalSimplex.java[MultiDirectionalSimplex~MultiDirectionalSimplex~\\[\\[D~D~D"
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{PowellOptimizer.java[PowellOptimizer~PowellOptimizer~D~D"
"upper",\N
"x",\N
"rel",\N
"referenceSimplex",\N
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~boundedToUnbounded~D"
"setValueRange","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~setValueRange~D"
"abs",\N
"khi",\N
"x",\N
"gamma",\N
"PowellOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{PowellOptimizer.java[PowellOptimizer~PowellOptimizer~D~D~D~D"
"valueRange",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[UpperBoundMapper~unboundedToBounded~D"
"SimplexOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{SimplexOptimizer.java[SimplexOptimizer"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{CMAESOptimizer.java[CMAESOptimizer[FitnessFunction~value~\\[D"
"rel",\N
"SimplexOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{SimplexOptimizer.java[SimplexOptimizer~SimplexOptimizer"
"abs",\N
"y",\N
"point",\N
"lineRel",\N
"LowerUpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper"
"SimplexOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{SimplexOptimizer.java[SimplexOptimizer~SimplexOptimizer~D~D"
"BaseAbstractMultivariateSimpleBoundsOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateSimpleBoundsOptimizer.java[BaseAbstractMultivariateSimpleBoundsOptimizer"
"lineAbs",\N
"LowerUpperBoundMapper","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~LowerUpperBoundMapper~D~D"
"BaseAbstractMultivariateSimpleBoundsOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateSimpleBoundsOptimizer.java[BaseAbstractMultivariateSimpleBoundsOptimizer~BaseAbstractMultivariateSimpleBoundsOptimizer"
"rel",\N
"LineSearch","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{PowellOptimizer.java[PowellOptimizer[LineSearch"
"lower",\N
"abs",\N
"BaseAbstractMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer"
"LineSearch","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{PowellOptimizer.java[PowellOptimizer[LineSearch~LineSearch~D~D"
"upper",\N
"BaseAbstractMultivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~BaseAbstractMultivariateOptimizer"
"setSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{SimplexOptimizer.java[SimplexOptimizer~setSimplex~QAbstractSimplex;"
"rel",\N
"boundedToUnbounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~boundedToUnbounded~D"
"simplex",\N
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~computeObjectiveValue~\\[D"
"abs",\N
"x",\N
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex"
"BaseAbstractMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer"
"point",\N
"unboundedToBounded","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapter.java[MultivariateFunctionMappingAdapter[LowerUpperBoundMapper~unboundedToBounded~D"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I"
"BaseAbstractMultivariateVectorOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~BaseAbstractMultivariateVectorOptimizer"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~getEvaluations"
"y",\N
"n",\N
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~computeObjectiveValue~\\[D"
"getLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~getLowerBound"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D"
"WeightedObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{WeightedObservedPoint.java[WeightedObservedPoint"
"point",\N
"WeightedObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{WeightedObservedPoint.java[WeightedObservedPoint~WeightedObservedPoint~D~D~D"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~getMaxEvaluations"
"n",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getEvaluations"
"sideLength",\N
"weight",\N
"getStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~getStartPoint"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getMaxEvaluations"
"x",\N
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D~D~D~D~D"
"getUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateOptimizer.java[BaseAbstractMultivariateOptimizer~getUpperBound"
"y",\N
"getObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getObjectiveFunction"
"n",\N
"getWeight","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getWeight"
"GaussianFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter"
"sideLength",\N
"getStartPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getStartPoint"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter~fit~\\[D"
"rho",\N
"getX","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getX"
"getTarget","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getTarget"
"khi",\N
"initialGuess",\N
"getY","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{WeightedObservedPoint.java[WeightedObservedPoint~getY"
"gamma",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter~fit"
"getTargetRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getTargetRef"
"sigma",\N
"HarmonicFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser"
"getWeightRef","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~getWeightRef"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~I~D~D~D~D"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter~fit~\\[D"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser~ParameterGuesser~\\[QWeightedObservedPoint;"
"setUp","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{BaseAbstractMultivariateVectorOptimizer.java[BaseAbstractMultivariateVectorOptimizer~setUp"
"n",\N
"initialGuess",\N
"observations",\N
"rho",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter~fit"
"CurveFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter"
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{GaussianFitter.java[GaussianFitter[ParameterGuesser~guess"
"khi",\N
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~addObservedPoint~D~D"
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser"
"gamma",\N
"PolynomialFitter","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{PolynomialFitter.java[PolynomialFitter"
"x",\N
"ParameterGuesser","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser~ParameterGuesser~\\[QWeightedObservedPoint;"
"sigma",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{PolynomialFitter.java[PolynomialFitter~fit"
"y",\N
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[D"
"observations",\N
"steps",\N
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~addObservedPoint~D~D~D"
"guess","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{HarmonicFitter.java[HarmonicFitter[ParameterGuesser~guess"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{PolynomialFitter.java[PolynomialFitter~fit~I~\\[D"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[D~D~D~D~D"
"maxEval",\N
"weight",\N
"AbstractScalarDifferentiableOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractScalarDifferentiableOptimizer.java[AbstractScalarDifferentiableOptimizer"
"steps",\N
"x",\N
"guess",\N
"AbstractScalarDifferentiableOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractScalarDifferentiableOptimizer.java[AbstractScalarDifferentiableOptimizer~AbstractScalarDifferentiableOptimizer"
"rho",\N
"y",\N
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{PolynomialFitter.java[PolynomialFitter~fit~\\[D"
"khi",\N
"computeObjectiveGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractScalarDifferentiableOptimizer.java[AbstractScalarDifferentiableOptimizer~computeObjectiveGradient~\\[D"
"addObservedPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~addObservedPoint~QWeightedObservedPoint;"
"guess",\N
"gamma",\N
"evaluationPoint",\N
"observed",\N
"sigma",\N
"AbstractLeastSquaresOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer"
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizer.java[GaussNewtonOptimizer"
"clearObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~clearObservations"
"AbstractLeastSquaresOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~AbstractLeastSquaresOptimizer"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[\\[D"
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizer.java[GaussNewtonOptimizer~GaussNewtonOptimizer"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~fit~QT;~\\[D"
"referenceSimplex",\N
"computeCost","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeCost~\\[D"
"GaussNewtonOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizer.java[GaussNewtonOptimizer~GaussNewtonOptimizer~Z"
"NelderMeadSimplex","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.direct{NelderMeadSimplex.java[NelderMeadSimplex~NelderMeadSimplex~\\[\\[D~D~D~D~D"
"f",\N
"residuals",\N
"useLU",\N
"initialGuess",\N
"referenceSimplex",\N
"computeCovariances","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeCovariances~\\[D~D"
"Preconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{Preconditioner.java[Preconditioner"
"fit","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~fit~I~QT;~\\[D"
"rho",\N
"params",\N
"precondition","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{Preconditioner.java[Preconditioner~precondition~\\[D~\\[D"
"khi",\N
"maxEval",\N
"threshold",\N
"point",\N
"gamma",\N
"f",\N
"computeResiduals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeResiduals~\\[D"
"sigma",\N
"r",\N
"initialGuess",\N
"objectiveValue",\N
"AbstractDifferentiableOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractDifferentiableOptimizer.java[AbstractDifferentiableOptimizer"
"getObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter~getObservations"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer"
"computeSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~computeSigma~\\[D~D"
"computeObjectiveGradient","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractDifferentiableOptimizer.java[AbstractDifferentiableOptimizer~computeObjectiveGradient~\\[D"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer"
"OldTheoreticalValuesFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter[OldTheoreticalValuesFunction"
"params",\N
"evaluationPoint",\N
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer~D~D~D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter[OldTheoreticalValuesFunction~value~\\[D"
"covarianceSingularityThreshold",\N
"NonLinearConjugateGradientOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer"
"costRelativeTolerance",\N
"point",\N
"getChiSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getChiSquare"
"setInitialStep","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer~setInitialStep~D"
"TheoreticalValuesFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter[TheoreticalValuesFunction"
"parRelativeTolerance",\N
"initialStep",\N
"getCovariances","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getCovariances"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.fitting{CurveFitter.java[CurveFitter[TheoreticalValuesFunction~value~\\[D"
"orthoTolerance",\N
"IdentityPreconditioner","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[IdentityPreconditioner"
"LevenbergMarquardtOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizer.java[LevenbergMarquardtOptimizer~LevenbergMarquardtOptimizer~D~D~D~D~D"
"point",\N
"getCovariances","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getCovariances~D"
"precondition","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[IdentityPreconditioner~precondition~\\[D~\\[D"
"LinearOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearOptimizer.java[LinearOptimizer"
"initialStepBoundFactor",\N
"threshold",\N
"variables",\N
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearOptimizer.java[LinearOptimizer~getIterations"
"costRelativeTolerance",\N
"getJacobianEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getJacobianEvaluations"
"r",\N
"parRelativeTolerance",\N
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearOptimizer.java[LinearOptimizer~getMaxIterations"
"getRMS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~getRMS"
"LineSearchFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[LineSearchFunction"
"orthoTolerance",\N
"LineSearchFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[LineSearchFunction~LineSearchFunction~\\[D"
"setMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearOptimizer.java[LinearOptimizer~setMaxIterations~I"
"threshold",\N
"guessParametersErrors","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~guessParametersErrors"
"maxIterations",\N
"searchDirection",\N
"NoFeasibleSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{NoFeasibleSolutionException.java[NoFeasibleSolutionException"
"setCost","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~setCost~D"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizer.java[NonLinearConjugateGradientOptimizer[LineSearchFunction~value~D"
"NoFeasibleSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{NoFeasibleSolutionException.java[NoFeasibleSolutionException~NoFeasibleSolutionException"
"UnboundedSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{UnboundedSolutionException.java[UnboundedSolutionException"
"cost",\N
"UnboundedSolutionException","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{UnboundedSolutionException.java[UnboundedSolutionException~UnboundedSolutionException"
"x",\N
"LinearObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction"
"setUp","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~setUp"
"LinearObjectiveFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~LinearObjectiveFunction~\\[D~D"
"AbstractLinearOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexSolver.java[SimplexSolver"
"updateJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~updateJacobian"
"AbstractLinearOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~AbstractLinearOptimizer"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexSolver.java[SimplexSolver~SimplexSolver"
"coefficients",\N
"updateResidualsAndCost","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer~updateResidualsAndCost"
"constantTerm",\N
"getConstraints","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~getConstraints"
"SimplexSolver","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexSolver.java[SimplexSolver~SimplexSolver~D~I"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~equals~QObject;"
"cols","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^cols"
"epsilon",\N
"getFunction","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~getFunction"
"other",\N
"maxUlps",\N
"cost","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^cost"
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~getIterations"
"getConstantTerm","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~getConstantTerm"
"LinearConstraint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearConstraint.java[LinearConstraint"
"objective","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^objective"
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~getMaxIterations"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearConstraint.java[LinearConstraint~equals~QObject;"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~getValue~\\[D"
"point","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^point"
"restrictToNonNegative","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~restrictToNonNegative"
"other",\N
"point",\N
"rows","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^rows"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearConstraint.java[LinearConstraint~getValue"
"setMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer~setMaxIterations~I"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearObjectiveFunction.java[LinearObjectiveFunction~hashCode"
"weightedResidualJacobian","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^weightedResidualJacobian"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{LinearConstraint.java[LinearConstraint~hashCode"
"maxIterations",\N
"SimplexTableau","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau"
"DEFAULT_MAX_ITERATIONS","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{AbstractLinearOptimizer.java[AbstractLinearOptimizer^DEFAULT_MAX_ITERATIONS"
"weightedResiduals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizer.java[AbstractLeastSquaresOptimizer^weightedResiduals"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker"
"divideRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~divideRow~I~D"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~SimpleUnivariateValueChecker"
"BaseUnivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseUnivariateOptimizer.java[BaseUnivariateOptimizer"
"BaseAbstractUnivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer"
"dividendRow",\N
"UnivariateMultiStartOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizer.java[UnivariateMultiStartOptimizer"
"computeObjectiveValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~computeObjectiveValue~D"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~SimpleUnivariateValueChecker~D~D"
"divisor",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizer.java[UnivariateMultiStartOptimizer~getEvaluations"
"point",\N
"relativeThreshold",\N
"dropPhase1Objective","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~dropPhase1Objective"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizer.java[UnivariateMultiStartOptimizer~getMaxEvaluations"
"absoluteThreshold",\N
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~doOptimize"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~equals~QObject;"
"SimpleUnivariateValueChecker","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~SimpleUnivariateValueChecker~D~D~I"
"getOptima","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizer.java[UnivariateMultiStartOptimizer~getOptima"
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~getEvaluations"
"other",\N
"relativeThreshold",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~getMax"
"getArtificialVariableOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getArtificialVariableOffset"
"BrentOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BrentOptimizer.java[BrentOptimizer"
"absoluteThreshold",\N
"BrentOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BrentOptimizer.java[BrentOptimizer~BrentOptimizer~D~D"
"maxIter",\N
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~getMaxEvaluations"
"getBasicRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getBasicRow~I"
"converged","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueChecker.java[SimpleUnivariateValueChecker~converged~I~QUnivariatePointValuePair;~QUnivariatePointValuePair;"
"rel",\N
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~getMin"
"col",\N
"abs",\N
"iteration",\N
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getData"
"getStartValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BaseAbstractUnivariateOptimizer.java[BaseAbstractUnivariateOptimizer~getStartValue"
"doOptimize","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BrentOptimizer.java[BrentOptimizer~doOptimize"
"previous",\N
"getEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getEntry~I~I"
"current",\N
"UnivariateOptimizer","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariateOptimizer.java[UnivariateOptimizer"
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder"
"row",\N
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~BracketFinder"
"UnivariatePointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair"
"Primes","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{Primes.java[Primes"
"column",\N
"UnivariatePointValuePair","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~UnivariatePointValuePair~D~D"
"isPrime","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{Primes.java[Primes~isPrime~I"
"BracketFinder","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~BracketFinder~D~I"
"getHeight","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getHeight"
"n",\N
"point",\N
"growLimit",\N
"getNumArtificialVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getNumArtificialVariables"
"value",\N
"nextPrime","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{Primes.java[Primes~nextPrime~I"
"maxEvaluations",\N
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~getPoint"
"getNumDecisionVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getNumDecisionVariables"
"n",\N
"getEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getEvaluations"
"primeFactors","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{Primes.java[Primes~primeFactors~I"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{UnivariatePointValuePair.java[UnivariatePointValuePair~getValue"
"getNumObjectiveFunctions","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getNumObjectiveFunctions"
"getFHi","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getFHi"
"n",\N
"SmallPrimes","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes"
"getNumSlackVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getNumSlackVariables"
"getFLo","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getFLo"
"boundedTrialDivision","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes~boundedTrialDivision~I~I~QList\\<QInteger;>;"
"PollardRho","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{PollardRho.java[PollardRho"
"getOriginalNumDecisionVariables","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getOriginalNumDecisionVariables"
"getFMid","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getFMid"
"gcdPositive","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{PollardRho.java[PollardRho~gcdPositive~I~I"
"n",\N
"getRhsOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getRhsOffset"
"a",\N
"maxFactor",\N
"getHi","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getHi"
"b",\N
"factors",\N
"getSlackVariableOffset","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getSlackVariableOffset"
"getLo","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getLo"
"millerRabinPrimeTest","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes~millerRabinPrimeTest~I"
"primeFactors","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{PollardRho.java[PollardRho~primeFactors~I"
"getWidth","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~getWidth"
"getMaxEvaluations","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getMaxEvaluations"
"n",\N
"n",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~hashCode"
"rhoBrent","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{PollardRho.java[PollardRho~rhoBrent~I"
"smallTrialDivision","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes~smallTrialDivision~I~QList\\<QInteger;>;"
"getMid","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.univariate{BracketFinder.java[BracketFinder~getMid"
"initializeColumnLabels","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~initializeColumnLabels"
"n",\N
"n",\N
"RandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomVectorGenerator.java[RandomVectorGenerator"
"factors",\N
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomVectorGenerator.java[RandomVectorGenerator~nextVector"
"isOptimal","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~isOptimal"
"AbstractRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator"
"trialDivision","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes~trialDivision~I"
"AbstractRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~AbstractRandomGenerator"
"ValueServer","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer"
"normalizeConstraints","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~normalizeConstraints~QCollection\\<QLinearConstraint;>;"
"n",\N
"ValueServer","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~ValueServer"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~clear"
"originalConstraints",\N
"PRIMES","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes^PRIMES"
"ValueServer","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~ValueServer~QRandomDataImpl;"
"nextBoolean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextBoolean"
"setEntry","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~setEntry~I~I~D"
"PRIMES_LAST","=mathmain3.6/src<main.java.org.apache.commons.math3.primes{SmallPrimes.java[SmallPrimes^PRIMES_LAST"
"randomData",\N
"row",\N
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextBytes~\\[B"
"ValueServer","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~ValueServer~QRandomGenerator;"
"Well44497b","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b"
"column",\N
"bytes",\N
"Well44497b","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b~Well44497b"
"value",\N
"generator",\N
"nextDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextDouble"
"subtractRow","=mathmain3.6/src<main.java.org.apache.commons.math3.optimization.linear{SimplexTableau.java[SimplexTableau~subtractRow~I~I~D"
"closeReplayFile","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~closeReplayFile"
"Well44497b","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b~Well44497b~I"
"nextFloat","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextFloat"
"minuendRow",\N
"seed",\N
"getEmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~getEmpiricalDistribution"
"subtrahendRow",\N
"nextGaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextGaussian"
"Well44497b","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b~Well44497b~\\[I"
"getMode","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~getMode"
"multiple",\N
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextInt"
"seed",\N
"Well19937a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a"
"getMu","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~getMu"
"Well44497b","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b~Well44497b~J"
"Well19937a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a~Well19937a"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextInt~I"
"getSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~getSigma"
"seed",\N
"n",\N
"Well19937a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a~Well19937a~I"
"getValuesFileURL","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~getValuesFileURL"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497b.java[Well44497b~next~I"
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~nextLong"
"seed",\N
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~reSeed~J"
"bits",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~setSeed~I"
"Well19937a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a~Well19937a~\\[I"
"UncorrelatedRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGenerator.java[UncorrelatedRandomVectorGenerator"
"seed",\N
"seed",\N
"seed",\N
"UncorrelatedRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGenerator.java[UncorrelatedRandomVectorGenerator~UncorrelatedRandomVectorGenerator~\\[D~\\[D~QNormalizedRandomGenerator;"
"resetReplayFile","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~resetReplayFile"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~setSeed~\\[I"
"Well19937a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a~Well19937a~J"
"mean",\N
"setMode","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~setMode~I"
"seed",\N
"seed",\N
"standardDeviation",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractRandomGenerator.java[AbstractRandomGenerator~setSeed~J"
"mode",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937a.java[Well19937a~next~I"
"generator",\N
"setMu","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~setMu~D"
"seed",\N
"UncorrelatedRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGenerator.java[UncorrelatedRandomVectorGenerator~UncorrelatedRandomVectorGenerator~I~QNormalizedRandomGenerator;"
"bits",\N
"UnitSphereRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UnitSphereRandomVectorGenerator.java[UnitSphereRandomVectorGenerator"
"mu",\N
"RandomAdaptor","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor"
"dimension",\N
"UnitSphereRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UnitSphereRandomVectorGenerator.java[UnitSphereRandomVectorGenerator~UnitSphereRandomVectorGenerator~I~QRandomGenerator;"
"setSigma","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~setSigma~D"
"RandomAdaptor","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~RandomAdaptor~QRandomGenerator;"
"generator",\N
"dimension",\N
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGenerator.java[UncorrelatedRandomVectorGenerator~nextVector"
"sigma",\N
"randomGenerator",\N
"rand",\N
"setValuesFileURL","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~setValuesFileURL~QString;"
"createAdaptor","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~createAdaptor~QRandomGenerator;"
"RandomData","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomData.java[RandomData"
"UnitSphereRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UnitSphereRandomVectorGenerator.java[UnitSphereRandomVectorGenerator~UnitSphereRandomVectorGenerator~I"
"randomGenerator",\N
"url",\N
"Well1024a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a"
"dimension",\N
"nextBoolean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextBoolean"
"setValuesFileURL","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer~setValuesFileURL~QURL;"
"Well1024a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a~Well1024a"
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UnitSphereRandomVectorGenerator.java[UnitSphereRandomVectorGenerator~nextVector"
"url",\N
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextBytes~\\[B"
"Well1024a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a~Well1024a~I"
"UniformRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UniformRandomGenerator.java[UniformRandomGenerator"
"CONSTANT_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^CONSTANT_MODE"
"seed",\N
"bytes",\N
"UniformRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UniformRandomGenerator.java[UniformRandomGenerator~UniformRandomGenerator~QRandomGenerator;"
"DIGEST_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^DIGEST_MODE"
"nextDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextDouble"
"Well1024a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a~Well1024a~\\[I"
"generator",\N
"seed",\N
"EXPONENTIAL_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^EXPONENTIAL_MODE"
"nextFloat","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextFloat"
"nextNormalizedDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{UniformRandomGenerator.java[UniformRandomGenerator~nextNormalizedDouble"
"Well1024a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a~Well1024a~J"
"GAUSSIAN_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^GAUSSIAN_MODE"
"nextGaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextGaussian"
"HaltonSequenceGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{HaltonSequenceGenerator.java[HaltonSequenceGenerator"
"seed",\N
"getNextIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.random{HaltonSequenceGenerator.java[HaltonSequenceGenerator~getNextIndex"
"REPLAY_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^REPLAY_MODE"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextInt"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well1024a.java[Well1024a~next~I"
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{HaltonSequenceGenerator.java[HaltonSequenceGenerator~nextVector"
"UNIFORM_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ValueServer.java[ValueServer^UNIFORM_MODE"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextInt~I"
"bits",\N
"scramble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{HaltonSequenceGenerator.java[HaltonSequenceGenerator~scramble~I~I~I~I"
"n",\N
"NormalizedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{NormalizedRandomGenerator.java[NormalizedRandomGenerator"
"Well44497a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a"
"Well44497a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a~Well44497a"
"nextNormalizedDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{NormalizedRandomGenerator.java[NormalizedRandomGenerator~nextNormalizedDouble"
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~nextLong"
"i",\N
"j",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~setSeed~I"
"Well44497a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a~Well44497a~I"
"MersenneTwister","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister"
"b",\N
"MersenneTwister","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~MersenneTwister"
"seed",\N
"seed",\N
"digit",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~setSeed~\\[I"
"Well44497a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a~Well44497a~\\[I"
"MersenneTwister","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~MersenneTwister~I"
"RandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator"
"seed",\N
"seed",\N
"seed",\N
"nextBoolean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextBoolean"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomAdaptor.java[RandomAdaptor~setSeed~J"
"Well44497a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a~Well44497a~J"
"MersenneTwister","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~MersenneTwister~\\[I"
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextBytes~\\[B"
"seed",\N
"seed",\N
"seed",\N
"bytes",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well44497a.java[Well44497a~next~I"
"RandomDataImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl"
"MersenneTwister","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~MersenneTwister~J"
"nextDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextDouble"
"RandomDataImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~RandomDataImpl"
"bits",\N
"seed",\N
"nextFloat","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextFloat"
"RandomDataImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~RandomDataImpl~QRandomGenerator;"
"RandomGeneratorFactory","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGeneratorFactory.java[RandomGeneratorFactory"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~next~I"
"convertToLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGeneratorFactory.java[RandomGeneratorFactory~convertToLong~\\[I"
"nextGaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextGaussian"
"rand",\N
"bits",\N
"seed",\N
"getDelegate","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~getDelegate"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextInt"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~setSeed~I"
"createRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGeneratorFactory.java[RandomGeneratorFactory~createRandomGenerator~QRandom;"
"nextBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~nextBeta~D~D"
"seed",\N
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextInt~I"
"rng",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~setSeed~\\[I"
"alpha",\N
"n",\N
"BitsStreamGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator"
"beta",\N
"seed",\N
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~nextLong"
"BitsStreamGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~BitsStreamGenerator"
"nextBinomial","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~nextBinomial~I~D"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{MersenneTwister.java[MersenneTwister~setSeed~J"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~setSeed~I"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~clear"
"numberOfTrials",\N
"seed",\N
"seed",\N
"probabilityOfSuccess",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~next~I"
"Well19937c","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~setSeed~\\[I"
"nextCauchy","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~nextCauchy~D~D"
"Well19937c","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c~Well19937c"
"bits",\N
"seed",\N
"median",\N
"nextBoolean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextBoolean"
"Well19937c","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c~Well19937c~I"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomGenerator.java[RandomGenerator~setSeed~J"
"scale",\N
"seed",\N
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextBytes~\\[B"
"nextChiSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~nextChiSquare~D"
"seed",\N
"Well19937c","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c~Well19937c~\\[I"
"bytes",\N
"GaussianRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{GaussianRandomGenerator.java[GaussianRandomGenerator"
"df",\N
"seed",\N
"GaussianRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{GaussianRandomGenerator.java[GaussianRandomGenerator~GaussianRandomGenerator~QRandomGenerator;"
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextBytes~\\[B~I~I"
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~reSeed~J"
"Well19937c","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c~Well19937c~J"
"generator",\N
"bytes",\N
"seed",\N
"start",\N
"seed",\N
"nextNormalizedDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{GaussianRandomGenerator.java[GaussianRandomGenerator~nextNormalizedDouble"
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~reSeed"
"len",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well19937c.java[Well19937c~next~I"
"ISAACRandom","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom"
"reSeedSecure","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~reSeedSecure"
"nextDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextDouble"
"bits",\N
"ISAACRandom","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~ISAACRandom"
"reSeedSecure","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~reSeedSecure~J"
"nextFloat","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextFloat"
"CorrelatedRandomVectorGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{CorrelatedRandomVectorGenerator.java[CorrelatedRandomVectorGenerator"
"ISAACRandom","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~ISAACRandom~J"
"seed",\N
"getGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{CorrelatedRandomVectorGenerator.java[CorrelatedRandomVectorGenerator~getGenerator"
"nextGaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextGaussian"
"seed",\N
"setSecureAlgorithm","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataImpl.java[RandomDataImpl~setSecureAlgorithm~QString;~QString;"
"getRank","=mathmain3.6/src<main.java.org.apache.commons.math3.random{CorrelatedRandomVectorGenerator.java[CorrelatedRandomVectorGenerator~getRank"
"ISAACRandom","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~ISAACRandom~\\[I"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextInt"
"algorithm",\N
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{CorrelatedRandomVectorGenerator.java[CorrelatedRandomVectorGenerator~nextVector"
"seed",\N
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextInt~I"
"provider",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~next~I"
"AbstractWell","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell"
"SobolSequenceGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SobolSequenceGenerator.java[SobolSequenceGenerator"
"n",\N
"getNextIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SobolSequenceGenerator.java[SobolSequenceGenerator~getNextIndex"
"AbstractWell","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~AbstractWell~I~I~I~I"
"bits",\N
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextLong"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~setSeed~I"
"k",\N
"nextVector","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SobolSequenceGenerator.java[SobolSequenceGenerator~nextVector"
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~nextLong~J"
"m1",\N
"seed",\N
"n",\N
"StableRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{StableRandomGenerator.java[StableRandomGenerator"
"m2",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~setSeed~J"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~setSeed~I"
"nextNormalizedDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{StableRandomGenerator.java[StableRandomGenerator~nextNormalizedDouble"
"m3",\N
"seed",\N
"AbstractWell","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~AbstractWell~I~I~I~I~I"
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution"
"seed",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{ISAACRandom.java[ISAACRandom~setSeed~\\[I"
"k",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~setSeed~\\[I"
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution"
"m1",\N
"seed",\N
"seed",\N
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution~I"
"m2",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{BitsStreamGenerator.java[BitsStreamGenerator~setSeed~J"
"Well512a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a"
"m3",\N
"binCount",\N
"Well512a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a~Well512a"
"seed",\N
"seed",\N
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution~I~QRandomGenerator;"
"Well512a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a~Well512a~I"
"JDKRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{JDKRandomGenerator.java[JDKRandomGenerator"
"AbstractWell","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~AbstractWell~I~I~I~I~\\[I"
"binCount",\N
"JDKRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{JDKRandomGenerator.java[JDKRandomGenerator~JDKRandomGenerator"
"seed",\N
"k",\N
"generator",\N
"Well512a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a~Well512a~\\[I"
"m1",\N
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution~QRandomGenerator;"
"JDKRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{JDKRandomGenerator.java[JDKRandomGenerator~JDKRandomGenerator~I"
"m2",\N
"seed",\N
"seed",\N
"generator",\N
"m3",\N
"Well512a","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a~Well512a~J"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{JDKRandomGenerator.java[JDKRandomGenerator~setSeed~I"
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution~I~QRandomDataImpl;"
"seed",\N
"seed",\N
"binCount",\N
"seed",\N
"AbstractWell","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~AbstractWell~I~I~I~I~J"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{Well512a.java[Well512a~next~I"
"randomData",\N
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{JDKRandomGenerator.java[JDKRandomGenerator~setSeed~\\[I"
"k",\N
"EmpiricalDistribution","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~EmpiricalDistribution~QRandomDataImpl;"
"bits",\N
"m1",\N
"seed",\N
"m2",\N
"randomData",\N
"RandomDataGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator"
"SynchronizedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator"
"m3",\N
"RandomDataGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~RandomDataGenerator"
"SynchronizedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~SynchronizedRandomGenerator~QRandomGenerator;"
"cumulativeProbability","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~cumulativeProbability~D"
"seed",\N
"x",\N
"rng",\N
"RandomDataGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~RandomDataGenerator~QRandomGenerator;"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~next~I"
"nextBoolean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextBoolean"
"density","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~density~D"
"rand",\N
"bits",\N
"x",\N
"getRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~getRandomGenerator"
"nextBytes","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextBytes~\\[B"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~setSeed~I"
"getBinCount","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getBinCount"
"bytes",\N
"nextBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~nextBeta~D~D"
"seed",\N
"getGeneratorUpperBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getGeneratorUpperBounds"
"nextDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextDouble"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~setSeed~\\[I"
"alpha",\N
"beta",\N
"nextFloat","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextFloat"
"getNumericalMean","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getNumericalMean"
"seed",\N
"nextBinomial","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~nextBinomial~I~D"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell~setSeed~J"
"getNumericalVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getNumericalVariance"
"nextGaussian","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextGaussian"
"numberOfTrials",\N
"seed",\N
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextInt"
"getSupportLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getSupportLowerBound"
"probabilityOfSuccess",\N
"i1","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^i1"
"getSupportUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getSupportUpperBound"
"nextCauchy","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~nextCauchy~D~D"
"nextInt","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextInt~I"
"i2","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^i2"
"median",\N
"n",\N
"getUpperBounds","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~getUpperBounds"
"i3","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^i3"
"scale",\N
"nextLong","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~nextLong"
"isLoaded","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~isLoaded"
"nextChiSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~nextChiSquare~D"
"iRm1","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^iRm1"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~setSeed~I"
"isSupportConnected","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~isSupportConnected"
"df",\N
"iRm2","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^iRm2"
"seed",\N
"isSupportLowerBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~isSupportLowerBoundInclusive"
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~reSeed~J"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~setSeed~\\[I"
"index","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^index"
"seed",\N
"isSupportUpperBoundInclusive","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~isSupportUpperBoundInclusive"
"seed",\N
"v","=mathmain3.6/src<main.java.org.apache.commons.math3.random{AbstractWell.java[AbstractWell^v"
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~reSeed"
"setSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{SynchronizedRandomGenerator.java[SynchronizedRandomGenerator~setSeed~J"
"probability","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~probability~D"
"Gamma","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma"
"reSeedSecure","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~reSeedSecure"
"x",\N
"seed",\N
"digamma","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~digamma~D"
"reSeed","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~reSeed~J"
"reSeedSecure","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~reSeedSecure~J"
"BesselJ","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ"
"x",\N
"seed",\N
"BesselJ","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ~BesselJ~D"
"seed",\N
"gamma","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~gamma~D"
"reseedRandomGenerator","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution~reseedRandomGenerator~J"
"setSecureAlgorithm","=mathmain3.6/src<main.java.org.apache.commons.math3.random{RandomDataGenerator.java[RandomDataGenerator~setSecureAlgorithm~QString;~QString;"
"order",\N
"x",\N
"seed",\N
"rjBesl","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ~rjBesl~D~D~I"
"algorithm",\N
"invGamma1pm1","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~invGamma1pm1~D"
"DEFAULT_BIN_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution^DEFAULT_BIN_COUNT"
"provider",\N
"x",\N
"x",\N
"alpha",\N
"randomData","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution^randomData"
"Beta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta"
"lanczos","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~lanczos~D"
"nb",\N
"logBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~logBeta~D~D~D~I"
"DataAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[DataAdapter"
"BesselJResult","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ[BesselJResult"
"x",\N
"a",\N
"computeBinStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[DataAdapter~computeBinStats"
"BesselJResult","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ[BesselJResult~BesselJResult~\\[D~I"
"logGamma","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~logGamma~D"
"b",\N
"computeStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[DataAdapter~computeStats"
"b",\N
"epsilon",\N
"x",\N
"maxIterations",\N
"n",\N
"StreamDataAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[StreamDataAdapter"
"regularizedGammaP","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~regularizedGammaP~D~D"
"logBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~logBeta~D~D"
"StreamDataAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[StreamDataAdapter~StreamDataAdapter~QBufferedReader;"
"getVals","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ[BesselJResult~getVals"
"a",\N
"in",\N
"p",\N
"getnVals","=mathmain3.6/src<main.java.org.apache.commons.math3.special{BesselJ.java[BesselJ[BesselJResult~getnVals"
"x",\N
"q",\N
"computeBinStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[StreamDataAdapter~computeBinStats"
"regularizedGammaP","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~regularizedGammaP~D~D~D~I"
"Erf","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf"
"regularizedBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~regularizedBeta~D~D~D"
"computeStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[StreamDataAdapter~computeStats"
"a",\N
"erf","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf~erf~D"
"x",\N
"x",\N
"ArrayDataAdapter","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[ArrayDataAdapter"
"x",\N
"a",\N
"epsilon",\N
"computeBinStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[ArrayDataAdapter~computeBinStats"
"erf","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf~erf~D~D"
"b",\N
"maxIterations",\N
"regularizedBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~regularizedBeta~D~D~D~D"
"computeStats","=mathmain3.6/src<main.java.org.apache.commons.math3.random{EmpiricalDistribution.java[EmpiricalDistribution[ArrayDataAdapter~computeStats"
"x1",\N
"regularizedGammaQ","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~regularizedGammaQ~D~D"
"x2",\N
"x",\N
"a",\N
"Frequency","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency"
"erfInv","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf~erfInv~D"
"a",\N
"x",\N
"Frequency","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~Frequency"
"b",\N
"x",\N
"regularizedGammaQ","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~regularizedGammaQ~D~D~D~I"
"Frequency","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~Frequency~QComparator\\<*>;"
"epsilon",\N
"erfc","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf~erfc~D"
"a",\N
"regularizedBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~regularizedBeta~D~D~D~I"
"comparator",\N
"x",\N
"x",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~clear"
"x",\N
"epsilon",\N
"erfcInv","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Erf.java[Erf~erfcInv~D"
"a",\N
"maxIterations",\N
"entrySetIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~entrySetIterator"
"x",\N
"b",\N
"trigamma","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma~trigamma~D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~equals~QObject;"
"StatUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{StatUtils.java[StatUtils"
"maxIterations",\N
"x",\N
"mode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{StatUtils.java[StatUtils~mode~\\[D~I~I"
"regularizedBeta","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Beta.java[Beta~regularizedBeta~D~D~D~D~I"
"obj",\N
"GAMMA","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma^GAMMA"
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCount~QComparable\\<*>;"
"sample",\N
"x",\N
"a",\N
"begin",\N
"LANCZOS_G","=mathmain3.6/src<main.java.org.apache.commons.math3.special{Gamma.java[Gamma^LANCZOS_G"
"v",\N
"b",\N
"length",\N
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCount~I"
"Clusterable","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Clusterable.java[Clusterable"
"epsilon",\N
"normalize","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{StatUtils.java[StatUtils~normalize~\\[D"
"centroidOf","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Clusterable.java[Clusterable~centroidOf~QCollection\\<QT;>;"
"v",\N
"maxIterations",\N
"sample",\N
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCount~J"
"p",\N
"EuclideanDoublePoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint"
"DBSCANClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{DBSCANClusterer.java[DBSCANClusterer"
"EuclideanDoublePoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~EuclideanDoublePoint~\\[D"
"distanceFrom","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Clusterable.java[Clusterable~distanceFrom~QT;"
"v",\N
"getEps","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{DBSCANClusterer.java[DBSCANClusterer~getEps"
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCount~C"
"point",\N
"p",\N
"getMinPts","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{DBSCANClusterer.java[DBSCANClusterer~getMinPts"
"v",\N
"centroidOf","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~centroidOf~QCollection\\<QEuclideanDoublePoint;>;"
"Cluster","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Cluster.java[Cluster"
"EuclideanIntegerPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint"
"Cluster","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Cluster.java[Cluster~Cluster~QT;"
"getCumFreq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumFreq~QComparable\\<*>;"
"points",\N
"EuclideanIntegerPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~EuclideanIntegerPoint~\\[I"
"center",\N
"v",\N
"distanceFrom","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~distanceFrom~QEuclideanDoublePoint;"
"point",\N
"getCumFreq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumFreq~I"
"addPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Cluster.java[Cluster~addPoint~QT;"
"p",\N
"centroidOf","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~centroidOf~QCollection\\<QEuclideanIntegerPoint;>;"
"v",\N
"point",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~equals~QObject;"
"points",\N
"getCenter","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Cluster.java[Cluster~getCenter"
"getCumFreq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumFreq~J"
"other",\N
"distanceFrom","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~distanceFrom~QEuclideanIntegerPoint;"
"v",\N
"getPoints","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{Cluster.java[Cluster~getPoints"
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~getPoint"
"p",\N
"getCumFreq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumFreq~C"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~hashCode"
"KMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~equals~QObject;"
"v",\N
"KMeansPlusPlusClusterer","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClusterer.java[KMeansPlusPlusClusterer~KMeansPlusPlusClusterer~QRandom;"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePoint.java[EuclideanDoublePoint~toString"
"other",\N
"getCumPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumPct~QComparable\\<*>;"
"random",\N
"getPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~getPoint"
"v",\N
"KendallsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{KendallsCorrelation.java[KendallsCorrelation"
"SpearmansCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{SpearmansCorrelation.java[SpearmansCorrelation"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~hashCode"
"KendallsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{KendallsCorrelation.java[KendallsCorrelation~KendallsCorrelation"
"getCumPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumPct~I"
"SpearmansCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{SpearmansCorrelation.java[SpearmansCorrelation~SpearmansCorrelation"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPoint.java[EuclideanIntegerPoint~toString"
"v",\N
"KendallsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{KendallsCorrelation.java[KendallsCorrelation~KendallsCorrelation~\\[\\[D"
"correlation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{SpearmansCorrelation.java[SpearmansCorrelation~correlation~\\[D~\\[D"
"getCumPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumPct~J"
"PearsonsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelation.java[PearsonsCorrelation"
"data",\N
"xArray",\N
"PearsonsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelation.java[PearsonsCorrelation~PearsonsCorrelation"
"v",\N
"Covariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{Covariance.java[Covariance"
"yArray",\N
"Covariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{Covariance.java[Covariance~Covariance"
"getCumPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getCumPct~C"
"PearsonsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelation.java[PearsonsCorrelation~PearsonsCorrelation~\\[\\[D"
"getRankCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{SpearmansCorrelation.java[SpearmansCorrelation~getRankCorrelation"
"v",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{Covariance.java[Covariance~getN"
"data",\N
"StorelessBivariateCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance"
"getMode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getMode"
"PearsonsCorrelation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelation.java[PearsonsCorrelation~PearsonsCorrelation~QCovariance;"
"StorelessBivariateCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance~StorelessBivariateCovariance"
"StorelessCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessCovariance.java[StorelessCovariance"
"StorelessCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessCovariance.java[StorelessCovariance~StorelessCovariance~I"
"getPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getPct~QComparable\\<*>;"
"covariance",\N
"StorelessBivariateCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance~StorelessBivariateCovariance~Z"
"correlation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelation.java[PearsonsCorrelation~correlation~\\[D~\\[D"
"v",\N
"dim",\N
"biasCorrection",\N
"StorelessCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessCovariance.java[StorelessCovariance~StorelessCovariance~I~Z"
"getPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getPct~I"
"xArray",\N
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance~append~QStorelessBivariateCovariance;"
"yArray",\N
"v",\N
"dim",\N
"cov",\N
"biasCorrected",\N
"getPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getPct~J"
"MultivariateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance~getN"
"AbstractStorelessUnivariateStatistic","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic"
"MultivariateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~MultivariateSummaryStatistics~I~Z"
"v",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~clear"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.correlation{StorelessBivariateCovariance.java[StorelessBivariateCovariance~increment~D~D"
"k",\N
"getPct","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getPct~C"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~copy"
"x",\N
"isCovarianceBiasCorrected",\N
"v",\N
"y",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~clear"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~equals~QObject;"
"getSumFreq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getSumFreq"
"StatisticalSummaryValues","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~equals~QObject;"
"object",\N
"StatisticalSummaryValues","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~StatisticalSummaryValues~D~D~J~D~D~D"
"getUniqueCount","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~getUniqueCount"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~getResult"
"object",\N
"mean",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~hashCode"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getDimension"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~hashCode"
"variance",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~toString"
"n",\N
"getGeoMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getGeoMeanImpl"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractStorelessUnivariateStatistic.java[AbstractStorelessUnivariateStatistic~increment~D"
"max",\N
"valuesIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency~valuesIterator"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getGeometricMean"
"d",\N
"min",\N
"NaturalComparator","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency[NaturalComparator"
"StatisticalSummary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary"
"sum",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMax"
"compare","=mathmain3.6/src<main.java.org.apache.commons.math3.stat{Frequency.java[Frequency[NaturalComparator~compare~QComparable\\<QT;>;~QComparable\\<QT;>;"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getMax"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~equals~QObject;"
"getMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMaxImpl"
"o1",\N
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getMean"
"object",\N
"o2",\N
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMean"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getMax"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getMin"
"AggregateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics"
"getMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMeanImpl"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getMean"
"AggregateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~AggregateSummaryStatistics"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getN"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMin"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getMin"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getStandardDeviation"
"AggregateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~AggregateSummaryStatistics~QSummaryStatistics;~QSummaryStatistics;"
"getMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getMinImpl"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getN"
"prototypeStatistics",\N
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getSum"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getN"
"initialStatistics",\N
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getStandardDeviation"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummary.java[StatisticalSummary~getVariance"
"aggregate","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~aggregate~QCollection\\<+QStatisticalSummary;>;"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getStandardDeviation"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getSum"
"StorelessUnivariateStatistic","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic"
"statistics",\N
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSum"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic~clear"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~getVariance"
"createContributingStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~createContributingStatistics"
"getSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSumImpl"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic~copy"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~hashCode"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getGeometricMean"
"getSumLog","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSumLog"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic~getN"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValues.java[StatisticalSummaryValues~toString"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getMax"
"getSumLogImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSumLogImpl"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic~getResult"
"AbstractUnivariateStatistic","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatistic.java[AbstractUnivariateStatistic"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getMean"
"getSumSq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSumSq"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatistic.java[AbstractUnivariateStatistic~copy"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatistic.java[StorelessUnivariateStatistic~increment~D"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getMin"
"getData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatistic.java[AbstractUnivariateStatistic~getData"
"getSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~getSumsqImpl"
"d",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getN"
"SynchronizedDescriptiveStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~hashCode"
"getDataRef","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatistic.java[AbstractUnivariateStatistic~getDataRef"
"SynchronizedDescriptiveStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~SynchronizedDescriptiveStatistics"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatistics.java[MultivariateSummaryStatistics~toString"
"setData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatistic.java[AbstractUnivariateStatistic~setData~\\[D"
"getSecondMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getSecondMoment"
"addValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~addValue~D"
"UnivariateStatistic","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{UnivariateStatistic.java[UnivariateStatistic"
"values",\N
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getStandardDeviation"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{UnivariateStatistic.java[UnivariateStatistic~copy"
"v",\N
"SynchronizedMultivariateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getSum"
"SynchronizedMultivariateSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~SynchronizedMultivariateSummaryStatistics~I~Z"
"apply","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~apply~QUnivariateStatistic;"
"StatisticalMultivariateSummary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary"
"getSumOfLogs","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getSumOfLogs"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getDimension"
"k",\N
"stat",\N
"isCovarianceBiasCorrected",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~clear"
"getSummary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getSummary"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getGeometricMean"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~clear"
"getSumsq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getSumsq"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~copy"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getMax"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~equals~QObject;"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics~getVariance"
"getElement","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getElement~I"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getMean"
"object",\N
"index",\N
"AggregatingSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics[AggregatingSummaryStatistics"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getMin"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getDimension"
"AggregatingSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics[AggregatingSummaryStatistics~AggregatingSummaryStatistics~QSummaryStatistics;"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getN"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getN"
"getGeoMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getGeoMeanImpl"
"aggregateStatistics",\N
"getQuadraticMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getQuadraticMean"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getStandardDeviation"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getGeometricMean"
"addValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics[AggregatingSummaryStatistics~addValue~D"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getStandardDeviation"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getSum"
"value",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMax"
"getValues","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getValues"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics[AggregatingSummaryStatistics~equals~QObject;"
"getSumLog","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getSumLog"
"getMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMaxImpl"
"getWindowSize","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~getWindowSize"
"object",\N
"getSumSq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{StatisticalMultivariateSummary.java[StatisticalMultivariateSummary~getSumSq"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMean"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatistics.java[SynchronizedDescriptiveStatistics~toString"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatistics.java[AggregateSummaryStatistics[AggregatingSummaryStatistics~hashCode"
"DescriptiveStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics"
"getMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMeanImpl"
"DescriptiveStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~DescriptiveStatistics"
"SummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics"
"SynchronizedSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMin"
"SynchronizedSummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~SynchronizedSummaryStatistics"
"SummaryStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~SummaryStatistics"
"DescriptiveStatistics","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~DescriptiveStatistics~\\[D"
"getMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getMinImpl"
"addValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~addValue~D"
"addValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~addValue~D"
"initialDoubleArray",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getN"
"value",\N
"value",\N
"addValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~addValue~D"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~clear"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~clear"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getStandardDeviation"
"v",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~copy"
"apply","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~apply~QUnivariateStatistic;"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~copy"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSum"
"stat",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~equals~QObject;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~equals~QObject;"
"getSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSumImpl"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~clear"
"object",\N
"object",\N
"getSumLog","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSumLog"
"getGeoMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getGeoMeanImpl"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~copy"
"getGeoMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getGeoMeanImpl"
"getSumLogImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSumLogImpl"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getGeometricMean"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getGeometricMean"
"getElement","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getElement~I"
"getSumSq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSumSq"
"index",\N
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMax"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMax"
"getSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~getSumsqImpl"
"getGeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getGeometricMean"
"getMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMaxImpl"
"getMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMaxImpl"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~hashCode"
"getGeometricMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getGeometricMeanImpl"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMean"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMean"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatistics.java[SynchronizedMultivariateSummaryStatistics~toString"
"getKurtosis","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getKurtosis"
"getMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMeanImpl"
"getMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMeanImpl"
"WeightedEvaluation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{WeightedEvaluation.java[WeightedEvaluation"
"getKurtosisImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getKurtosisImpl"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMin"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMin"
"SecondMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment"
"getMax","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMax"
"SecondMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment~SecondMoment"
"getMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getMinImpl"
"getMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getMinImpl"
"getMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMaxImpl"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment~clear"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getN"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getN"
"getMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMean"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment~copy"
"getPopulationVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getPopulationVariance"
"getPopulationVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getPopulationVariance"
"getMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMeanImpl"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment~getResult"
"getQuadraticMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getQuadraticMean"
"getQuadraticMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getQuadraticMean"
"getMin","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMin"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment~increment~D"
"getSecondMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSecondMoment"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getStandardDeviation"
"getMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getMinImpl"
"d",\N
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSum"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getStandardDeviation"
"m2","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SecondMoment.java[SecondMoment^m2"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getN"
"getSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSumImpl"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSum"
"VectorialMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean"
"getPercentileImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getPercentileImpl"
"getSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSumImpl"
"getSumLogImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSumLogImpl"
"VectorialMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean~VectorialMean~I"
"getPopulationVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getPopulationVariance"
"getSummary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSummary"
"getSumLogImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSumLogImpl"
"dimension",\N
"getQuadraticMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getQuadraticMean"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean~equals~QObject;"
"getSumsq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSumsq"
"getSumOfLogs","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSumOfLogs"
"getSkewness","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSkewness"
"obj",\N
"getSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getSumsqImpl"
"getSummary","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSummary"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean~getN"
"getSkewnessImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSkewnessImpl"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getVariance"
"getSumsq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSumsq"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean~getResult"
"getSortedValues","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSortedValues"
"getSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getSumsqImpl"
"getVarianceImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~getVarianceImpl"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMean.java[VectorialMean~hashCode"
"getStandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getStandardDeviation"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getVariance"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~hashCode"
"SemiVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance"
"getSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSum"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatistics.java[SynchronizedSummaryStatistics~toString"
"getVarianceImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~getVarianceImpl"
"SemiVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~SemiVariance"
"getSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSumImpl"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~hashCode"
"FourthMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment"
"SemiVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~SemiVariance~Z"
"FourthMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment~FourthMoment"
"getSumsq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSumsq"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{SummaryStatistics.java[SummaryStatistics~toString"
"biasCorrected",\N
"getSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getSumsqImpl"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment~clear"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~copy"
"GeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean"
"getValues","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getValues"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment~copy"
"GeometricMean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~GeometricMean"
"getDirection","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~getDirection"
"getVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getVariance"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~clear"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment~getResult"
"isBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~isBiasCorrected"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FourthMoment.java[FourthMoment~increment~D"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~copy"
"getVarianceImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getVarianceImpl"
"setBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{SemiVariance.java[SemiVariance~setBiasCorrected~Z"
"d",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~getN"
"getWindowSize","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~getWindowSize"
"biasCorrected",\N
"StandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation"
"setGeometricMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setGeometricMeanImpl~QUnivariateStatistic;"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~getResult"
"VectorialCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance"
"StandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~StandardDeviation"
"VectorialCovariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance~VectorialCovariance~I~Z"
"geometricMeanImpl",\N
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMean.java[GeometricMean~increment~D"
"StandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~StandardDeviation~QSecondMoment;"
"setKurtosisImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setKurtosisImpl~QUnivariateStatistic;"
"d",\N
"Variance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance"
"m2",\N
"dimension",\N
"kurtosisImpl",\N
"Variance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~Variance"
"StandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~StandardDeviation~Z"
"isBiasCorrected",\N
"setMaxImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setMaxImpl~QUnivariateStatistic;"
"Variance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~Variance~QSecondMoment;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance~clear"
"isBiasCorrected",\N
"maxImpl",\N
"m2",\N
"StandardDeviation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~StandardDeviation~Z~QSecondMoment;"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance~equals~QObject;"
"setMeanImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setMeanImpl~QUnivariateStatistic;"
"Variance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~Variance~Z"
"isBiasCorrected",\N
"meanImpl",\N
"obj",\N
"isBiasCorrected",\N
"m2",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance~getN"
"setMinImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setMinImpl~QUnivariateStatistic;"
"Variance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~Variance~Z~QSecondMoment;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~clear"
"minImpl",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovariance.java[VectorialCovariance~hashCode"
"isBiasCorrected",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~copy"
"setSkewnessImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setSkewnessImpl~QUnivariateStatistic;"
"m2",\N
"Kurtosis","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~getN"
"skewnessImpl",\N
"Kurtosis","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~Kurtosis"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~clear"
"setSumImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setSumImpl~QUnivariateStatistic;"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~getResult"
"Kurtosis","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~Kurtosis~QFourthMoment;"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~copy"
"sumImpl",\N
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~increment~D"
"m4",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~getN"
"setSumsqImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setSumsqImpl~QUnivariateStatistic;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~clear"
"d",\N
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~getResult"
"sumsqImpl",\N
"isBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~isBiasCorrected"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~copy"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~increment~D"
"setVarianceImpl","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~setVarianceImpl~QUnivariateStatistic;"
"setBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviation.java[StandardDeviation~setBiasCorrected~Z"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~getN"
"varianceImpl",\N
"d",\N
"isBiasCorrected",\N
"isBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~isBiasCorrected"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~getResult"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics~toString"
"Skewness","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness"
"INFINITE_WINDOW","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics^INFINITE_WINDOW"
"setBiasCorrected","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance~setBiasCorrected~Z"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis~increment~D"
"Skewness","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~Skewness"
"windowSize","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatistics.java[DescriptiveStatistics^windowSize"
"d",\N
"biasCorrected",\N
"Skewness","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~Skewness~QThirdMoment;"
"incMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis^incMoment"
"incMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance^incMoment"
"FirstMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment"
"m3",\N
"moment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Kurtosis.java[Kurtosis^moment"
"moment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Variance.java[Variance^moment"
"FirstMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~FirstMoment"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~clear"
"Mean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~clear"
"ThirdMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~copy"
"Mean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~Mean"
"ThirdMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment~ThirdMoment"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~copy"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~getN"
"Mean","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~Mean~QFirstMoment;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment~clear"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~getN"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~getResult"
"m1",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment~copy"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~getResult"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~clear"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness~increment~D"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment~getResult"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment~increment~D"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~copy"
"d",\N
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment~increment~D"
"d",\N
"incMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness^incMoment"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~getN"
"d",\N
"dev","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment^dev"
"moment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Skewness.java[Skewness^moment"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~getResult"
"m3","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment^m3"
"m1","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment^m1"
"Min","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean~increment~D"
"nDevSq","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMoment.java[ThirdMoment^nDevSq"
"n","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment^n"
"Min","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~Min"
"d",\N
"PSquarePercentile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile"
"nDev","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{FirstMoment.java[FirstMoment^nDev"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~clear"
"incMoment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean^incMoment"
"PSquarePercentile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~PSquarePercentile~D"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~copy"
"Median","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Median.java[Median"
"moment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.moment{Mean.java[Mean^moment"
"p",\N
"Median","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Median.java[Median~Median"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~getN"
"PSquarePercentile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~PSquarePercentile"
"Max","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max"
"Max","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~Max"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~getResult"
"Percentile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~clear"
"Percentile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~Percentile"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~clear"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Min.java[Min~increment~D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~equals~QObject;"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~copy"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~copy"
"d",\N
"o",\N
"getName","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~getName"
"Sum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~getN"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~getN"
"Sum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~Sum"
"getQuantile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~getQuantile"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~getResult"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~getResult"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~clear"
"getWorkArray","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~getWorkArray~\\[D~I~I"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Max.java[Max~increment~D"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~hashCode"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~copy"
"values",\N
"d",\N
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~increment~D"
"begin",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~getN"
"Product","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product"
"observation",\N
"length",\N
"Product","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~Product"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~getResult"
"newMarkers","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~newMarkers~QList\\<QDouble;>;~D"
"index","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~index~D~I"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~clear"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Sum.java[Sum~increment~D"
"initialFive",\N
"p",\N
"p",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~copy"
"d",\N
"length",\N
"quantile","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~quantile"
"medianOf3","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~medianOf3~\\[D~I~I"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~getN"
"SumOfLogs","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs"
"SumOfLogs","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~SumOfLogs"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile~toString"
"work",\N
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~getResult"
"begin",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~clear"
"Markers","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{Product.java[Product~increment~D"
"end",\N
"clone","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~clone"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~copy"
"setData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{Percentile.java[Percentile~setData~\\[D"
"d",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~equals~QObject;"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~getN"
"SumOfSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares"
"values",\N
"o",\N
"SumOfSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~SumOfSquares"
"MannWhitneyUTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{MannWhitneyUTest.java[MannWhitneyUTest"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~getResult"
"estimate","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~estimate~I"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~clear"
"MannWhitneyUTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{MannWhitneyUTest.java[MannWhitneyUTest~MannWhitneyUTest"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfLogs.java[SumOfLogs~increment~D"
"index",\N
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~copy"
"TestUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TestUtils.java[TestUtils"
"getPercentileValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~getPercentileValue"
"d",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~getN"
"approximateP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TestUtils.java[TestUtils~approximateP~D~I~I"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~hashCode"
"getResult","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~getResult"
"KolmogorovSmirnovTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest"
"d",\N
"height","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~height~I"
"n",\N
"KolmogorovSmirnovTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~KolmogorovSmirnovTest"
"increment","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.summary{SumOfSquares.java[SumOfSquares~increment~D"
"m",\N
"markerIndex",\N
"approximateP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~approximateP~D~I~I"
"exactP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TestUtils.java[TestUtils~exactP~D~I~I~Z"
"d",\N
"processDataPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~processDataPoint~D"
"d",\N
"d",\N
"WilcoxonSignedRankTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{WilcoxonSignedRankTest.java[WilcoxonSignedRankTest"
"inputDataPoint",\N
"n",\N
"m",\N
"WilcoxonSignedRankTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{WilcoxonSignedRankTest.java[WilcoxonSignedRankTest~WilcoxonSignedRankTest"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Markers~toString"
"m",\N
"n",\N
"BinomialTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{BinomialTest.java[BinomialTest"
"bootstrap","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~bootstrap~\\[D~\\[D~I~Z"
"Marker","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Marker"
"strict",\N
"clone","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Marker~clone"
"GTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{GTest.java[GTest"
"monteCarloP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TestUtils.java[TestUtils~monteCarloP~D~I~I~Z~I"
"x",\N
"rootLogLikelihoodRatio","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{GTest.java[GTest~rootLogLikelihoodRatio~J~J~J~J"
"y",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Marker~equals~QObject;"
"d",\N
"iterations",\N
"k11",\N
"n",\N
"o",\N
"k12",\N
"strict",\N
"m",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Marker~hashCode"
"k21",\N
"bootstrap","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~bootstrap~\\[D~\\[D~I"
"strict",\N
"k22",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[Marker~toString"
"iterations",\N
"x",\N
"OneWayAnova","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{OneWayAnova.java[OneWayAnova"
"TTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TTest.java[TTest"
"y",\N
"FixedCapacityList","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[FixedCapacityList"
"OneWayAnova","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{OneWayAnova.java[OneWayAnova~OneWayAnova"
"df","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TTest.java[TTest~df~D~D~D~D"
"iterations",\N
"FixedCapacityList","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[FixedCapacityList~FixedCapacityList~I"
"exactP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~exactP~D~I~I~Z"
"v1",\N
"AnovaStats","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{OneWayAnova.java[OneWayAnova[AnovaStats"
"fixedCapacity",\N
"v2",\N
"ChiSquareTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{ChiSquareTest.java[ChiSquareTest"
"d",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[FixedCapacityList~add~QE;"
"n1",\N
"ChiSquareTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{ChiSquareTest.java[ChiSquareTest~ChiSquareTest"
"n",\N
"e",\N
"n2",\N
"m",\N
"ConfidenceInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval"
"addAll","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[FixedCapacityList~addAll~QCollection\\<+QE;>;"
"homoscedasticT","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TTest.java[TTest~homoscedasticT~D~D~D~D~D~D"
"strict",\N
"ConfidenceInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval~ConfidenceInterval~D~D~D"
"collection",\N
"kolmogorovSmirnovStatistic","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~kolmogorovSmirnovStatistic~\\[D~\\[D"
"m1",\N
"lowerBound",\N
"PSquareMarkers","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers"
"m2",\N
"x",\N
"upperBound",\N
"clone","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers~clone"
"v1",\N
"y",\N
"confidenceLevel",\N
"v2",\N
"kolmogorovSmirnovTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~kolmogorovSmirnovTest~\\[D~\\[D~Z"
"estimate","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers~estimate~I"
"getConfidenceLevel","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval~getConfidenceLevel"
"n1",\N
"x",\N
"index",\N
"n2",\N
"getLowerBound","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval~getLowerBound"
"y",\N
"getPercentileValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers~getPercentileValue"
"t","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TTest.java[TTest~t~D~D~D~D"
"getUpperBound","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval~getUpperBound"
"strict",\N
"height","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers~height~I"
"m",\N
"kolmogorovSmirnovTest","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~kolmogorovSmirnovTest~\\[D~\\[D"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ConfidenceInterval.java[ConfidenceInterval~toString"
"mu",\N
"markerIndex",\N
"x",\N
"v",\N
"NormalApproximationInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{NormalApproximationInterval.java[NormalApproximationInterval"
"processDataPoint","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentile.java[PSquarePercentile[PSquareMarkers~processDataPoint~D"
"y",\N
"n",\N
"createInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{NormalApproximationInterval.java[NormalApproximationInterval~createInterval~I~I~D"
"inputDataPoint",\N
"ksSum","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~ksSum~D~D~I"
"t","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{TTest.java[TTest~t~D~D~D~D~D~D"
"numberOfTrials",\N
"AgrestiCoullInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{AgrestiCoullInterval.java[AgrestiCoullInterval"
"t",\N
"m1",\N
"numberOfSuccesses",\N
"createInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{AgrestiCoullInterval.java[AgrestiCoullInterval~createInterval~I~I~D"
"tolerance",\N
"confidenceLevel",\N
"m2",\N
"numberOfTrials",\N
"maxIterations",\N
"v1",\N
"WilsonScoreInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{WilsonScoreInterval.java[WilsonScoreInterval"
"numberOfSuccesses",\N
"monteCarloP","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~monteCarloP~D~I~I~Z~I"
"v2",\N
"createInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{WilsonScoreInterval.java[WilsonScoreInterval~createInterval~I~I~D"
"confidenceLevel",\N
"n1",\N
"d",\N
"numberOfTrials",\N
"ClopperPearsonInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ClopperPearsonInterval.java[ClopperPearsonInterval"
"n2",\N
"n",\N
"numberOfSuccesses",\N
"createInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{ClopperPearsonInterval.java[ClopperPearsonInterval~createInterval~I~I~D"
"IntervalUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils"
"m",\N
"confidenceLevel",\N
"checkParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils~checkParameters~I~I~D"
"numberOfTrials",\N
"strict",\N
"BinomialConfidenceInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{BinomialConfidenceInterval.java[BinomialConfidenceInterval"
"iterations",\N
"numberOfSuccesses",\N
"numberOfTrials",\N
"RankingAlgorithm","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{RankingAlgorithm.java[RankingAlgorithm"
"confidenceLevel",\N
"pelzGood","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest~pelzGood~D~I"
"numberOfSuccesses",\N
"rank","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{RankingAlgorithm.java[RankingAlgorithm~rank~\\[D"
"confidenceLevel",\N
"NaturalRanking","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking"
"d",\N
"data",\N
"NaturalRanking","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking~NaturalRanking"
"getAgrestiCoullInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils~getAgrestiCoullInterval~I~I~D"
"n",\N
"GLSMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegression.java[GLSMultipleLinearRegression"
"KS_SUM_CAUCHY_CRITERION","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^KS_SUM_CAUCHY_CRITERION"
"numberOfTrials",\N
"rank","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking~rank~\\[D"
"calculateErrorVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegression.java[GLSMultipleLinearRegression~calculateErrorVariance"
"numberOfSuccesses",\N
"LARGE_SAMPLE_PRODUCT","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^LARGE_SAMPLE_PRODUCT"
"data",\N
"newCovarianceData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegression.java[GLSMultipleLinearRegression~newCovarianceData~\\[\\[D"
"confidenceLevel",\N
"IntDoublePair","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking[IntDoublePair"
"MAXIMUM_PARTIAL_SUM_COUNT","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^MAXIMUM_PARTIAL_SUM_COUNT"
"getClopperPearsonInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils~getClopperPearsonInterval~I~I~D"
"omega",\N
"IntDoublePair","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking[IntDoublePair~IntDoublePair~D~I"
"MONTE_CARLO_ITERATIONS","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^MONTE_CARLO_ITERATIONS"
"newSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegression.java[GLSMultipleLinearRegression~newSampleData~\\[D~\\[\\[D~\\[\\[D"
"numberOfTrials",\N
"value",\N
"numberOfSuccesses",\N
"y",\N
"PG_SUM_RELATIVE_ERROR","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^PG_SUM_RELATIVE_ERROR"
"position",\N
"confidenceLevel",\N
"x",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking[IntDoublePair~compareTo~QIntDoublePair;"
"SMALL_SAMPLE_PRODUCT","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTest.java[KolmogorovSmirnovTest^SMALL_SAMPLE_PRODUCT"
"getNormalApproximationInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils~getNormalApproximationInterval~I~I~D"
"covariance",\N
"other",\N
"OLSMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression"
"SimpleRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression"
"numberOfTrials",\N
"getPosition","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking[IntDoublePair~getPosition"
"OLSMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~OLSMultipleLinearRegression"
"SimpleRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~SimpleRegression"
"numberOfSuccesses",\N
"confidenceLevel",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.ranking{NaturalRanking.java[NaturalRanking[IntDoublePair~getValue"
"SimpleRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~SimpleRegression~Z"
"OLSMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~OLSMultipleLinearRegression~D"
"getWilsonScoreInterval","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.interval{IntervalUtils.java[IntervalUtils~getWilsonScoreInterval~I~I~D"
"ModelSpecificationException","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{ModelSpecificationException.java[ModelSpecificationException"
"threshold",\N
"includeIntercept",\N
"numberOfTrials",\N
"addData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~addData~D~D"
"calculateAdjustedRSquared","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~calculateAdjustedRSquared"
"MultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression"
"numberOfSuccesses",\N
"estimateRegressandVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression~estimateRegressandVariance"
"x",\N
"calculateRSquared","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~calculateRSquared"
"confidenceLevel",\N
"y",\N
"estimateRegressionParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression~estimateRegressionParameters"
"AbstractMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression"
"calculateResidualSumOfSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~calculateResidualSumOfSquares"
"addData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~addData~\\[\\[D"
"estimateRegressionParametersStandardErrors","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression~estimateRegressionParametersStandardErrors"
"calculateErrorVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~calculateErrorVariance"
"calculateTotalSumOfSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~calculateTotalSumOfSquares"
"data",\N
"estimateRegressionParametersVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression~estimateRegressionParametersVariance"
"calculateYVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~calculateYVariance"
"addObservation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~addObservation~\\[D~D"
"newSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~newSampleData~\\[D~I~I"
"estimateResiduals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MultipleLinearRegression.java[MultipleLinearRegression~estimateResiduals"
"estimateErrorVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateErrorVariance"
"x",\N
"data",\N
"MillerUpdatingRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression"
"estimateRegressandVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateRegressandVariance"
"y",\N
"nobs",\N
"MillerUpdatingRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~MillerUpdatingRegression~I~Z~D"
"addObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~addObservations~\\[\\[D~\\[D"
"nvars",\N
"estimateRegressionParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateRegressionParameters"
"numberOfVariables",\N
"newXSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegression.java[OLSMultipleLinearRegression~newXSampleData~\\[\\[D"
"x",\N
"estimateRegressionParametersStandardErrors","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateRegressionParametersStandardErrors"
"includeConstant",\N
"y",\N
"x",\N
"errorTolerance",\N
"estimateRegressionParametersVariance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateRegressionParametersVariance"
"append","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~append~QSimpleRegression;"
"RegressionResults","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults"
"MillerUpdatingRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~MillerUpdatingRegression~I~Z"
"reg",\N
"estimateRegressionStandardError","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateRegressionStandardError"
"RegressionResults","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~RegressionResults~\\[D~\\[\\[D~Z~J~I~D~D~D~Z~Z"
"numberOfVariables",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~clear"
"parameters",\N
"estimateResiduals","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~estimateResiduals"
"includeConstant",\N
"varcov",\N
"getIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getIntercept"
"addObservation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~addObservation~\\[D~D"
"isNoIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~isNoIntercept"
"isSymmetricCompressed",\N
"getInterceptStdErr","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getInterceptStdErr"
"x",\N
"nobs",\N
"newSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~newSampleData~\\[D~I~I"
"y",\N
"rank",\N
"getMeanSquareError","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getMeanSquareError"
"data",\N
"addObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~addObservations~\\[\\[D~\\[D"
"sumy",\N
"nobs",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getN"
"sumysq",\N
"x",\N
"nvars",\N
"sse",\N
"getR","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getR"
"y",\N
"newXSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~newXSampleData~\\[\\[D"
"containsConstant",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~clear"
"getRSquare","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getRSquare"
"x",\N
"copyData",\N
"getDiagonalOfHatMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~getDiagonalOfHatMatrix~\\[D"
"getRegressionSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getRegressionSumSquares"
"getAdjustedRSquared","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getAdjustedRSquared"
"newYSampleData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~newYSampleData~\\[D"
"row_data",\N
"y",\N
"getErrorSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getErrorSumSquares"
"getSignificance","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getSignificance"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~getN"
"setNoIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~setNoIntercept~Z"
"getMeanSquareError","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getMeanSquareError"
"getSlope","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getSlope"
"getOrderOfRegressors","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~getOrderOfRegressors"
"noIntercept",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getN"
"getSlopeStdErr","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getSlopeStdErr"
"validateCovarianceData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{AbstractMultipleLinearRegression.java[AbstractMultipleLinearRegression~validateCovarianceData~\\[\\[D~\\[\\[D"
"getPartialCorrelations","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~getPartialCorrelations~I"
"getSumOfCrossProducts","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getSumOfCrossProducts"
"getNumberOfParameters","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getNumberOfParameters"
"x",\N
"in",\N
"covariance",\N
"getParameterEstimates","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getParameterEstimates"
"getSumSquaredErrors","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getSumSquaredErrors"
"hasIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~hasIntercept"
"UpdatingMultipleLinearRegression","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression"
"getRSquared","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getRSquared"
"getTotalSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getTotalSumSquares"
"regress","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~regress"
"addObservation","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression~addObservation~\\[D~D"
"getRegressionSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getRegressionSumSquares"
"getXSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~getXSumSquares"
"regress","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~regress~I"
"x",\N
"y",\N
"getStdErrorOfEstimates","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getStdErrorOfEstimates"
"hasIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~hasIntercept"
"numberOfRegressors",\N
"addObservations","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression~addObservations~\\[\\[D~\\[D"
"regress","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegression.java[MillerUpdatingRegression~regress~\\[I"
"getTotalSumSquares","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~getTotalSumSquares"
"predict","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~predict~D"
"x",\N
"variablesToInclude",\N
"x",\N
"hasIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{RegressionResults.java[RegressionResults~hasIntercept"
"y",\N
"FastHadamardTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastHadamardTransformer.java[FastHadamardTransformer"
"removeData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~removeData~D~D"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression~clear"
"FastSineTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastSineTransformer.java[FastSineTransformer"
"transform","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastHadamardTransformer.java[FastHadamardTransformer~transform~\\[I"
"x",\N
"serialVersionUID","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastSineTransformer.java[FastSineTransformer^serialVersionUID"
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression~getN"
"y",\N
"f",\N
"serialVersionUID","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastHadamardTransformer.java[FastHadamardTransformer^serialVersionUID"
"removeData","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{SimpleRegression.java[SimpleRegression~removeData~\\[\\[D"
"hasIntercept","=mathmain3.6/src<main.java.org.apache.commons.math3.stat.regression{UpdatingMultipleLinearRegression.java[UpdatingMultipleLinearRegression~hasIntercept"
"FastCosineTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastCosineTransformer.java[FastCosineTransformer"
"serialVersionUID","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastCosineTransformer.java[FastCosineTransformer^serialVersionUID"
"data",\N
"TransformUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{TransformUtils.java[TransformUtils"
"RealTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{RealTransformer.java[RealTransformer"
"FastFourierTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer"
"scaleArray","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{TransformUtils.java[TransformUtils~scaleArray~\\[D~D"
"IterationEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationEvent.java[IterationEvent"
"serialVersionUID","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer^serialVersionUID"
"CentralPivotingStrategy","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CentralPivotingStrategy.java[CentralPivotingStrategy"
"f",\N
"IterationEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationEvent.java[IterationEvent~IterationEvent~QObject;~I"
"ResizableDoubleArray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray"
"MultiDimensionalComplexMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix"
"d",\N
"ResizableDoubleArray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~ResizableDoubleArray"
"source",\N
"MultiDimensionalComplexMatrix","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix~MultiDimensionalComplexMatrix~QObject;"
"IntegerSequence","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence"
"iterations",\N
"ResizableDoubleArray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~ResizableDoubleArray~\\[D"
"range","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence~range~I~I"
"multiDimensionalComplexArray",\N
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationEvent.java[IterationEvent~getIterations"
"initialArray",\N
"clone","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix~clone"
"start",\N
"ArithmeticUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ArithmeticUtils.java[ArithmeticUtils"
"addElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~addElement~D"
"end",\N
"getArray","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix~getArray"
"isPowerOfTwo","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ArithmeticUtils.java[ArithmeticUtils~isPowerOfTwo~J"
"range","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence~range~I~I~I"
"value",\N
"getDimensionSizes","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix~getDimensionSizes"
"n",\N
"addElementRolling","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~addElementRolling~D"
"start",\N
"dimensionSize","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix^dimensionSize"
"max",\N
"MathUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils"
"value",\N
"step",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~equals~D~D"
"multiDimensionalComplexArray","=mathmain3.6/src<main.java.org.apache.commons.math3.transform{FastFourierTransformer.java[FastFourierTransformer[MultiDimensionalComplexMatrix^multiDimensionalComplexArray"
"addElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~addElements~\\[D"
"Range","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Range"
"x",\N
"values",\N
"CompositeFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat"
"Range","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Range~Range~I~I~I"
"y",\N
"formatDouble","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~formatDouble~D~QNumberFormat;~QStringBuffer;~QFieldPosition;"
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~clear"
"start",\N
"hash","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~hash~D"
"value",\N
"compute","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~compute~QMathArrays.Function;"
"max",\N
"value",\N
"format",\N
"step",\N
"f",\N
"hash","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~hash~\\[D"
"toAppendTo",\N
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Range~iterator"
"contract","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~contract"
"pos",\N
"value",\N
"size","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Range~size"
"getDefaultNumberFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~getDefaultNumberFormat"
"copy","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~copy"
"max","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~max~QT;~QT;"
"Incrementor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~equals~QObject;"
"getDefaultNumberFormat","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~getDefaultNumberFormat~QLocale;"
"e1",\N
"canIncrement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~canIncrement"
"e2",\N
"object",\N
"locale",\N
"canIncrement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~canIncrement~I"
"min","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~min~QT;~QT;"
"expand","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~expand"
"parseAndIgnoreWhitespace","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~parseAndIgnoreWhitespace~QString;~QParsePosition;"
"nTimes",\N
"e1",\N
"source",\N
"getArrayRef","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getArrayRef"
"e2",\N
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~create"
"pos",\N
"getCapacity","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getCapacity"
"normalizeAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~normalizeAngle~D~D"
"parseFixedstring","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~parseFixedstring~QString;~QString;~QParsePosition;"
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~getCount"
"getContractionCriteria","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getContractionCriteria"
"a",\N
"source",\N
"getMaximalCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~getMaximalCount"
"center",\N
"expected",\N
"getContractionCriterion","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getContractionCriterion"
"reduce","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils~reduce~D~D~D"
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~hasNext"
"pos",\N
"getElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getElement~I"
"parseNextCharacter","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~parseNextCharacter~QString;~QParsePosition;"
"a",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~next"
"index",\N
"period",\N
"source",\N
"getElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getElements"
"offset",\N
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~remove"
"pos",\N
"PI_SQUARED","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils^PI_SQUARED"
"getExpansionFactor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getExpansionFactor"
"withCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~withCallback~QMaxCountExceededCallback;"
"parseNumber","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CompositeFormat.java[CompositeFormat~parseNumber~QString;~QNumberFormat;~QParsePosition;"
"TWO_PI","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathUtils.java[MathUtils^TWO_PI"
"getExpansionMode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getExpansionMode"
"source",\N
"cb",\N
"NumberTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{NumberTransformer.java[NumberTransformer"
"format",\N
"getInternalLength","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getInternalLength"
"withIncrement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~withIncrement~I"
"DefaultTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DefaultTransformer.java[DefaultTransformer"
"pos",\N
"step",\N
"getInternalValues","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getInternalValues"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DefaultTransformer.java[DefaultTransformer~equals~QObject;"
"IterationManager","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager"
"withMaximalCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~withMaximalCount~I"
"IterationManager","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~IterationManager~I"
"getNumElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getNumElements"
"other",\N
"max",\N
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DefaultTransformer.java[DefaultTransformer~hashCode"
"maxIterations",\N
"getStartIndex","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~getStartIndex"
"withStart","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor~withStart~I"
"IterationManager","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~IterationManager~I~QIncrementor.MaxCountExceededCallback;"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~hashCode"
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap"
"start",\N
"maxIterations",\N
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~OpenIntToDoubleHashMap"
"MaxCountExceededCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IntegerSequence.java[IntegerSequence[Incrementor[MaxCountExceededCallback"
"setElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~setElement~I~D"
"callBack",\N
"PivotingStrategyInterface","=mathmain3.6/src<main.java.org.apache.commons.math3.util{PivotingStrategyInterface.java[PivotingStrategyInterface"
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~OpenIntToDoubleHashMap~D"
"index",\N
"IterationManager","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~IterationManager~I~QIncrementor.MaxCountExceededCallback;"
"MedianOf3PivotingStrategy","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MedianOf3PivotingStrategy.java[MedianOf3PivotingStrategy"
"missingEntries",\N
"value",\N
"maxIterations",\N
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~OpenIntToDoubleHashMap~I"
"FastMathLiteralArrays","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays"
"start","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray~start"
"callBack",\N
"loadExpFracA","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays~loadExpFracA"
"expectedSize",\N
"ADDITIVE_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray^ADDITIVE_MODE"
"addIterationListener","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~addIterationListener~QIterationListener;"
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~OpenIntToDoubleHashMap~I~D"
"loadExpFracB","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays~loadExpFracB"
"listener",\N
"MULTIPLICATIVE_MODE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ResizableDoubleArray.java[ResizableDoubleArray^MULTIPLICATIVE_MODE"
"expectedSize",\N
"fireInitializationEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~fireInitializationEvent~QIterationEvent;"
"loadExpIntA","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays~loadExpIntA"
"missingEntries",\N
"MultidimensionalCounter","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter"
"e",\N
"loadExpIntB","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays~loadExpIntB"
"getDimension","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter~getDimension"
"OpenIntToDoubleHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~OpenIntToDoubleHashMap~QOpenIntToDoubleHashMap;"
"fireIterationPerformedEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~fireIterationPerformedEvent~QIterationEvent;"
"loadLnMant","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathLiteralArrays.java[FastMathLiteralArrays~loadLnMant"
"source",\N
"getSize","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter~getSize"
"e",\N
"containsKey","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~containsKey~I"
"OpenIntToFieldHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap"
"getSizes","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter~getSizes"
"fireIterationStartedEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~fireIterationStartedEvent~QIterationEvent;"
"OpenIntToFieldHashMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~OpenIntToFieldHashMap~QOpenIntToFieldHashMap\\<QT;>;"
"key",\N
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter~iterator"
"e",\N
"get","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~get~I"
"source",\N
"fireTerminationEvent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~fireTerminationEvent~QIterationEvent;"
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter~toString"
"containsKey","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~containsKey~I"
"key",\N
"e",\N
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~iterator"
"Iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator"
"key",\N
"getIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~getIterations"
"Iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~Iterator"
"get","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~get~I"
"put","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~put~I~D"
"getMaxIterations","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~getMaxIterations"
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~getCount"
"key",\N
"key",\N
"removeIterationListener","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~removeIterationListener~QIterationListener;"
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~iterator"
"value",\N
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~getCount~I"
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~remove~I"
"listener",\N
"put","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~put~I~QT;"
"dim",\N
"resetIterationCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationManager.java[IterationManager~resetIterationCount"
"key",\N
"getCounts","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~getCounts"
"key",\N
"size","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap~size"
"value",\N
"BigRealField","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigRealField.java[BigRealField"
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~hasNext"
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigRealField.java[BigRealField~getInstance"
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~remove~I"
"FREE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap^FREE"
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~next"
"key",\N
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigRealField.java[BigRealField~getOne"
"FULL","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap^FULL"
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MultidimensionalCounter.java[MultidimensionalCounter[Iterator~remove"
"size","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap~size"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigRealField.java[BigRealField~getZero"
"REMOVED","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap^REMOVED"
"FREE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap^FREE"
"KthSelector","=mathmain3.6/src<main.java.org.apache.commons.math3.util{KthSelector.java[KthSelector"
"LazyHolder","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigRealField.java[BigRealField[LazyHolder"
"Iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap[Iterator"
"KthSelector","=mathmain3.6/src<main.java.org.apache.commons.math3.util{KthSelector.java[KthSelector~KthSelector"
"FULL","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap^FULL"
"Precision","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision"
"advance","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap[Iterator~advance"
"getPivotingStrategy","=mathmain3.6/src<main.java.org.apache.commons.math3.util{KthSelector.java[KthSelector~getPivotingStrategy"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~compareTo~D~D~D"
"REMOVED","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap^REMOVED"
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap[Iterator~hasNext"
"x",\N
"select","=mathmain3.6/src<main.java.org.apache.commons.math3.util{KthSelector.java[KthSelector~select~\\[D~\\[I~I"
"Iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap[Iterator"
"key","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap[Iterator~key"
"y",\N
"work",\N
"advance","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap[Iterator~advance"
"eps",\N
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToDoubleHashMap.java[OpenIntToDoubleHashMap[Iterator~value"
"pivotsHeap",\N
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap[Iterator~hasNext"
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~compareTo~D~D~I"
"k",\N
"FastMathCalc","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc"
"key","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap[Iterator~key"
"x",\N
"IterationListener","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationListener.java[IterationListener"
"expint","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~expint~I~\\[D"
"y",\N
"initializationPerformed","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationListener.java[IterationListener~initializationPerformed~QIterationEvent;"
"value","=mathmain3.6/src<main.java.org.apache.commons.math3.util{OpenIntToFieldHashMap.java[OpenIntToFieldHashMap[Iterator~value"
"p",\N
"maxUlps",\N
"e",\N
"result",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~F~F"
"MathArrays","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays"
"iterationPerformed","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationListener.java[IterationListener~iterationPerformed~QIterationEvent;"
"format","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~format~D"
"checkEqualLength","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~checkEqualLength~\\[D~\\[D~Z"
"x",\N
"e",\N
"y",\N
"a",\N
"d",\N
"iterationStarted","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationListener.java[IterationListener~iterationStarted~QIterationEvent;"
"b",\N
"printarray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~printarray~QPrintStream;~QString;~I~\\[\\[D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~F~F~F"
"abort",\N
"e",\N
"x",\N
"out",\N
"checkEqualLength","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~checkEqualLength~\\[D~\\[D"
"terminationPerformed","=mathmain3.6/src<main.java.org.apache.commons.math3.util{IterationListener.java[IterationListener~terminationPerformed~QIterationEvent;"
"y",\N
"name",\N
"eps",\N
"a",\N
"expectedLen",\N
"e",\N
"array2d",\N
"b",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~F~F~I"
"CombinatoricsUtils","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CombinatoricsUtils.java[CombinatoricsUtils"
"printarray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~printarray~QPrintStream;~QString;~I~\\[D"
"checkEqualLength","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~checkEqualLength~\\[I~\\[I~Z"
"x",\N
"combinationsIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CombinatoricsUtils.java[CombinatoricsUtils~combinationsIterator~I~I"
"y",\N
"a",\N
"out",\N
"n",\N
"maxUlps",\N
"name",\N
"b",\N
"k",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~D~D"
"expectedLen",\N
"abort",\N
"FACTORIALS","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CombinatoricsUtils.java[CombinatoricsUtils^FACTORIALS"
"array",\N
"checkEqualLength","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~checkEqualLength~\\[I~\\[I"
"x",\N
"STIRLING_S2","=mathmain3.6/src<main.java.org.apache.commons.math3.util{CombinatoricsUtils.java[CombinatoricsUtils^STIRLING_S2"
"slowCos","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~slowCos~D~\\[D"
"y",\N
"a",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~D~D~D"
"x",\N
"b",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal"
"result",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QBigDecimal;"
"concatenate","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~concatenate~\\[\\[D"
"x",\N
"slowLog","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~slowLog~D"
"y",\N
"x",\N
"val",\N
"eps",\N
"xi",\N
"copyOf","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~copyOf~\\[I"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equals~D~D~I"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QBigInteger;"
"slowSin","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~slowSin~D~\\[D"
"source",\N
"x",\N
"val",\N
"x",\N
"y",\N
"copyOf","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~copyOf~\\[D"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QBigInteger;~I"
"result",\N
"maxUlps",\N
"source",\N
"unscaledVal",\N
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~F~F"
"slowexp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~slowexp~D~\\[D"
"copyOf","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~copyOf~\\[I~I"
"scale",\N
"x",\N
"x",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QBigInteger;~I~QMathContext;"
"source",\N
"result",\N
"y",\N
"len",\N
"unscaledVal",\N
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~F~F~F"
"splitReciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMathCalc.java[FastMathCalc~splitReciprocal~\\[D~\\[D"
"copyOf","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~copyOf~\\[D~I"
"scale",\N
"x",\N
"in",\N
"mc",\N
"source",\N
"result",\N
"y",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QBigInteger;~QMathContext;"
"len",\N
"eps",\N
"ContinuedFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ContinuedFraction.java[ContinuedFraction"
"copyOfRange","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~copyOfRange~\\[D~I~I"
"val",\N
"ContinuedFraction","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ContinuedFraction.java[ContinuedFraction~ContinuedFraction"
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~F~F~I"
"mc",\N
"source",\N
"x",\N
"getA","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ContinuedFraction.java[ContinuedFraction~getA~I~D"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~\\[C"
"from",\N
"y",\N
"n",\N
"to",\N
"in",\N
"maxUlps",\N
"x",\N
"cosAngle","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~cosAngle~\\[D~\\[D"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~\\[C~I~I"
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~D~D"
"getB","=mathmain3.6/src<main.java.org.apache.commons.math3.util{ContinuedFraction.java[ContinuedFraction~getB~I~D"
"v1",\N
"in",\N
"x",\N
"n",\N
"v2",\N
"offset",\N
"y",\N
"x",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~equals~\\[F~\\[F"
"len",\N
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~D~D~D"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~\\[C~I~I~QMathContext;"
"Decimal64","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64"
"x",\N
"x",\N
"Decimal64","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~Decimal64~D"
"y",\N
"in",\N
"y",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~equals~\\[D~\\[D"
"x",\N
"offset",\N
"eps",\N
"len",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~abs"
"x",\N
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsIncludingNaN~D~D~I"
"mc",\N
"y",\N
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~acos"
"x",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~\\[C~QMathContext;"
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~equalsIncludingNaN~\\[F~\\[F"
"y",\N
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~acosh"
"in",\N
"x",\N
"maxUlps",\N
"mc",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~add~QDecimal64;"
"y",\N
"equalsWithRelativeTolerance","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~equalsWithRelativeTolerance~D~D~D"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~D"
"equalsIncludingNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~equalsIncludingNaN~\\[D~\\[D"
"a",\N
"x",\N
"val",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~add~D"
"y",\N
"x",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~D~QMathContext;"
"y",\N
"eps",\N
"a",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~linearCombination~D~D~D~D"
"representableDelta","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~representableDelta~D~D"
"val",\N
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~asin"
"mc",\N
"a1",\N
"x",\N
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~asinh"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~I"
"b1",\N
"originalDelta",\N
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~atan"
"a2",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~round~D~I"
"val",\N
"b2",\N
"atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~atan2~QDecimal64;"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~I~QMathContext;"
"x",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~linearCombination~D~D~D~D~D~D"
"scale",\N
"val",\N
"x",\N
"a1",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~round~D~I~I"
"mc",\N
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~atanh"
"b1",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~J"
"x",\N
"byteValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~byteValue"
"a2",\N
"scale",\N
"val",\N
"b2",\N
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~cbrt"
"roundingMethod",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~J~QMathContext;"
"a3",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision~round~F~I"
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~ceil"
"b3",\N
"val",\N
"x",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~linearCombination~D~D~D~D~D~D~D~D"
"mc",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~compareTo~QDecimal64;"
"scale",\N
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QString;"
"a1",\N
"o",\N
"EPSILON","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision^EPSILON"
"b1",\N
"val",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~copySign~QDecimal64;"
"a2",\N
"SAFE_MIN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Precision.java[Precision^SAFE_MIN"
"BigReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~BigReal~QString;~QMathContext;"
"sign",\N
"b2",\N
"val",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~copySign~D"
"RandomPivotingStrategy","=mathmain3.6/src<main.java.org.apache.commons.math3.util{RandomPivotingStrategy.java[RandomPivotingStrategy"
"a3",\N
"mc",\N
"b3",\N
"Decimal64Field","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64Field.java[Decimal64Field"
"sign",\N
"add","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~add~QBigReal;"
"a4",\N
"getInstance","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64Field.java[Decimal64Field~getInstance"
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~cos"
"b4",\N
"a",\N
"getOne","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64Field.java[Decimal64Field~getOne"
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~cosh"
"natural","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~natural~I"
"bigDecimalValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~bigDecimalValue"
"getZero","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64Field.java[Decimal64Field~getZero"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~divide~QDecimal64;"
"n",\N
"compareTo","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~compareTo~QBigReal;"
"safeNorm","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~safeNorm~\\[D"
"a",\N
"DoubleArray","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray"
"a",\N
"addElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~addElement~D"
"divide","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~divide~D"
"v",\N
"doubleValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~doubleValue"
"scale","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~scale~D~\\[D"
"value",\N
"a",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~equals~QObject;"
"doubleValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~doubleValue"
"addElementRolling","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~addElementRolling~D"
"val",\N
"other",\N
"arr",\N
"value",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~equals~QObject;"
"getRoundingMode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~getRoundingMode"
"scaleInPlace","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~scaleInPlace~D~\\[D"
"addElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~addElements~\\[D"
"obj",\N
"getScale","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~getScale"
"val",\N
"values",\N
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~exp"
"arr",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~clear"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~hashCode"
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~expm1"
"sequence","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~sequence~I~I~I"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~multiply~QBigReal;"
"getElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~getElement~I"
"floatValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~floatValue"
"size",\N
"a",\N
"index",\N
"start",\N
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~floor"
"getElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~getElements"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~multiply~I"
"stride",\N
"getReal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~getReal"
"shuffle","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~shuffle~\\[I"
"n",\N
"getNumElements","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~getNumElements"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~negate"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~hashCode"
"list",\N
"setElement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{DoubleArray.java[DoubleArray~setElement~I~D"
"unique","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays~unique~\\[D"
"setRoundingMode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~setRoundingMode~QRoundingMode;"
"hypot","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~hypot~QDecimal64;"
"index",\N
"data",\N
"value",\N
"y",\N
"roundingMode",\N
"Function","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[Function"
"setScale","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~setScale~I"
"intValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~intValue"
"TransformerMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap"
"evaluate","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[Function~evaluate~\\[D"
"TransformerMap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~TransformerMap"
"scale",\N
"isInfinite","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~isInfinite"
"array",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal~subtract~QBigReal;"
"classes","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~classes"
"isNaN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~isNaN"
"evaluate","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[Function~evaluate~\\[D~I~I"
"a",\N
"clear","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~clear"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;"
"array",\N
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal^ONE"
"startIndex",\N
"containsClass","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~containsClass~QClass\\<*>;"
"a1",\N
"numElements",\N
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.util{BigReal.java[BigReal^ZERO"
"b1",\N
"key",\N
"PairDoubleInteger","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[PairDoubleInteger"
"a2",\N
"containsTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~containsTransformer~QNumberTransformer;"
"FastMath","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath"
"PairDoubleInteger","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[PairDoubleInteger~PairDoubleInteger~D~I"
"b2",\N
"IEEEremainder","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~IEEEremainder~D~D"
"value",\N
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~D~QDecimal64;~D~QDecimal64;"
"key",\N
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~equals~QObject;"
"dividend",\N
"value",\N
"a1",\N
"divisor",\N
"other",\N
"getKey","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[PairDoubleInteger~getKey"
"b1",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~abs~I"
"getTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~getTransformer~QClass\\<*>;"
"a2",\N
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{MathArrays.java[MathArrays[PairDoubleInteger~getValue"
"x",\N
"b2",\N
"key",\N
"Pair","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair"
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~abs~J"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~hashCode"
"Pair","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~Pair~QK;~QV;"
"a1",\N
"x",\N
"putTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~putTransformer~QClass\\<*>;~QNumberTransformer;"
"k",\N
"b1",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~abs~F"
"key",\N
"v",\N
"a2",\N
"x",\N
"transformer",\N
"Pair","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~Pair~QPair\\<+QK;+QV;>;"
"b2",\N
"abs","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~abs~D"
"removeTransformer","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~removeTransformer~QClass\\<*>;"
"a3",\N
"entry",\N
"b3",\N
"x",\N
"key",\N
"create","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~create~QK;~QV;"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~D~QDecimal64;~D~QDecimal64;~D~QDecimal64;"
"acos","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~acos~D"
"transformers","=mathmain3.6/src<main.java.org.apache.commons.math3.util{TransformerMap.java[TransformerMap~transformers"
"k",\N
"x",\N
"a1",\N
"v",\N
"Combinations","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations"
"b1",\N
"acosh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~acosh~D"
"equals","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~equals~QObject;"
"Combinations","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations~Combinations~I~I"
"a2",\N
"a",\N
"o",\N
"n",\N
"b2",\N
"asin","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~asin~D"
"getFirst","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~getFirst"
"k",\N
"a3",\N
"x",\N
"b3",\N
"comparator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations~comparator"
"getKey","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~getKey"
"asinh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~asinh~D"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;~QDecimal64;"
"getK","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations~getK"
"getSecond","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~getSecond"
"a1",\N
"a",\N
"getN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations~getN"
"getValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~getValue"
"b1",\N
"atan","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~atan~D"
"a2",\N
"iterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations~iterator"
"hashCode","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~hashCode"
"x",\N
"b2",\N
"a3",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Pair.java[Pair~toString"
"atan2","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~atan2~D~D"
"LexicographicIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicIterator"
"b3",\N
"LexicographicIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicIterator~LexicographicIterator~I~I"
"y",\N
"Incrementor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor"
"a4",\N
"x",\N
"n",\N
"Incrementor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~Incrementor"
"b4",\N
"k",\N
"atanh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~atanh~D"
"linearCombination","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~linearCombination~D~QDecimal64;~D~QDecimal64;~D~QDecimal64;~D~QDecimal64;"
"Incrementor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~Incrementor~I"
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicIterator~hasNext"
"a",\N
"a1",\N
"max",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicIterator~next"
"cbrt","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~cbrt~D"
"b1",\N
"canIncrement","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~canIncrement"
"a2",\N
"x",\N
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicIterator~remove"
"getCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~getCount"
"b2",\N
"ceil","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~ceil~D"
"SingletonIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[SingletonIterator"
"a3",\N
"getMaximalCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~getMaximalCount"
"x",\N
"SingletonIterator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[SingletonIterator~SingletonIterator~\\[I"
"b3",\N
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~copySign~D~D"
"resetCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~resetCount"
"a4",\N
"singleton",\N
"b4",\N
"magnitude",\N
"hasNext","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[SingletonIterator~hasNext"
"setMaximalCount","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~setMaximalCount~I"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~log"
"sign",\N
"max",\N
"next","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[SingletonIterator~next"
"copySign","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~copySign~F~F"
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~log10"
"wrap","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor~wrap~QIntegerSequence.Incrementor;"
"remove","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[SingletonIterator~remove"
"magnitude",\N
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~log1p"
"incrementor",\N
"sign",\N
"LexicographicComparator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicComparator"
"MaxCountExceededCallback","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Incrementor.java[Incrementor[MaxCountExceededCallback"
"longValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~longValue"
"LexicographicComparator","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicComparator~LexicographicComparator~I~I"
"cos","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~cos~D"
"PerfTestUtils","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~multiply~QDecimal64;"
"x",\N
"n",\N
"timesAndResults","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils~timesAndResults~I~I~Z~\\[QCallable\\<QDouble;>;"
"k",\N
"cosh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~cosh~D"
"a",\N
"repeatChunk",\N
"compare","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Combinations.java[Combinations[LexicographicComparator~compare~\\[I~\\[I"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~multiply~I"
"x",\N
"repeatStat",\N
"c1",\N
"runGC",\N
"exp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~exp~D"
"n",\N
"methods",\N
"c2",\N
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~multiply~D"
"x",\N
"NANO_TO_MILLI","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils^NANO_TO_MILLI"
"expm1","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~expm1~D"
"RetryRunner","=mathmain3.6/src<test.java.org.apache.commons.math3{RetryRunner.java[RetryRunner"
"a",\N
"RunTest","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils[RunTest"
"negate","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~negate"
"RetryRunnerTest","=mathmain3.6/src<test.java.org.apache.commons.math3{RetryRunnerTest.java[RetryRunnerTest"
"x",\N
"RunTest","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils[RunTest~RunTest~QString;"
"testRetryFailAlways","=mathmain3.6/src<test.java.org.apache.commons.math3{RetryRunnerTest.java[RetryRunnerTest~testRetryFailAlways"
"floor","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~floor~D"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~pow~D"
"name",\N
"testRetryFailSometimes","=mathmain3.6/src<test.java.org.apache.commons.math3{RetryRunnerTest.java[RetryRunnerTest~testRetryFailSometimes"
"x",\N
"p",\N
"call","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils[RunTest~call"
"floorMod","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~floorMod~J~J"
"rng","=mathmain3.6/src<test.java.org.apache.commons.math3{RetryRunnerTest.java[RetryRunnerTest^rng"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~pow~I"
"getName","=mathmain3.6/src<test.java.org.apache.commons.math3{PerfTestUtils.java[PerfTestUtils[RunTest~getName"
"a",\N
"n",\N
"ExtendedFieldElementAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest"
"b",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~pow~QDecimal64;"
"TestUtils","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils"
"build","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~build~D"
"getExponent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~getExponent~D"
"assertChiSquareAccept","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertChiSquareAccept~\\[QString;~\\[D~\\[J~D"
"e",\N
"x",\N
"d",\N
"valueLabels",\N
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~reciprocal"
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAbs"
"getExponent","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~getExponent~F"
"expected",\N
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~remainder~D"
"testAcos","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAcos"
"observed",\N
"f",\N
"a",\N
"alpha",\N
"testAcosh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAcosh"
"hypot","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~hypot~D~D"
"assertChiSquareAccept","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertChiSquareAccept~\\[I~\\[D~\\[J~D"
"remainder","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~remainder~QDecimal64;"
"x",\N
"testAddDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAddDouble"
"a",\N
"values",\N
"y",\N
"testAddField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAddField"
"expected",\N
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~rint"
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~log~D"
"testAsin","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAsin"
"observed",\N
"x",\N
"testAsinh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAsinh"
"rootN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~rootN~I"
"alpha",\N
"log","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~log~D~D"
"n",\N
"assertChiSquareAccept","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertChiSquareAccept~\\[D~\\[J~D"
"testAtan","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAtan"
"base",\N
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~round"
"expected",\N
"testAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAtan2"
"x",\N
"observed",\N
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~scalb~I"
"log10","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~log10~D"
"testAtanh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testAtanh"
"alpha",\N
"n",\N
"x",\N
"testCbrt","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCbrt"
"assertContains","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertContains~QString;~\\[D~D~D"
"shortValue","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~shortValue"
"log1p","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~log1p~D"
"msg",\N
"testCeil","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCeil"
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~signum"
"x",\N
"values",\N
"testCopySignDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCopySignDouble"
"main","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~main~\\[QString;"
"x",\N
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~sin"
"epsilon",\N
"testCopySignField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCopySignField"
"a",\N
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~sinh"
"assertContains","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertContains~\\[D~D~D"
"max","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~max~I~I"
"testCos","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCos"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~sqrt"
"values",\N
"a",\N
"testCosh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testCosh"
"x",\N
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~subtract~QDecimal64;"
"b",\N
"epsilon",\N
"testDivideDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testDivideDouble"
"max","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~max~J~J"
"a",\N
"assertEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertEquals~D~D~D"
"testDivideField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testDivideField"
"subtract","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~subtract~D"
"a",\N
"expected",\N
"b",\N
"a",\N
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testEquals"
"actual",\N
"max","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~max~F~F"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~tan"
"delta",\N
"testExp","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testExp"
"a",\N
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~tanh"
"assertEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertEquals~QString;~D~D~D"
"testExpm1","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testExpm1"
"b",\N
"msg",\N
"toString","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64~toString"
"max","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~max~D~D"
"testFloor","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testFloor"
"expected",\N
"NAN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64^NAN"
"a",\N
"actual",\N
"testGetField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testGetField"
"b",\N
"delta",\N
"NEGATIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64^NEGATIVE_INFINITY"
"testHash","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testHash"
"min","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~min~I~I"
"assertEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertEquals~\\[D~\\[D~D"
"ONE","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64^ONE"
"testHypot","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testHypot"
"a",\N
"expected",\N
"POSITIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64^POSITIVE_INFINITY"
"b",\N
"observed",\N
"testLinearCombinationDF2","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationDF2"
"min","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~min~J~J"
"tolerance",\N
"ZERO","=mathmain3.6/src<main.java.org.apache.commons.math3.util{Decimal64.java[Decimal64^ZERO"
"testLinearCombinationDF3","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationDF3"
"assertEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertEquals~QString;~\\[D~\\[D~D"
"a",\N
"XMinus5Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{XMinus5Function.java[XMinus5Function"
"testLinearCombinationDF4","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationDF4"
"b",\N
"msg",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{XMinus5Function.java[XMinus5Function~value~D"
"min","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~min~F~F"
"expected",\N
"testLinearCombinationDaFa","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationDaFa"
"x",\N
"observed",\N
"a",\N
"testLinearCombinationFF2","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationFF2"
"MonitoredFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{MonitoredFunction.java[MonitoredFunction"
"tolerance",\N
"b",\N
"getCallsCount","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{MonitoredFunction.java[MonitoredFunction~getCallsCount"
"assertEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertEquals~\\[QT;~\\[QT;"
"testLinearCombinationFF3","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationFF3"
"min","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~min~D~D"
"setCallsCount","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{MonitoredFunction.java[MonitoredFunction~setCallsCount~I"
"m",\N
"a",\N
"testLinearCombinationFF4","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationFF4"
"n",\N
"callsCount",\N
"b",\N
"testLinearCombinationFaFa","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLinearCombinationFaFa"
"assertRelativelyEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertRelativelyEquals~D~D~D"
"multiplyExact","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~multiplyExact~I~I"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{MonitoredFunction.java[MonitoredFunction~value~D"
"testLog","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLog"
"expected",\N
"a",\N
"x",\N
"actual",\N
"testLog1p","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testLog1p"
"b",\N
"SumSincFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{SumSincFunction.java[SumSincFunction"
"relativeError",\N
"SumSincFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{SumSincFunction.java[SumSincFunction~SumSincFunction~D"
"multiplyExact","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~multiplyExact~J~J"
"testMultiplyDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testMultiplyDouble"
"assertRelativelyEquals","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertRelativelyEquals~QString;~D~D~D"
"a",\N
"factor",\N
"testMultiplyField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testMultiplyField"
"msg",\N
"b",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{SumSincFunction.java[SumSincFunction~value~\\[D"
"expected",\N
"nextAfter","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextAfter~D~D"
"testMultiplyInt","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testMultiplyInt"
"point",\N
"actual",\N
"d",\N
"testPowDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testPowDouble"
"relativeError",\N
"FunctionUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest"
"direction",\N
"assertSame","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~assertSame~D~D"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testAdd"
"testPowField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testPowField"
"nextAfter","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextAfter~F~D"
"expected",\N
"testAddDifferentiable","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testAddDifferentiable"
"testPowInt","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testPowInt"
"f",\N
"actual",\N
"testCollector","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testCollector"
"direction",\N
"testRemainderDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testRemainderDouble"
"checkSerializedEquality","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~checkSerializedEquality~QObject;"
"nextDown","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextDown~D"
"testCombine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testCombine"
"testRemainderField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testRemainderField"
"object",\N
"a",\N
"testCompose","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testCompose"
"eliminateZeroMassPoints","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~eliminateZeroMassPoints~\\[I~\\[D"
"testRint","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testRint"
"nextDown","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextDown~F"
"densityPoints",\N
"testComposeDifferentiable","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testComposeDifferentiable"
"testRootN","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testRootN"
"a",\N
"densityValues",\N
"testFixingArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testFixingArguments"
"nextUp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextUp~D"
"testRound","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testRound"
"serializeAndRecover","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~serializeAndRecover~QObject;"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testMultiply"
"a",\N
"testScalb","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testScalb"
"o",\N
"nextUp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~nextUp~F"
"sumSquareDev","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~sumSquareDev~\\[D~D"
"testMultiplyDifferentiable","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testMultiplyDifferentiable"
"testSignum","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSignum"
"a",\N
"values",\N
"testSample","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testSample"
"testSin","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSin"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~pow~D~D"
"target",\N
"testSampleNegativeNumberOfPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testSampleNegativeNumberOfPoints"
"testSinh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSinh"
"updateCounts","=mathmain3.6/src<test.java.org.apache.commons.math3{TestUtils.java[TestUtils~updateCounts~D~\\[J~\\[D"
"x",\N
"testSampleNullNumberOfPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testSampleNullNumberOfPoints"
"y",\N
"testSqrt","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSqrt"
"value",\N
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~pow~D~I"
"counts",\N
"testSampleWrongBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testSampleWrongBounds"
"testSubtractDouble","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSubtractDouble"
"quartiles",\N
"d",\N
"testSinc","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testSinc"
"testSubtractField","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testSubtractField"
"QuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{QuinticFunction.java[QuinticFunction"
"e",\N
"testToDifferentiableMultivariateFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testToDifferentiableMultivariateFunction"
"testTan","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testTan"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{QuinticFunction.java[QuinticFunction~value~D"
"pow","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~pow~D~J"
"testToDifferentiableUnivariateFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testToDifferentiableUnivariateFunction"
"d",\N
"x",\N
"testTanh","=mathmain3.6/src<test.java.org.apache.commons.math3{ExtendedFieldElementAbstractTest.java[ExtendedFieldElementAbstractTest~testTanh"
"e",\N
"testToMultivariateDifferentiableFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testToMultivariateDifferentiableFunction"
"JacobianFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest"
"random","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~random"
"DSCompilerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest"
"testSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest~testSphere"
"testToUnivariateDifferential","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis{FunctionUtilsTest.java[FunctionUtilsTest~testToUnivariateDifferential"
"testCompositionRules","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testCompositionRules"
"rint","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~rint~D"
"SphereMapping","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest[SphereMapping"
"GradientFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest"
"testIncompatibleOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testIncompatibleOrder"
"x",\N
"SphereMapping","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest[SphereMapping~SphereMapping~D"
"test2DDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest~test2DDistance"
"testIncompatibleParams","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testIncompatibleParams"
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~round~D"
"radius",\N
"test3DDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest~test3DDistance"
"x",\N
"testIndices","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testIndices"
"jacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest[SphereMapping~jacobian~\\[D"
"EuclideanDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest[EuclideanDistance"
"round","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~round~F"
"point",\N
"testMultiplicationRules","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testMultiplicationRules"
"gradient","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest[EuclideanDistance~gradient~\\[D"
"x",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{JacobianFunctionTest.java[JacobianFunctionTest[SphereMapping~value~\\[D"
"testSize","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testSize"
"point",\N
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~scalb~D~I"
"point",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{GradientFunctionTest.java[GradientFunctionTest[EuclideanDistance~value~\\[D"
"testSymmetry","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DSCompilerTest.java[DSCompilerTest~testSymmetry"
"d",\N
"SparseGradientTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest"
"point",\N
"n",\N
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testAbs"
"DerivativeStructureTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest"
"FiniteDifferencesDifferentiatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest"
"scalb","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~scalb~F~I"
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testAbs"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testAdd"
"testBoundedSqrt","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testBoundedSqrt"
"f",\N
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testAdd"
"testAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testAtan2"
"testBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testBounds"
"n",\N
"testAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testAtan2"
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~signum~D"
"testAtan2SpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testAtan2SpecialCases"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testConstant"
"testAtan2SpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testAtan2SpecialCases"
"a",\N
"testGaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testGaussian"
"testCbrtDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCbrtDefinition"
"signum","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~signum~F"
"testCbrtDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCbrtDefinition"
"testCbrtPow3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCbrtPow3"
"testLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testLinear"
"a",\N
"testCbrtPow3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCbrtPow3"
"testMatrixFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testMatrixFunction"
"testCeilFloorRintLong","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCeilFloorRintLong"
"sin","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~sin~D"
"testCeilFloorRintLong","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCeilFloorRintLong"
"testCompose","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCompose"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testSerialization"
"x",\N
"testCompose","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCompose"
"sinh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~sinh~D"
"testCompositionOneVariableX","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCompositionOneVariableX"
"testSeveralFreeParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testSeveralFreeParameters"
"testComposeMismatchedDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testComposeMismatchedDimensions"
"x",\N
"testCompositionOneVariableY","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCompositionOneVariableY"
"testStepSizeUnstability","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testStepSizeUnstability"
"sqrt","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~sqrt~D"
"testCompositionOneVariableX","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCompositionOneVariableX"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testConstant"
"testTooLargeStep","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testTooLargeStep"
"a",\N
"testCompositionOneVariableY","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCompositionOneVariableY"
"testCopySign","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCopySign"
"testVectorFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testVectorFunction"
"subtractExact","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~subtractExact~I~I"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testConstant"
"testCosAcos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCosAcos"
"testWrongNumberOfPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testWrongNumberOfPoints"
"a",\N
"testCopySign","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCopySign"
"b",\N
"testCoshAcosh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCoshAcosh"
"testWrongOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testWrongOrder"
"subtractExact","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~subtractExact~J~J"
"testCosAcos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCosAcos"
"testWrongOrderMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testWrongOrderMatrix"
"testCoshDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testCoshDefinition"
"a",\N
"testCoshAcosh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCoshAcosh"
"testWrongOrderVector","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testWrongOrderVector"
"testDegRad","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testDegRad"
"b",\N
"testCoshDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCoshDefinition"
"tan","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~tan~D"
"testDivision","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testDivision"
"testWrongStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{FiniteDifferencesDifferentiatorTest.java[FiniteDifferencesDifferentiatorTest~testWrongStepSize"
"testCreateConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testCreateConstant"
"x",\N
"testExp","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testExp"
"HarmonicOscillatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest"
"tanh","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~tanh~D"
"testDegRad","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testDegRad"
"testDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testDerivative"
"testExpm1Definition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testExpm1Definition"
"x",\N
"testParametricGradient","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricGradient"
"testExp","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testExp"
"testExpression","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testExpression"
"toDegrees","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~toDegrees~D"
"testExpm1Definition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testExpm1Definition"
"testParametricUsage1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricUsage1"
"testField","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testField"
"x",\N
"testParametricUsage2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricUsage2"
"testExpression","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testExpression"
"toRadians","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~toRadians~D"
"testHypotDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testHypotDefinition"
"testField","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testField"
"testParametricUsage3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricUsage3"
"x",\N
"testHypotNeglectible","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testHypotNeglectible"
"ulp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~ulp~D"
"testParametricUsage4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricUsage4"
"testHypotDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testHypotDefinition"
"testHypotNoOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testHypotNoOverflow"
"x",\N
"testHypotNeglectible","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testHypotNeglectible"
"testParametricValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testParametricValue"
"testHypotSpecial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testHypotSpecial"
"ulp","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath~ulp~F"
"testHypotNoOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testHypotNoOverflow"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{HarmonicOscillatorTest.java[HarmonicOscillatorTest~testSomeValues"
"testLinearCombination1DSDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLinearCombination1DSDS"
"x",\N
"testHypotSpecial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testHypotSpecial"
"GaussianTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest"
"E","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^E"
"testLinearCombination1DoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLinearCombination1DoubleDS"
"testDerivativeLargeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testDerivativeLargeArguments"
"testLinearCombination1DSDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLinearCombination1DSDS"
"EXP_FRAC_TABLE_LEN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^EXP_FRAC_TABLE_LEN"
"testLinearCombination2DSDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLinearCombination2DSDS"
"testDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testDerivatives"
"testLinearCombination1DoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLinearCombination1DoubleDS"
"EXP_INT_TABLE_LEN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^EXP_INT_TABLE_LEN"
"testLinearCombination2DoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLinearCombination2DoubleDS"
"testDerivativesNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testDerivativesNaN"
"testLinearCombination2DSDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLinearCombination2DSDS"
"EXP_INT_TABLE_MAX_INDEX","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^EXP_INT_TABLE_MAX_INDEX"
"testLog","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLog"
"testLargeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testLargeArguments"
"testLinearCombination2DoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLinearCombination2DoubleDS"
"LN_MANT_LEN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^LN_MANT_LEN"
"testLog10Definition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLog10Definition"
"testParametricGradient","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricGradient"
"testLog","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLog"
"PI","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath^PI"
"testLog10Power","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLog10Power"
"testParametricUsage1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage1"
"testLog10Definition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLog10Definition"
"Split","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split"
"testLog1pDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLog1pDefinition"
"testParametricUsage2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage2"
"Split","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split~Split~D"
"testLog10Power","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLog10Power"
"testLog1pExpm1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLog1pExpm1"
"testParametricUsage3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage3"
"x",\N
"testLog1pDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLog1pDefinition"
"testLogExp","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testLogExp"
"Split","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split~Split~D~D"
"testParametricUsage4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage4"
"testLog1pExpm1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLog1pExpm1"
"testMult","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testMult"
"high",\N
"testParametricUsage5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage5"
"testLogExp","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testLogExp"
"low",\N
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testMultiply"
"testParametricUsage6","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricUsage6"
"Split","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split~Split~D~D~D"
"testMissingOrders","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testMissingOrders"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testNegate"
"testParametricValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testParametricValue"
"full",\N
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testMultiply"
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPow"
"high",\N
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testPreconditions"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testNegate"
"low",\N
"testPowDoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPowDoubleDS"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{GaussianTest.java[GaussianTest~testSomeValues"
"multiply","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split~multiply~QSplit;"
"testOneOrderConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testOneOrderConstructor"
"testPowReciprocalPow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPowReciprocalPow"
"b",\N
"SincTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest"
"testOneParameterConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testOneParameterConstructor"
"reciprocal","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split~reciprocal"
"testPrimitiveAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPrimitiveAdd"
"testCrossings","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testCrossings"
"NAN","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split^NAN"
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPow"
"testPrimitiveMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPrimitiveMultiply"
"testDerivativeShortcut","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testDerivativeShortcut"
"NEGATIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split^NEGATIVE_INFINITY"
"testPowDoubleDS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPowDoubleDS"
"testPrimitiveRemainder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPrimitiveRemainder"
"testDerivativeZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testDerivativeZero"
"POSITIVE_INFINITY","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[Split^POSITIVE_INFINITY"
"testPowReciprocalPow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPowReciprocalPow"
"testPrimitiveSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testPrimitiveSubtract"
"testDerivatives1Dot2Normalized","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testDerivatives1Dot2Normalized"
"testPrimitiveAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPrimitiveAdd"
"ExpIntTable","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[ExpIntTable"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testReciprocal"
"testDerivatives1Dot2Unnormalized","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testDerivatives1Dot2Unnormalized"
"ExpFracTable","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[ExpFracTable"
"testPrimitiveMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPrimitiveMultiply"
"testRemainder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testRemainder"
"testEuler","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testEuler"
"lnMant","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[lnMant"
"testPrimitiveRemainder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPrimitiveRemainder"
"CodyWaite","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[CodyWaite"
"testRootNSingularity","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testRootNSingularity"
"testShortcut","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testShortcut"
"CodyWaite","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[CodyWaite~CodyWaite~D"
"testPrimitiveSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testPrimitiveSubtract"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSerialization"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SincTest.java[SincTest~testZero"
"xa",\N
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testReciprocal"
"testSignum","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSignum"
"getK","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[CodyWaite~getK"
"StepFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest"
"testRemainder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testRemainder"
"testEndpointBehavior","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testEndpointBehavior"
"testSinAsin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSinAsin"
"getRemA","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[CodyWaite~getRemA"
"testHeaviside","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testHeaviside"
"testRootNSingularity","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testRootNSingularity"
"testSinCos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSinCos"
"getRemB","=mathmain3.6/src<main.java.org.apache.commons.math3.util{FastMath.java[FastMath[CodyWaite~getRemB"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions1"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSerialization"
"testSinhAsinh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSinhAsinh"
"LogisticTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest"
"testSignum","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSignum"
"testCompareDerivativeSigmoid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testCompareDerivativeSigmoid"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions2"
"testSinhDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSinhDefinition"
"testSinAsin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSinAsin"
"testCompareSigmoid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testCompareSigmoid"
"testPreconditions3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions3"
"testSqrtDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSqrtDefinition"
"testGradientComponent0Component4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testGradientComponent0Component4"
"testSinCos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSinCos"
"testPreconditions4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions4"
"testSqrtPow2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSqrtPow2"
"testSinhAsinh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSinhAsinh"
"testPreconditions5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions5"
"testGradientComponent1Component2Component3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testGradientComponent1Component2Component3"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSubtract"
"testGradientComponent5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testGradientComponent5"
"testSinhDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSinhDefinition"
"testPreconditions6","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testPreconditions6"
"testSubtraction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testSubtraction"
"testSqrtDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSqrtDefinition"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{StepFunctionTest.java[StepFunctionTest~testSomeValues"
"testParametricUsage1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage1"
"testTanAtan","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTanAtan"
"testSqrtPow2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSqrtPow2"
"testParametricUsage2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage2"
"LogitTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest"
"testTangentDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTangentDefinition"
"testDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testDerivative"
"testParametricUsage3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage3"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testSubtract"
"testTanhAtanh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTanhAtanh"
"testDerivativeLargeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testDerivativeLargeArguments"
"testTanAtan","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTanAtan"
"testParametricUsage4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage4"
"testTanhDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTanhDefinition"
"testDerivativesHighOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testDerivativesHighOrder"
"testParametricUsage5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage5"
"testTangentDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTangentDefinition"
"testTaylorAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTaylorAtan2"
"testDerivativesWithInverseFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testDerivativesWithInverseFunction"
"testTanhAtanh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTanhAtanh"
"testParametricUsage6","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testParametricUsage6"
"testTaylorPolynomial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTaylorPolynomial"
"testParametricUsage1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage1"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testPreconditions1"
"testTanhDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTanhDefinition"
"testToDegreesDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testToDegreesDefinition"
"testParametricUsage2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage2"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testPreconditions2"
"testTaylorAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTaylorAtan2"
"testToRadiansDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testToRadiansDefinition"
"testParametricUsage3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage3"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogisticTest.java[LogisticTest~testSomeValues"
"testTaylorPolynomial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTaylorPolynomial"
"testTrigo","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testTrigo"
"testParametricUsage4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage4"
"testToDegreesDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testToDegreesDefinition"
"SqrtTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SqrtTest.java[SqrtTest"
"testVarAddition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testVarAddition"
"testParametricUsage5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage5"
"testComparison","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SqrtTest.java[SqrtTest~testComparison"
"testToRadiansDefinition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testToRadiansDefinition"
"testVarMultInPlace","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testVarMultInPlace"
"testDerivativeComparison","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SqrtTest.java[SqrtTest~testDerivativeComparison"
"testParametricUsage6","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricUsage6"
"testTooLargeOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTooLargeOrder"
"testVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{SparseGradientTest.java[SparseGradientTest~testVariable"
"testParametricValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testParametricValue"
"testDerivativesHighOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SqrtTest.java[SqrtTest~testDerivativesHighOrder"
"testTrigo","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testTrigo"
"SigmoidTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testPreconditions1"
"LegendreGaussIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegratorTest.java[LegendreGaussIntegratorTest"
"testDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testDerivative"
"testVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testVariable"
"testExactIntegration","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegratorTest.java[LegendreGaussIntegratorTest~testExactIntegration"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testPreconditions2"
"testDerivativeLargeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testDerivativeLargeArguments"
"testVariableWithoutDerivative0","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testVariableWithoutDerivative0"
"testIssue464","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegratorTest.java[LegendreGaussIntegratorTest~testIssue464"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testSomeValues"
"testDerivativesHighOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testDerivativesHighOrder"
"testVariableWithoutDerivative1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testVariableWithoutDerivative1"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegratorTest.java[LegendreGaussIntegratorTest~testQuinticFunction"
"testValueWithInverseFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{LogitTest.java[LogitTest~testValueWithInverseFunction"
"testParametricUsage1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testParametricUsage1"
"testWrongVariableIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.differentiation{DerivativeStructureTest.java[DerivativeStructureTest~testWrongVariableIndex"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{LegendreGaussIntegratorTest.java[LegendreGaussIntegratorTest~testSinFunction"
"testParametricUsage2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testParametricUsage2"
"RombergIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{RombergIntegratorTest.java[RombergIntegratorTest"
"SimpsonIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{SimpsonIntegratorTest.java[SimpsonIntegratorTest"
"MidPointIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{MidPointIntegratorTest.java[MidPointIntegratorTest"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{RombergIntegratorTest.java[RombergIntegratorTest~testParameters"
"testParametricUsage3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testParametricUsage3"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{SimpsonIntegratorTest.java[SimpsonIntegratorTest~testParameters"
"testLowAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{MidPointIntegratorTest.java[MidPointIntegratorTest~testLowAccuracy"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{RombergIntegratorTest.java[RombergIntegratorTest~testQuinticFunction"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{SimpsonIntegratorTest.java[SimpsonIntegratorTest~testQuinticFunction"
"testParametricUsage4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testParametricUsage4"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{MidPointIntegratorTest.java[MidPointIntegratorTest~testParameters"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{RombergIntegratorTest.java[RombergIntegratorTest~testSinFunction"
"testParametricValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testParametricValue"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{SimpsonIntegratorTest.java[SimpsonIntegratorTest~testSinFunction"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{MidPointIntegratorTest.java[MidPointIntegratorTest~testQuinticFunction"
"TrapezoidIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegratorTest.java[TrapezoidIntegratorTest"
"testSomeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.function{SigmoidTest.java[SigmoidTest~testSomeValues"
"IterativeLegendreGaussIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{MidPointIntegratorTest.java[MidPointIntegratorTest~testSinFunction"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegratorTest.java[TrapezoidIntegratorTest~testParameters"
"testExactIntegration","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest~testExactIntegration"
"LegendreParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreParametricTest.java[LegendreParametricTest"
"LegendreHighPrecisionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionTest.java[LegendreHighPrecisionTest"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegratorTest.java[TrapezoidIntegratorTest~testQuinticFunction"
"LegendreParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreParametricTest.java[LegendreParametricTest~LegendreParametricTest~I~I~D~D"
"testIssue464","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest~testIssue464"
"testCos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionTest.java[LegendreHighPrecisionTest~testCos"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{TrapezoidIntegratorTest.java[TrapezoidIntegratorTest~testSinFunction"
"numberOfPoints",\N
"testNormalDistributionWithLargeSigma","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest~testNormalDistributionWithLargeSigma"
"testInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionTest.java[LegendreHighPrecisionTest~testInverse"
"maxDegree",\N
"GaussianQuadratureAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussianQuadratureAbstractTest.java[GaussianQuadratureAbstractTest"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest~testQuinticFunction"
"eps",\N
"HermiteTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteTest.java[HermiteTest"
"getExpectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussianQuadratureAbstractTest.java[GaussianQuadratureAbstractTest~getExpectedValue~I"
"numUlps",\N
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration{IterativeLegendreGaussIntegratorTest.java[IterativeLegendreGaussIntegratorTest~testSinFunction"
"testNormalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteTest.java[HermiteTest~testNormalDistribution"
"n",\N
"getExpectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreParametricTest.java[LegendreParametricTest~getExpectedValue~I"
"testNormalMean","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteTest.java[HermiteTest~testNormalMean"
"GaussIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorTest.java[GaussIntegratorTest"
"testAllMonomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussianQuadratureAbstractTest.java[GaussianQuadratureAbstractTest~testAllMonomials"
"n",\N
"testGetPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorTest.java[GaussIntegratorTest~testGetPoints"
"testNormalVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteTest.java[HermiteTest~testNormalVariance"
"BaseRuleFactoryTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[BaseRuleFactoryTest"
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreParametricTest.java[LegendreParametricTest~getParameters"
"testGetWeights","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorTest.java[GaussIntegratorTest~testGetWeights"
"testConcurrentCreation","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[BaseRuleFactoryTest~testConcurrentCreation"
"HermiteParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteParametricTest.java[HermiteParametricTest"
"MAX_NUM_POINTS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreParametricTest.java[LegendreParametricTest^MAX_NUM_POINTS"
"HermiteParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteParametricTest.java[HermiteParametricTest~HermiteParametricTest~I~I~D~D"
"testIntegrate","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{GaussIntegratorTest.java[GaussIntegratorTest~testIntegrate"
"RuleBuilder","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[RuleBuilder"
"LegendreHighPrecisionParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionParametricTest.java[LegendreHighPrecisionParametricTest"
"numberOfPoints",\N
"getNumberOfCalls","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[RuleBuilder~getNumberOfCalls"
"LegendreHighPrecisionParametricTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionParametricTest.java[LegendreHighPrecisionParametricTest~LegendreHighPrecisionParametricTest~I~I~D~D"
"LegendreTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreTest.java[LegendreTest"
"maxDegree",\N
"testCos","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreTest.java[LegendreTest~testCos"
"DummyRuleFactory","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[DummyRuleFactory"
"numberOfPoints",\N
"eps",\N
"getNumberOfCalls","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{BaseRuleFactoryTest.java[DummyRuleFactory~getNumberOfCalls"
"maxDegree",\N
"numUlps",\N
"testInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreTest.java[LegendreTest~testInverse"
"eps",\N
"getExpectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteParametricTest.java[HermiteParametricTest~getExpectedValue~I"
"PiecewiseBicubicSplineInterpolatingFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunctionTest.java[PiecewiseBicubicSplineInterpolatingFunctionTest"
"numUlps",\N
"FieldHermiteInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest"
"testParabaloid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunctionTest.java[PiecewiseBicubicSplineInterpolatingFunctionTest~testParabaloid"
"n",\N
"getExpectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionParametricTest.java[LegendreHighPrecisionParametricTest~getExpectedValue~I"
"testDuplicatedAbscissa","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testDuplicatedAbscissa"
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteParametricTest.java[HermiteParametricTest~getParameters"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunctionTest.java[PiecewiseBicubicSplineInterpolatingFunctionTest~testPlane"
"n",\N
"testEmptySampleDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testEmptySampleDerivative"
"MAX_NUM_POINTS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{HermiteParametricTest.java[HermiteParametricTest^MAX_NUM_POINTS"
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionParametricTest.java[LegendreHighPrecisionParametricTest~getParameters"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatingFunctionTest.java[PiecewiseBicubicSplineInterpolatingFunctionTest~testPreconditions"
"testEmptySampleValue","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testEmptySampleValue"
"MicrosphereProjectionInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{MicrosphereProjectionInterpolatorTest.java[MicrosphereProjectionInterpolatorTest"
"MAX_NUM_POINTS","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.integration.gauss{LegendreHighPrecisionParametricTest.java[LegendreHighPrecisionParametricTest^MAX_NUM_POINTS"
"SplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest"
"testMixedDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testMixedDerivatives"
"testLinearFunction2D","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{MicrosphereProjectionInterpolatorTest.java[MicrosphereProjectionInterpolatorTest~testLinearFunction2D"
"testIllegalArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest~testIllegalArguments"
"TricubicSplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatorTest.java[TricubicSplineInterpolatorTest"
"testOnePointParabola","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testOnePointParabola"
"UnivariatePeriodicInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatorTest.java[TricubicSplineInterpolatorTest~testPlane"
"testInterpolateLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest~testInterpolateLinear"
"testLessThanOnePeriodCoverage","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest~testLessThanOnePeriodCoverage"
"testQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testQuadratic"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatorTest.java[TricubicSplineInterpolatorTest~testPreconditions"
"testInterpolateLinearDegenerateThreeSegment","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest~testInterpolateLinearDegenerateThreeSegment"
"testMoreThanOnePeriodCoverage","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest~testMoreThanOnePeriodCoverage"
"testRandomPolynomialsFirstDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testRandomPolynomialsFirstDerivative"
"testWave","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatorTest.java[TricubicSplineInterpolatorTest~testWave"
"testInterpolateLinearDegenerateTwoSegment","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest~testInterpolateLinearDegenerateTwoSegment"
"testSine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest~testSine"
"testRandomPolynomialsValuesOnly","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testRandomPolynomialsValuesOnly"
"testInterpolateSin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest~testInterpolateSin"
"NevilleInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolatorTest.java[NevilleInterpolatorTest"
"testTooFewSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest~testTooFewSamples"
"testSine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testSine"
"partialerror","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolatorTest.java[NevilleInterpolatorTest~partialerror~\\[D~D"
"coefficientTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest^coefficientTolerance"
"testUnsortedSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{UnivariatePeriodicInterpolatorTest.java[UnivariatePeriodicInterpolatorTest~testUnsortedSamples"
"x",\N
"testSquareRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testSquareRoot"
"interpolationTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest^interpolationTolerance"
"z",\N
"TricubicSplineInterpolatingFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunctionTest.java[TricubicSplineInterpolatingFunctionTest"
"testWikipedia","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testWikipedia"
"knotTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SplineInterpolatorTest.java[SplineInterpolatorTest^knotTolerance"
"testExpm1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolatorTest.java[NevilleInterpolatorTest~testExpm1Function"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunctionTest.java[TricubicSplineInterpolatingFunctionTest~testPlane"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{FieldHermiteInterpolatorTest.java[FieldHermiteInterpolatorTest~testZero"
"LinearInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolatorTest.java[NevilleInterpolatorTest~testParameters"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunctionTest.java[TricubicSplineInterpolatingFunctionTest~testPreconditions"
"testIllegalArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest~testIllegalArguments"
"SmoothingPolynomialBicubicSplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolatorTest.java[SmoothingPolynomialBicubicSplineInterpolatorTest"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{NevilleInterpolatorTest.java[NevilleInterpolatorTest~testSinFunction"
"testWave","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicSplineInterpolatingFunctionTest.java[TricubicSplineInterpolatingFunctionTest~testWave"
"testParaboloid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolatorTest.java[SmoothingPolynomialBicubicSplineInterpolatorTest~testParaboloid"
"testInterpolateLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest~testInterpolateLinear"
"AkimaSplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolatorTest.java[AkimaSplineInterpolatorTest"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolatorTest.java[SmoothingPolynomialBicubicSplineInterpolatorTest~testPlane"
"TricubicInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatorTest.java[TricubicInterpolatorTest"
"testInterpolateLinearDegenerateThreeSegment","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest~testInterpolateLinearDegenerateThreeSegment"
"testIllegalArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolatorTest.java[AkimaSplineInterpolatorTest~testIllegalArguments"
"testIsValid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatorTest.java[TricubicInterpolatorTest~testIsValid"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{SmoothingPolynomialBicubicSplineInterpolatorTest.java[SmoothingPolynomialBicubicSplineInterpolatorTest~testPreconditions"
"testInterpolateLinearDegenerateTwoSegment","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest~testInterpolateLinearDegenerateTwoSegment"
"testInterpolateCubic","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolatorTest.java[AkimaSplineInterpolatorTest~testInterpolateCubic"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatorTest.java[TricubicInterpolatorTest~testPlane"
"PiecewiseBicubicSplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatorTest.java[PiecewiseBicubicSplineInterpolatorTest"
"coefficientTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest^coefficientTolerance"
"testInterpolateLine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolatorTest.java[AkimaSplineInterpolatorTest~testInterpolateLine"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatorTest.java[TricubicInterpolatorTest~testPreconditions"
"testInterpolation1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatorTest.java[PiecewiseBicubicSplineInterpolatorTest~testInterpolation1"
"interpolationTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest^interpolationTolerance"
"testInterpolateParabola","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{AkimaSplineInterpolatorTest.java[AkimaSplineInterpolatorTest~testInterpolateParabola"
"testWave","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatorTest.java[TricubicInterpolatorTest~testWave"
"testInterpolation2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatorTest.java[PiecewiseBicubicSplineInterpolatorTest~testInterpolation2"
"knotTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LinearInterpolatorTest.java[LinearInterpolatorTest^knotTolerance"
"HermiteInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{PiecewiseBicubicSplineInterpolatorTest.java[PiecewiseBicubicSplineInterpolatorTest~testPreconditions"
"LoessInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest"
"testDuplicatedAbscissa","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testDuplicatedAbscissa"
"BicubicSplineInterpolatingFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest"
"testCompletelyIncorrectBandwidth1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testCompletelyIncorrectBandwidth1"
"MicrosphereInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatorTest.java[MicrosphereInterpolatorTest"
"testInterpolation1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testInterpolation1"
"testEmptySample","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testEmptySample"
"testLinearFunction2D","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatorTest.java[MicrosphereInterpolatorTest~testLinearFunction2D"
"testCompletelyIncorrectBandwidth2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testCompletelyIncorrectBandwidth2"
"testInterpolation2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testInterpolation2"
"testMixedDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testMixedDerivatives"
"testParaboloid2D","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{MicrosphereInterpolatorTest.java[MicrosphereInterpolatorTest~testParaboloid2D"
"testEmptyData","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testEmptyData"
"testIsValidPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testIsValidPoint"
"testOnePointParabola","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testOnePointParabola"
"BicubicInterpolatingFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunctionTest.java[BicubicInterpolatingFunctionTest"
"testIncreasingBandwidthIncreasesSmoothness","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testIncreasingBandwidthIncreasesSmoothness"
"testIsValidPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunctionTest.java[BicubicInterpolatingFunctionTest~testIsValidPoint"
"testQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testQuadratic"
"testMatchingPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testMatchingPartialDerivatives"
"testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers"
"testParaboloid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunctionTest.java[BicubicInterpolatingFunctionTest~testParaboloid"
"testParaboloid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testParaboloid"
"testRandomPolynomialsFirstDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testRandomPolynomialsFirstDerivative"
"testInsufficientBandwidth","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testInsufficientBandwidth"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunctionTest.java[BicubicInterpolatingFunctionTest~testPlane"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testPlane"
"testRandomPolynomialsValuesOnly","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testRandomPolynomialsValuesOnly"
"testMath296withoutWeights","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testMath296withoutWeights"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatingFunctionTest.java[BicubicInterpolatingFunctionTest~testPreconditions"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testPreconditions"
"testSine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testSine"
"testNonStrictlyIncreasing1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNonStrictlyIncreasing1"
"testSquareRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testSquareRoot"
"TricubicInterpolatingFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunctionTest.java[TricubicInterpolatingFunctionTest"
"testSplinePartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatingFunctionTest.java[BicubicSplineInterpolatingFunctionTest~testSplinePartialDerivatives"
"testNonStrictlyIncreasing2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNonStrictlyIncreasing2"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunctionTest.java[TricubicInterpolatingFunctionTest~testPlane"
"testWikipedia","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testWikipedia"
"BicubicSplineInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatorTest.java[BicubicSplineInterpolatorTest"
"testNotAllFiniteReal1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal1"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunctionTest.java[TricubicInterpolatingFunctionTest~testPreconditions"
"testInterpolation1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatorTest.java[BicubicSplineInterpolatorTest~testInterpolation1"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{HermiteInterpolatorTest.java[HermiteInterpolatorTest~testZero"
"testNotAllFiniteReal2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal2"
"testQuadric","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunctionTest.java[TricubicInterpolatingFunctionTest~testQuadric"
"testInterpolation2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatorTest.java[BicubicSplineInterpolatorTest~testInterpolation2"
"DividedDifferenceInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolatorTest.java[DividedDifferenceInterpolatorTest"
"testNotAllFiniteReal3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal3"
"testWave","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{TricubicInterpolatingFunctionTest.java[TricubicInterpolatingFunctionTest~testWave"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicSplineInterpolatorTest.java[BicubicSplineInterpolatorTest~testPreconditions"
"partialerror","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolatorTest.java[DividedDifferenceInterpolatorTest~partialerror~\\[D~D"
"testNotAllFiniteReal4","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal4"
"x",\N
"BicubicInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatorTest.java[BicubicInterpolatorTest"
"PolynomialFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest"
"testNotAllFiniteReal5","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal5"
"z",\N
"testParaboloid","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatorTest.java[BicubicInterpolatorTest~testParaboloid"
"testAddition","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testAddition"
"testExpm1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolatorTest.java[DividedDifferenceInterpolatorTest~testExpm1Function"
"testNotAllFiniteReal6","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testNotAllFiniteReal6"
"testPlane","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatorTest.java[BicubicInterpolatorTest~testPlane"
"testConstants","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testConstants"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolatorTest.java[DividedDifferenceInterpolatorTest~testParameters"
"testOnDistortedSine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testOnDistortedSine"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{BicubicInterpolatorTest.java[BicubicInterpolatorTest~testPreconditions"
"testLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testLinear"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{DividedDifferenceInterpolatorTest.java[DividedDifferenceInterpolatorTest~testSinFunction"
"testOnOnePoint","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testOnOnePoint"
"testMath341","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testMath341"
"PolynomialSplineFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest"
"PolynomialFunctionNewtonFormTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest"
"testOnStraightLine","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testOnStraightLine"
"findKnot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest~findKnot~\\[D~D"
"testMultiplication","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testMultiplication"
"testDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest~testDerivative"
"knots",\N
"testOnTwoPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testOnTwoPoints"
"testQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testQuadratic"
"x",\N
"testLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest~testLinearFunction"
"testUnequalSizeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.interpolation{LoessInterpolatorTest.java[LoessInterpolatorTest~testUnequalSizeArguments"
"testQuintic","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testQuintic"
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest~testConstructor"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest~testParameters"
"PolynomialsUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testSerial"
"testIsValidPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest~testIsValidPoint"
"testQuadraticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest~testQuadraticFunction"
"testChebyshevBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testChebyshevBounds"
"testString","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testString"
"testValues","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest~testValues"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionNewtonFormTest.java[PolynomialFunctionNewtonFormTest~testQuinticFunction"
"testChebyshevDifferentials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testChebyshevDifferentials"
"testSubtraction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testSubtraction"
"knots","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest^knots"
"PolynomialFunctionLagrangeFormTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeFormTest.java[PolynomialFunctionLagrangeFormTest"
"testChebyshevOrthogonality","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testChebyshevOrthogonality"
"tolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialSplineFunctionTest.java[PolynomialSplineFunctionTest^tolerance"
"testfirstDerivativeComparison","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest~testfirstDerivativeComparison"
"testLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeFormTest.java[PolynomialFunctionLagrangeFormTest~testLinearFunction"
"testFirstChebyshevPolynomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testFirstChebyshevPolynomials"
"tolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionTest.java[PolynomialFunctionTest^tolerance"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeFormTest.java[PolynomialFunctionLagrangeFormTest~testParameters"
"SecantSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{SecantSolverTest.java[SecantSolverTest"
"testFirstHermitePolynomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testFirstHermitePolynomials"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{SecantSolverTest.java[SecantSolverTest~getQuinticEvalCounts"
"testQuadraticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeFormTest.java[PolynomialFunctionLagrangeFormTest~testQuadraticFunction"
"FieldBracketingNthOrderBrentSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest"
"testFirstLaguerrePolynomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testFirstLaguerrePolynomials"
"BaseSecantSolverAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest~setUp"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialFunctionLagrangeFormTest.java[PolynomialFunctionLagrangeFormTest~testQuinticFunction"
"testFirstLegendrePolynomials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testFirstLegendrePolynomials"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~getQuinticEvalCounts"
"testConstructorOK","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest~testConstructorOK"
"MullerSolver2Test","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolver2Test.java[MullerSolver2Test"
"testHermiteDifferentials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testHermiteDifferentials"
"testBadEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testBadEndpoints"
"testExpm1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolver2Test.java[MullerSolver2Test~testExpm1Function"
"testConvergenceOnFunctionAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest~testConvergenceOnFunctionAccuracy"
"testQuinticZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testQuinticZero"
"testHermiteOrthogonality","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testHermiteOrthogonality"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolver2Test.java[MullerSolver2Test~testParameters"
"testInsufficientOrder3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest~testInsufficientOrder3"
"testHighDegreeLegendre","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testHighDegreeLegendre"
"testRootEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testRootEndpoints"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolver2Test.java[MullerSolver2Test~testQuinticFunction"
"testNeta","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{FieldBracketingNthOrderBrentSolverTest.java[FieldBracketingNthOrderBrentSolverTest~testNeta"
"testJacobiEvaluationAt1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testJacobiEvaluationAt1"
"testSinZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testSinZero"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolver2Test.java[MullerSolver2Test~testSinFunction"
"IllinoisSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{IllinoisSolverTest.java[IllinoisSolverTest"
"testJacobiLegendre","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testJacobiLegendre"
"testSolutionAboveSide","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testSolutionAboveSide"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{IllinoisSolverTest.java[IllinoisSolverTest~getQuinticEvalCounts"
"NewtonSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonSolverTest.java[NewtonSolverTest"
"testQuinticZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonSolverTest.java[NewtonSolverTest~testQuinticZero"
"testSolutionBelowSide","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testSolutionBelowSide"
"testJacobiOrthogonality","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testJacobiOrthogonality"
"UnivariateSolverUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest"
"testBadAdditive","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBadAdditive"
"testSinZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonSolverTest.java[NewtonSolverTest~testSinZero"
"testSolutionLeftSide","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testSolutionLeftSide"
"testLaguerreDifferentials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testLaguerreDifferentials"
"testBadEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBadEndpoints"
"testSolutionRightSide","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BaseSecantSolverAbstractTest.java[BaseSecantSolverAbstractTest~testSolutionRightSide"
"testLaguerreOrthogonality","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testLaguerreOrthogonality"
"BrentSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest"
"testBadInitial","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBadInitial"
"testBadEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testBadEndpoints"
"testLegendreDifferentials","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testLegendreDifferentials"
"LaguerreSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest"
"testInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testInitialGuess"
"testBadMaximumIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBadMaximumIterations"
"testEmptyCoefficients","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testEmptyCoefficients"
"testLegendreOrthogonality","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testLegendreOrthogonality"
"testMath832","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testMath832"
"testLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testLinearFunction"
"testBracketCentered","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketCentered"
"testShift","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.polynomials{PolynomialsUtilsTest.java[PolynomialsUtilsTest~testShift"
"testBracketEndpointRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketEndpointRoot"
"testQuinticZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testQuinticZero"
"testNullCoefficients","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testNullCoefficients"
"RegulaFalsiSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolverTest.java[RegulaFalsiSolverTest"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolverTest.java[RegulaFalsiSolverTest~getQuinticEvalCounts"
"testRootEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testRootEndpoints"
"testBracketExponential","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketExponential"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testParameters"
"testIssue631","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RegulaFalsiSolverTest.java[RegulaFalsiSolverTest~testIssue631"
"testQuadraticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testQuadraticFunction"
"testSinZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BrentSolverTest.java[BrentSolverTest~testSinZero"
"testBracketHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketHigh"
"RiddersSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RiddersSolverTest.java[RiddersSolverTest"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testQuinticFunction"
"testBracketLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketLinear"
"MullerSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolverTest.java[MullerSolverTest"
"testExpm1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RiddersSolverTest.java[RiddersSolverTest~testExpm1Function"
"testExpm1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolverTest.java[MullerSolverTest~testExpm1Function"
"testQuinticFunction2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testQuinticFunction2"
"testBracketLoopConditionForB","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketLoopConditionForB"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RiddersSolverTest.java[RiddersSolverTest~testParameters"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolverTest.java[MullerSolverTest~testParameters"
"testBracketLow","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketLow"
"testTooManyEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{LaguerreSolverTest.java[LaguerreSolverTest~testTooManyEvaluations"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RiddersSolverTest.java[RiddersSolverTest~testQuinticFunction"
"testQuinticFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolverTest.java[MullerSolverTest~testQuinticFunction"
"testBracketSin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testBracketSin"
"BisectionSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BisectionSolverTest.java[BisectionSolverTest"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{RiddersSolverTest.java[RiddersSolverTest~testSinFunction"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{MullerSolverTest.java[MullerSolverTest~testSinFunction"
"testMath369","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BisectionSolverTest.java[BisectionSolverTest~testMath369"
"testIterationExceeded","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testIterationExceeded"
"BracketingNthOrderBrentSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest"
"PegasusSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{PegasusSolverTest.java[PegasusSolverTest"
"testQuinticZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BisectionSolverTest.java[BisectionSolverTest~testQuinticZero"
"testMisc","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testMisc"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~getQuinticEvalCounts"
"getQuinticEvalCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{PegasusSolverTest.java[PegasusSolverTest~getQuinticEvalCounts"
"testSinZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BisectionSolverTest.java[BisectionSolverTest~testSinZero"
"testNullFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testNullFunction"
"testConstructorsOK","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testConstructorsOK"
"NewtonRaphsonSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolverTest.java[NewtonRaphsonSolverTest"
"testSolveAccuracyNull","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveAccuracyNull"
"testQuinticZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolverTest.java[NewtonRaphsonSolverTest~testQuinticZero"
"ComplexTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest"
"testConvergenceOnFunctionAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testConvergenceOnFunctionAccuracy"
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAbs"
"testSolveAccuracySin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveAccuracySin"
"testSinZero","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{NewtonRaphsonSolverTest.java[NewtonRaphsonSolverTest~testSinZero"
"testFasterThanNewton","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testFasterThanNewton"
"testAbsInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAbsInfinite"
"testSolveBadAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveBadAccuracy"
"ComplexUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest"
"testInsufficientOrder1","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testInsufficientOrder1"
"testAbsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAbsNaN"
"testConvertToComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest~testConvertToComplex"
"testSolveBadEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveBadEndpoints"
"testInsufficientOrder2","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testInsufficientOrder2"
"testAcos","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAcos"
"testPolar2Complex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest~testPolar2Complex"
"testSolveNoRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveNoRoot"
"testInsufficientOrder3","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testInsufficientOrder3"
"testPolar2ComplexIllegalModulus","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest~testPolar2ComplexIllegalModulus"
"testAcosInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAcosInf"
"testSolveNull","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveNull"
"testIssue716","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest~testIssue716"
"testAcosNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAcosNaN"
"testPolar2ComplexInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest~testPolar2ComplexInf"
"testSolveSin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{UnivariateSolverUtilsTest.java[UnivariateSolverUtilsTest~testSolveSin"
"TestFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction"
"testPolar2ComplexNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexUtilsTest.java[ComplexUtilsTest~testPolar2ComplexNaN"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAdd"
"TestFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction~TestFunction~D~D~D"
"ComplexFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatTest.java[ComplexFormatTest"
"testAddInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAddInf"
"ComplexFieldTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFieldTest.java[ComplexFieldTest"
"root",\N
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatTest.java[ComplexFormatTest~getDecimalCharacter"
"min",\N
"testOne","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFieldTest.java[ComplexFieldTest~testOne"
"testAddNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAddNaN"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatTest.java[ComplexFormatTest~getLocale"
"max",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFieldTest.java[ComplexFieldTest~testSerial"
"testAsin","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAsin"
"getMax","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction~getMax"
"ComplexFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest"
"ComplexFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~ComplexFormatAbstractTest"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFieldTest.java[ComplexFieldTest~testZero"
"testAsinInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAsinInf"
"getMin","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction~getMin"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~getDecimalCharacter"
"QuaternionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest"
"testAsinNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAsinNaN"
"getRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction~getRoot"
"testAccessors1","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testAccessors1"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~getLocale"
"testAtan","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAtan"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.analysis.solvers{BracketingNthOrderBrentSolverTest.java[BracketingNthOrderBrentSolverTest[TestFunction~value~D"
"testAccessors2","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testAccessors2"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testConstructorSingleFormat"
"testAtanI","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAtanI"
"x",\N
"testDefaultFormatComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testDefaultFormatComplex"
"testAccessors3","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testAccessors3"
"testAtanInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAtanInf"
"FrenchComplexFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{FrenchComplexFormatTest.java[FrenchComplexFormatTest"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{FrenchComplexFormatTest.java[FrenchComplexFormatTest~getDecimalCharacter"
"testDifferentImaginaryChar","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testDifferentImaginaryChar"
"testAddQuaternionQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testAddQuaternionQuaternion"
"testAtanNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testAtanNaN"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{FrenchComplexFormatTest.java[FrenchComplexFormatTest~getLocale"
"testForgottenImaginaryCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testForgottenImaginaryCharacter"
"testConjugate","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testConjugate"
"testConjugate","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testConjugate"
"RootsOfUnityTest","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest"
"testFormatNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testFormatNumber"
"testConjugateInfiinite","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testConjugateInfiinite"
"testDotProductQuaternionQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testDotProductQuaternionQuaternion"
"testComputeRoots","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testComputeRoots"
"testGetImaginaryFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testGetImaginaryFormat"
"testGetInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testGetInverse"
"testConjugateNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testConjugateNaN"
"testGetNumberOfRoots","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testGetNumberOfRoots"
"testGetRealFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testGetRealFormat"
"testIsPureQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testIsPureQuaternion"
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testConstructor"
"testMathIllegalState1","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testMathIllegalState1"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testNan"
"testIsUnitQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testIsUnitQuaternion"
"testConstructorNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testConstructorNaN"
"testMathIllegalState2","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testMathIllegalState2"
"testCos","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCos"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testNorm"
"testNegativeBoth","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testNegativeBoth"
"testMathIllegalState3","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testMathIllegalState3"
"testCosInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCosInf"
"testNormalize","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testNormalize"
"testNegativeImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testNegativeImaginary"
"testZeroNumberOfRoots","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{RootsOfUnityTest.java[RootsOfUnityTest~testZeroNumberOfRoots"
"testCosNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCosNaN"
"testNormalizeFail","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testNormalizeFail"
"testNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testNegativeInfinity"
"testCosh","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCosh"
"BracketingNthOrderBrentSolverDFPTest","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest"
"testNegativeReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testNegativeReal"
"testObjectEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testObjectEquals"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest~setUp"
"testCoshInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCoshInf"
"testParseDifferentImaginaryChar","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseDifferentImaginaryChar"
"testPolarForm","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testPolarForm"
"testConstructorOK","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest~testConstructorOK"
"testCoshNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testCoshNaN"
"testProductQuaternionQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testProductQuaternionQuaternion"
"testParseNan","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseNan"
"testConvergenceOnFunctionAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest~testConvergenceOnFunctionAccuracy"
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivide"
"testProductQuaternionVector","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testProductQuaternionVector"
"testParseNegativeBoth","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseNegativeBoth"
"testInsufficientOrder3","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest~testInsufficientOrder3"
"testDivideImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideImaginary"
"testQuaternionEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testQuaternionEquals"
"testParseNegativeImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseNegativeImaginary"
"testNeta","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{BracketingNthOrderBrentSolverDFPTest.java[BracketingNthOrderBrentSolverDFPTest~testNeta"
"testDivideInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideInf"
"testQuaternionEquals2","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testQuaternionEquals2"
"testParseNegativeReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseNegativeReal"
"Decimal10","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{Decimal10.java[Decimal10"
"testDivideNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideNaN"
"testParsePositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParsePositiveInfinity"
"testScalarMultiplyDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testScalarMultiplyDouble"
"getDecimalDigits","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{Decimal10.java[Decimal10~getDecimalDigits"
"testDivideNaNInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideNaNInf"
"testSubtractQuaternionQuaternion","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testSubtractQuaternionQuaternion"
"testParseSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseSimpleNoDecimals"
"DfpTest","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest"
"testDivideReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideReal"
"testParseSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseSimpleWithDecimals"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testToString"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~setUp"
"testDivideZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideZero"
"testParseSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseSimpleWithDecimalsTrunc"
"testWrongDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{QuaternionTest.java[QuaternionTest~testWrongDimension"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~tearDown"
"testDivideZeroZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testDivideZeroZero"
"testParseZeroImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseZeroImaginary"
"DfpMathTest","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpMathTest.java[DfpMathTest"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testAdd"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpMathTest.java[DfpMathTest~setUp"
"testEqualsClass","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsClass"
"testParseZeroReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testParseZeroReal"
"testByteConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testByteConstructor"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpMathTest.java[DfpMathTest~tearDown"
"testEqualsImaginaryDifference","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsImaginaryDifference"
"testPaseNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testPaseNegativeInfinity"
"testCeil","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testCeil"
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpMathTest.java[DfpMathTest~testPow"
"testEqualsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsNaN"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testPositiveInfinity"
"testCompare","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testCompare"
"testSin","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpMathTest.java[DfpMathTest~testSin"
"testEqualsNull","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsNull"
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testSimpleNoDecimals"
"testCopySign","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testCopySign"
"DfpDecTest","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest"
"testEqualsRealDifference","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsRealDifference"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testSimpleWithDecimals"
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testDivide"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest~setUp"
"testEqualsSame","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsSame"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testSimpleWithDecimalsTrunc"
"testDivideInt","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testDivideInt"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest~tearDown"
"testEqualsTrue","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testEqualsTrue"
"testTrimOneImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testTrimOneImaginary"
"testEqualsHashcodeContract","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testEqualsHashcodeContract"
"testNextAfter","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest~testNextAfter"
"testExp","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExp"
"testZeroImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testZeroImaginary"
"testFloor","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testFloor"
"testRound","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest~testRound"
"testExpInf1","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf1"
"testZeroReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexFormatAbstractTest.java[ComplexFormatAbstractTest~testZeroReal"
"testIntConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testIntConstructor"
"testRoundDecimal10","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpDecTest.java[DfpDecTest~testRoundDecimal10"
"testExpInf2","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf2"
"BetaDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest"
"testIntValue","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testIntValue"
"NakagamiDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest"
"testCumulative","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest~testCumulative"
"testExpInf3","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf3"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest~makeCumulativeTestPoints"
"testIsZero","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testIsZero"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest~testDensity"
"testExpInf4","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf4"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest~makeCumulativeTestValues"
"testIssue567","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testIssue567"
"testGoodnessOfFit","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest~testGoodnessOfFit"
"testExpInf5","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf5"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest~makeDensityTestValues"
"testLog10","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testLog10"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest~testMoments"
"testExpInf6","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf6"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest~testParameters"
"testLog10K","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testLog10K"
"testMomentsSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest~testMomentsSampling"
"testExpInf7","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf7"
"testSupport","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NakagamiDistributionTest.java[NakagamiDistributionTest~testSupport"
"testLongConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testLongConstructor"
"alphaBetas","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest^alphaBetas"
"testExpInf8","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpInf8"
"ZipfDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testMultiply"
"epsilon","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BetaDistributionTest.java[BetaDistributionTest^epsilon"
"ZipfDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~ZipfDistributionTest"
"testExpNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testExpNaN"
"testNextAfter","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testNextAfter"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeCumulativeTestPoints"
"AbstractIntegerDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest"
"testFloatingPointEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEquals"
"testPower10","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testPower10"
"testCumulativeProbabilitiesRangeArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest~testCumulativeProbabilitiesRangeArguments"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeCumulativeTestValues"
"testFloatingPointEqualsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsNaN"
"testPower10K","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testPower10K"
"testCumulativeProbabilitiesSingleArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest~testCumulativeProbabilitiesSingleArguments"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeDensityTestPoints"
"testFloatingPointEqualsPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsPrecondition1"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testReciprocal"
"testInverseCumulativeProbabilityMethod","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest~testInverseCumulativeProbabilityMethod"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeDensityTestValues"
"testFloatingPointEqualsPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsPrecondition2"
"testRemainder","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testRemainder"
"diceDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest^diceDistribution"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeInverseCumulativeTestPoints"
"testFloatingPointEqualsWithAllowedDelta","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsWithAllowedDelta"
"testRint","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testRint"
"p","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest^p"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeInverseCumulativeTestValues"
"testFloatingPointEqualsWithAllowedDeltaNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsWithAllowedDeltaNaN"
"testRound","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testRound"
"DiceDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~makeLogDensityTestValues"
"testFloatingPointEqualsWithRelativeTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsWithRelativeTolerance"
"DiceDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~DiceDistribution"
"testSignPredicates","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testSignPredicates"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testMoments"
"testFloatingPointEqualsWithRelativeToleranceNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testFloatingPointEqualsWithRelativeToleranceNaN"
"cumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~cumulativeProbability~I"
"testSpecialConstructors","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testSpecialConstructors"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testPreconditions1"
"testGetArgument","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testGetArgument"
"x",\N
"testSqrt","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testSqrt"
"getNumericalMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~getNumericalMean"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testPreconditions2"
"testGetArgumentInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testGetArgumentInf"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.dfp{DfpTest.java[DfpTest~testToString"
"getNumericalVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~getNumericalVariance"
"testSamplerHelper1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testSamplerHelper1"
"testGetArgumentNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testGetArgumentNaN"
"ChiSquaredDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest"
"getSupportLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~getSupportLowerBound"
"testSamplerHelper1Minus1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testSamplerHelper1Minus1"
"testHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testHashCode"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~makeCumulativeTestPoints"
"getSupportUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~getSupportUpperBound"
"testSamplerHelper2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testSamplerHelper2"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~makeCumulativeTestValues"
"testLog","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testLog"
"isSupportConnected","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~isSupportConnected"
"testSamplerPerformance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testSamplerPerformance"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~makeDensityTestValues"
"testLogInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testLogInf"
"testSamplingExtended","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ZipfDistributionTest.java[ZipfDistributionTest~testSamplingExtended"
"probability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution~probability~I"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~makeInverseCumulativeTestPoints"
"testLogNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testLogNaN"
"x",\N
"CauchyDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest"
"testLogZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testLogZero"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~makeInverseCumulativeTestValues"
"serialVersionUID","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractIntegerDistributionTest.java[AbstractIntegerDistributionTest[DiceDistribution^serialVersionUID"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~makeCumulativeTestPoints"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~setUp"
"testMath221","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testMath221"
"UniformIntegerDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~makeCumulativeTestValues"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~testDensity"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testMultiply"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeCumulativeTestPoints"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~makeDensityTestValues"
"testDfAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~testDfAccessors"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~setUp"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeCumulativeTestValues"
"testMultiplyInfInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testMultiplyInfInf"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~testMoments"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~testInverseCumulativeProbabilityExtremes"
"testMultiplyNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testMultiplyNaN"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeDensityTestPoints"
"testSmallDf","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ChiSquaredDistributionTest.java[ChiSquaredDistributionTest~testSmallDf"
"testMultiplyNaNInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testMultiplyNaNInf"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeDensityTestValues"
"testMedian","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~testMedian"
"NormalDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeInverseCumulativeTestPoints"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~testMoments"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNegate"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~makeCumulativeTestPoints"
"testNegateNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNegateNaN"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~makeInverseCumulativeTestValues"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~testPreconditions"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~makeCumulativeTestValues"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~setUp"
"testNthRoot_cornercase_NAN_Inf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNthRoot_cornercase_NAN_Inf"
"testScale","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest~testScale"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~makeDensityTestValues"
"testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty"
"defaultTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{CauchyDistributionTest.java[CauchyDistributionTest^defaultTolerance"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~testMoments"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~setUp"
"testNthRoot_cornercase_thirdRoot_realPartZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNthRoot_cornercase_thirdRoot_realPartZero"
"testPreconditionUpperBoundInclusive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformIntegerDistributionTest.java[UniformIntegerDistributionTest~testPreconditionUpperBoundInclusive"
"testCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testCumulativeProbability"
"RealDistributionAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest"
"getCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getCumulativeTestPoints"
"testNthRoot_normal_fourthRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNthRoot_normal_fourthRoot"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testDensity"
"MultivariateNormalDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest"
"getCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getCumulativeTestValues"
"testDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest~testDensities"
"testNthRoot_normal_thirdRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testNthRoot_normal_thirdRoot"
"testExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testExtremeValues"
"getDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getDensityTestValues"
"testGetCovarianceMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest~testGetCovarianceMatrix"
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testPow"
"testGetMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testGetMean"
"getInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getInverseCumulativeTestPoints"
"testGetMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest~testGetMean"
"testPowInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testPowInf"
"testGetStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testGetStandardDeviation"
"getInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getInverseCumulativeTestValues"
"testSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest~testSampling"
"testPowNaNBase","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testPowNaNBase"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testInverseCumulativeProbabilityExtremes"
"testUnivariateDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalDistributionTest.java[MultivariateNormalDistributionTest~testUnivariateDistribution"
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~getTolerance"
"testPowNaNExponent","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testPowNaNExponent"
"testMath280","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testMath280"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeCumulativeTestPoints"
"EnumeratedRealDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest"
"testPowZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testPowZero"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testMoments"
"EnumeratedRealDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~EnumeratedRealDistributionTest"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeCumulativeTestValues"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocal"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testPreconditions"
"testCreateFromDoubles","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testCreateFromDoubles"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeDensityTestValues"
"testReciprocalImaginary","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocalImaginary"
"testQuantiles","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest~testQuantiles"
"testCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testCumulativeProbability"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeInverseCumulativeTestPoints"
"testReciprocalInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocalInf"
"defaultTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{NormalDistributionTest.java[NormalDistributionTest^defaultTolerance"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testDensity"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeInverseCumulativeTestValues"
"testReciprocalNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocalNaN"
"TriangularDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest"
"testExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testExceptions"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~makeLogDensityTestValues"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~makeCumulativeTestPoints"
"testReciprocalReal","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocalReal"
"testGetNumericalMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testGetNumericalMean"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~makeCumulativeTestValues"
"setCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setCumulativeTestPoints~\\[D"
"testReciprocalZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testReciprocalZero"
"testGetNumericalVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testGetNumericalVariance"
"cumulativeTestPoints",\N
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~makeDensityTestValues"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarAdd"
"testGetSupportLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testGetSupportLowerBound"
"setCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setCumulativeTestValues~\\[D"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~makeInverseCumulativeTestPoints"
"testScalarAddInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarAddInf"
"cumulativeTestValues",\N
"testGetSupportUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testGetSupportUpperBound"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~makeInverseCumulativeTestValues"
"testScalarAddNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarAddNaN"
"setDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setDensityTestValues~\\[D"
"testIsSupportConnected","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testIsSupportConnected"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~setUp"
"testScalarDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarDivide"
"densityTestValues",\N
"testIsSupportLowerBoundInclusive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testIsSupportLowerBoundInclusive"
"setInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setInverseCumulativeTestPoints~\\[D"
"testGetLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testGetLowerBound"
"testScalarDivideInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarDivideInf"
"testIsSupportUpperBoundInclusive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testIsSupportUpperBoundInclusive"
"inverseCumulativeTestPoints",\N
"testGetUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testGetUpperBound"
"testScalarDivideNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarDivideNaN"
"testIssue1065","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testIssue1065"
"setInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setInverseCumulativeTestValues~\\[D"
"testMeanVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testMeanVariance"
"testScalarDivideZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarDivideZero"
"inverseCumulativeTestValues",\N
"testIssue942","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testIssue942"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testPreconditions1"
"testScalarMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarMultiply"
"setTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setTolerance~D"
"testProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testProbability"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testPreconditions2"
"testScalarMultiplyInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarMultiplyInf"
"tolerance",\N
"testSample","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedRealDistributionTest.java[EnumeratedRealDistributionTest~testSample"
"testPreconditions3","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testPreconditions3"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~setUp"
"testScalarMultiplyNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarMultiplyNaN"
"BinomialDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest"
"testPreconditions4","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TriangularDistributionTest.java[TriangularDistributionTest~testPreconditions4"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~tearDown"
"testScalarPow","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarPow"
"BinomialDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~BinomialDistributionTest"
"testConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testConsistency"
"GumbelDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest"
"testScalarPowInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarPowInf"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeCumulativeTestPoints"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest~makeCumulativeTestPoints"
"testCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testCumulativeProbabilities"
"testScalarPowNaNBase","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarPowNaNBase"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeCumulativeTestValues"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest~makeCumulativeTestValues"
"testDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testDensities"
"testScalarPowNaNExponent","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarPowNaNExponent"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeDensityTestPoints"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest~makeDensityTestValues"
"testDensityIntegrals","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testDensityIntegrals"
"testScalarPowZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarPowZero"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeDensityTestValues"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest~testParameters"
"testDistributionClone","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testDistributionClone"
"testScalarSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarSubtract"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeInverseCumulativeTestPoints"
"testSupport","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GumbelDistributionTest.java[GumbelDistributionTest~testSupport"
"testIllegalArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testIllegalArguments"
"testScalarSubtractInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarSubtractInf"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~makeInverseCumulativeTestValues"
"ConstantRealDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest"
"testInverseCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testInverseCumulativeProbabilities"
"testScalarSubtractNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testScalarSubtractNaN"
"testDegenerate0","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~testDegenerate0"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~makeCumulativeTestPoints"
"testIsSupportLowerBoundInclusive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testIsSupportLowerBoundInclusive"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSerial"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~makeCumulativeTestValues"
"testDegenerate1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~testDegenerate1"
"testIsSupportUpperBoundInclusive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testIsSupportUpperBoundInclusive"
"testSin","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSin"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~makeDensityTestValues"
"testDegenerate2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~testDegenerate2"
"testLogDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testLogDensities"
"testSinInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSinInf"
"testMath718","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~testMath718"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~setUp"
"testSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~testSampling"
"testSinNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSinNaN"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{BinomialDistributionTest.java[BinomialDistributionTest~testMoments"
"testInverseCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~testInverseCumulativeProbabilities"
"verifyCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~verifyCumulativeProbabilities"
"testSinh","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSinh"
"testMeanVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~testMeanVariance"
"IntegerDistributionAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest"
"verifyDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~verifyDensities"
"testSinhInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSinhInf"
"getCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getCumulativeTestPoints"
"testSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ConstantRealDistributionTest.java[ConstantRealDistributionTest~testSampling"
"verifyInverseCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~verifyInverseCumulativeProbabilities"
"getCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getCumulativeTestValues"
"testSinhNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSinhNaN"
"LevyDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest"
"verifyLogDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{RealDistributionAbstractTest.java[RealDistributionAbstractTest~verifyLogDensities"
"getDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getDensityTestPoints"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~makeCumulativeTestPoints"
"testSqrt1z","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrt1z"
"AbstractRealDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractRealDistributionTest.java[AbstractRealDistributionTest"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~makeCumulativeTestValues"
"getDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getDensityTestValues"
"testSqrt1zNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrt1zNaN"
"testContinuous","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractRealDistributionTest.java[AbstractRealDistributionTest~testContinuous"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~makeDensityTestValues"
"getInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getInverseCumulativeTestPoints"
"testSqrtImaginaryNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtImaginaryNegative"
"testDiscontinuous","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{AbstractRealDistributionTest.java[AbstractRealDistributionTest~testDiscontinuous"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~makeLogDensityTestValues"
"getInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getInverseCumulativeTestValues"
"testSqrtImaginaryZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtImaginaryZero"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~testParameters"
"GammaDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest"
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~getTolerance"
"testSqrtInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtInf"
"density","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~density~D~D~D"
"testSupport","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LevyDistributionTest.java[LevyDistributionTest~testSupport"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeCumulativeTestPoints"
"testSqrtNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtNaN"
"x",\N
"GeometricDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeCumulativeTestValues"
"testSqrtPolar","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtPolar"
"shape",\N
"GeometricDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~GeometricDistributionTest"
"scale",\N
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeDensityTestPoints"
"testSqrtRealNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtRealNegative"
"logGamma","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~logGamma~D"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeCumulativeTestPoints"
"testSqrtRealPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtRealPositive"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeDensityTestValues"
"x",\N
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeCumulativeTestValues"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeInverseCumulativeTestPoints"
"testSqrtRealZero","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSqrtRealZero"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~makeCumulativeTestPoints"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeDensityTestPoints"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSubtract"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeInverseCumulativeTestValues"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~makeCumulativeTestValues"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeDensityTestValues"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~makeLogDensityTestValues"
"testSubtractInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSubtractInf"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~makeDensityTestValues"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeInverseCumulativeTestPoints"
"setCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setCumulativeTestPoints~\\[I"
"testSubtractNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testSubtractNaN"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~setUp"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeInverseCumulativeTestValues"
"cumulativeTestPoints",\N
"testTan","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTan"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testDensity"
"setCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setCumulativeTestValues~\\[D"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~makeLogDensityTestValues"
"testTanCritical","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanCritical"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testInverseCumulativeProbabilityExtremes"
"cumulativeTestValues",\N
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GeometricDistributionTest.java[GeometricDistributionTest~testMoments"
"testTanInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanInf"
"testMath753Shape1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape1"
"setDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setDensityTestPoints~\\[I"
"TDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest"
"testTanNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanNaN"
"testMath753Shape10","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape10"
"densityTestPoints",\N
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~makeCumulativeTestPoints"
"setDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setDensityTestValues~\\[D"
"testTanh","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanh"
"testMath753Shape100","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape100"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~makeCumulativeTestValues"
"densityTestValues",\N
"testTanhCritical","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanhCritical"
"testMath753Shape1000","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape1000"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~makeDensityTestValues"
"setInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setInverseCumulativeTestPoints~\\[D"
"testTanhInf","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanhInf"
"testMath753Shape142","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape142"
"nistData","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~nistData"
"inverseCumulativeTestPoints",\N
"testTanhNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testTanhNaN"
"testMath753Shape8","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMath753Shape8"
"setInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setInverseCumulativeTestValues~\\[I"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~setUp"
"testpowNull","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest~testpowNull"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testMoments"
"inverseCumulativeTestValues",\N
"testCumulativeProbabilityAgainstStackOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testCumulativeProbabilityAgainstStackOverflow"
"setTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setTolerance~D"
"TestComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest[TestComplex"
"testParameterAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testParameterAccessors"
"testCumulativeProbablilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testCumulativeProbablilityExtremes"
"TestComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest[TestComplex~TestComplex~D~D"
"tolerance",\N
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testPreconditions"
"testDfAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testDfAccessors"
"real",\N
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~setUp"
"testProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testProbabilities"
"imaginary",\N
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testInverseCumulativeProbabilityExtremes"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~tearDown"
"createComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.complex{ComplexTest.java[ComplexTest[TestComplex~createComplex~D~D"
"testValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{GammaDistributionTest.java[GammaDistributionTest~testValues"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testMoments"
"testConsistencyAtSupportBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testConsistencyAtSupportBounds"
"real",\N
"KolmogorovSmirnovDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{KolmogorovSmirnovDistributionTest.java[KolmogorovSmirnovDistributionTest"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testPreconditions"
"imaginary",\N
"testCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testCumulativeProbabilities"
"testCumulativeDensityFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{KolmogorovSmirnovDistributionTest.java[KolmogorovSmirnovDistributionTest~testCumulativeDensityFunction"
"FDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest"
"testSmallDf","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{TDistributionTest.java[TDistributionTest~testSmallDf"
"testDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testDensities"
"WeibullDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~makeCumulativeTestPoints"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~makeCumulativeTestPoints"
"MultivariateNormalMixtureModelDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest"
"testIllegalArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testIllegalArguments"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~makeCumulativeTestValues"
"testDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest~testDensities"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~makeCumulativeTestValues"
"testInverseCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testInverseCumulativeProbabilities"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~makeDensityTestValues"
"testNonUnitWeightSum","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest~testNonUnitWeightSum"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~makeDensityTestValues"
"testLogDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testLogDensities"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~setUp"
"testPreconditionPositiveWeights","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest~testPreconditionPositiveWeights"
"testAlpha","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~testAlpha"
"testSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~testSampling"
"testCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testCumulativeProbabilityExtremes"
"testSampling","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest~testSampling"
"testBeta","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~testBeta"
"verifyCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~verifyCumulativeProbabilities"
"testDfAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testDfAccessors"
"testWeightSumOverFlow","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistributionTest~testWeightSumOverFlow"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~testInverseCumulativeProbabilityExtremes"
"verifyDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~verifyDensities"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testInverseCumulativeProbabilityExtremes"
"MultivariateNormalMixtureModelDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{MultivariateNormalMixtureModelDistributionTest.java[MultivariateNormalMixtureModelDistribution"
"testInverseCumulativeProbabilitySmallPAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~testInverseCumulativeProbabilitySmallPAccuracy"
"verifyInverseCumulativeProbabilities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~verifyInverseCumulativeProbabilities"
"HypergeometricDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest"
"testLargeDegreesOfFreedom","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testLargeDegreesOfFreedom"
"HypergeometricDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~HypergeometricDistributionTest"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{WeibullDistributionTest.java[WeibullDistributionTest~testMoments"
"verifyLogDensities","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{IntegerDistributionAbstractTest.java[IntegerDistributionAbstractTest~verifyLogDensities"
"testMath785","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testMath785"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeCumulativeTestPoints"
"UniformRealDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest"
"LaplaceDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testMoments"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~makeCumulativeTestPoints"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest~makeCumulativeTestPoints"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeCumulativeTestValues"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testPreconditions"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~makeCumulativeTestValues"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest~makeCumulativeTestValues"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeDensityTestPoints"
"testSmallDegreesOfFreedom","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{FDistributionTest.java[FDistributionTest~testSmallDegreesOfFreedom"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~makeDensityTestValues"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest~makeDensityTestValues"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeDensityTestValues"
"LogNormalDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~setUp"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest~testParameters"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeInverseCumulativeTestPoints"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~makeCumulativeTestPoints"
"testGetLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testGetLowerBound"
"testSupport","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LaplaceDistributionTest.java[LaplaceDistributionTest~testSupport"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeInverseCumulativeTestValues"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~makeCumulativeTestValues"
"testGetUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testGetUpperBound"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~makeLogDensityTestValues"
"ParetoDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~makeDensityTestValues"
"testInverseCumulativeDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testInverseCumulativeDistribution"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~makeCumulativeTestPoints"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testAccessors"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~makeInverseCumulativeTestPoints"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~makeCumulativeTestValues"
"testMeanVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testMeanVariance"
"testDegenerateFullSample","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testDegenerateFullSample"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~makeInverseCumulativeTestValues"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testPreconditions1"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~makeDensityTestValues"
"testDegenerateNoFailures","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testDegenerateNoFailures"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~setUp"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~makeInverseCumulativeTestPoints"
"testPreconditions2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{UniformRealDistributionTest.java[UniformRealDistributionTest~testPreconditions2"
"testDegenerateNoSuccesses","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testDegenerateNoSuccesses"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testDensity"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~makeInverseCumulativeTestValues"
"LogisticsDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest"
"testLargeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testLargeValues"
"testExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testExtremeValues"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest~makeCumulativeTestPoints"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~setUp"
"testMath1021","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testMath1021"
"testGetScale","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testGetScale"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest~makeCumulativeTestValues"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testDensity"
"testMath644","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testMath644"
"testGetShape","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testGetShape"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest~makeDensityTestValues"
"testExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testExtremeValues"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testMoments"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testInverseCumulativeProbabilityExtremes"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest~testParameters"
"testGetScale","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testGetScale"
"testMeanVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testMeanVariance"
"testMoreLargeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testMoreLargeValues"
"testSupport","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogisticsDistributionTest.java[LogisticsDistributionTest~testSupport"
"testGetShape","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testGetShape"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testPreconditions"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{HypergeometricDistributionTest.java[HypergeometricDistributionTest~testPreconditions"
"ExponentialDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testInverseCumulativeProbabilityExtremes"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~makeCumulativeTestPoints"
"testQuantiles","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testQuantiles"
"EnumeratedIntegerDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest"
"EnumeratedIntegerDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~EnumeratedIntegerDistributionTest"
"testMeanVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testMeanVariance"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~makeCumulativeTestValues"
"testTinyVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{LogNormalDistributionTest.java[LogNormalDistributionTest~testTinyVariance"
"testCreateFromIntegers","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testCreateFromIntegers"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testPreconditions"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~makeDensityTestValues"
"PoissonDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest"
"testCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testCumulativeProbability"
"testQuantiles","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ParetoDistributionTest.java[ParetoDistributionTest~testQuantiles"
"PoissonDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~PoissonDistributionTest"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~setUp"
"testExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testExceptions"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeCumulativeTestPoints"
"testCumulativeProbability2","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testCumulativeProbability2"
"PascalDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest"
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeCumulativeTestPoints"
"testGetNumericalMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testGetNumericalMean"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeCumulativeTestValues"
"testCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testCumulativeProbabilityExtremes"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeCumulativeTestValues"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeDensityTestPoints"
"testGetNumericalVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testGetNumericalVariance"
"testDensity","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testDensity"
"makeDensityTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeDensityTestPoints"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeDensityTestValues"
"testGetSupportLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testGetSupportLowerBound"
"testInverseCumulativeProbabilityExtremes","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testInverseCumulativeProbabilityExtremes"
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeDensityTestValues"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeInverseCumulativeTestPoints"
"testGetSupportUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testGetSupportUpperBound"
"testMeanAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testMeanAccessors"
"makeInverseCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeInverseCumulativeTestPoints"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeInverseCumulativeTestValues"
"testIsSupportConnected","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testIsSupportConnected"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testMoments"
"makeInverseCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~makeInverseCumulativeTestValues"
"testProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testProbability"
"makeLogDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~makeLogDensityTestValues"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{ExponentialDistributionTest.java[ExponentialDistributionTest~testPreconditions"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~setUp"
"testCumulativeProbabilitySpecial","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testCumulativeProbabilitySpecial"
"testSample","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{EnumeratedIntegerDistributionTest.java[EnumeratedIntegerDistributionTest~testSample"
"MultivariateNormalMixtureExpectationMaximizationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest"
"testDegenerate0","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~testDegenerate0"
"testDegenerateInverseCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testDegenerateInverseCumulativeProbability"
"testConvergenceException","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testConvergenceException"
"OutOfRangeExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{OutOfRangeExceptionTest.java[OutOfRangeExceptionTest"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{OutOfRangeExceptionTest.java[OutOfRangeExceptionTest~testAccessors"
"testDegenerate1","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~testDegenerate1"
"testFit","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testFit"
"testLargeMeanCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testLargeMeanCumulativeProbability"
"NumberIsTooLargeExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NumberIsTooLargeExceptionTest.java[NumberIsTooLargeExceptionTest"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest~testMoments"
"testLargeMeanInverseCumulativeProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testLargeMeanInverseCumulativeProbability"
"testIncompatibleIntialMixture","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testIncompatibleIntialMixture"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NumberIsTooLargeExceptionTest.java[NumberIsTooLargeExceptionTest~testAccessors"
"defaultTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PascalDistributionTest.java[PascalDistributionTest^defaultTolerance"
"testMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testMean"
"testInitialMixture","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testInitialMixture"
"NumberIsTooSmallExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NumberIsTooSmallExceptionTest.java[NumberIsTooSmallExceptionTest"
"MaxCountExceededExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{MaxCountExceededExceptionTest.java[MaxCountExceededExceptionTest"
"testMaxIterationsPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testMaxIterationsPositive"
"testMoments","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testMoments"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NumberIsTooSmallExceptionTest.java[NumberIsTooSmallExceptionTest~testAccessors"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{MaxCountExceededExceptionTest.java[MaxCountExceededExceptionTest~testAccessors"
"testMultipleColumnsRequired","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testMultipleColumnsRequired"
"testNegativeMean","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testNegativeMean"
"NotStrictlyPositiveExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NotStrictlyPositiveExceptionTest.java[NotStrictlyPositiveExceptionTest"
"TooManyEvaluationsExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{TooManyEvaluationsExceptionTest.java[TooManyEvaluationsExceptionTest"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NotStrictlyPositiveExceptionTest.java[NotStrictlyPositiveExceptionTest~testAccessors"
"testNonEmptyData","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testNonEmptyData"
"testNormalApproximateProbability","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution{PoissonDistributionTest.java[PoissonDistributionTest~testNormalApproximateProbability"
"testMessage","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{TooManyEvaluationsExceptionTest.java[TooManyEvaluationsExceptionTest~testMessage"
"DimensionMismatchExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{DimensionMismatchExceptionTest.java[DimensionMismatchExceptionTest"
"testNonJaggedData","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testNonJaggedData"
"NotPositiveExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NotPositiveExceptionTest.java[NotPositiveExceptionTest"
"NonMonotonicSequenceExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NonMonotonicSequenceExceptionTest.java[NonMonotonicSequenceExceptionTest"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{DimensionMismatchExceptionTest.java[DimensionMismatchExceptionTest~testAccessors"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NotPositiveExceptionTest.java[NotPositiveExceptionTest~testAccessors"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.exception{NonMonotonicSequenceExceptionTest.java[NonMonotonicSequenceExceptionTest~testAccessors"
"testThresholdPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.distribution.fitting{MultivariateNormalMixtureExpectationMaximizationTest.java[MultivariateNormalMixtureExpectationMaximizationTest~testThresholdPositive"
"ExceptionContextTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest"
"ArgUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ArgUtilsTest.java[ArgUtilsTest"
"LocalizedFormatsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest"
"KalmanFilterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest"
"testContext","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest~testContext"
"testAllKeysPresentInPropertiesFiles","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testAllKeysPresentInPropertiesFiles"
"testFlatten","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ArgUtilsTest.java[ArgUtilsTest~testFlatten"
"testCannonball","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest~testCannonball"
"testMessageChain","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest~testMessageChain"
"testAllPropertiesCorrespondToKeys","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testAllPropertiesCorrespondToKeys"
"HarmonicFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest~testConstant"
"testNoArgAddMessage","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest~testNoArgAddMessage"
"test1PercentError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~test1PercentError"
"testMessageNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testMessageNumber"
"testConstantAcceleration","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest~testConstantAcceleration"
"testSerialize","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest~testSerialize"
"testInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testInitialGuess"
"testNoMissingFrenchTranslation","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testNoMissingFrenchTranslation"
"testTransitionControlMatrixMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest~testTransitionControlMatrixMismatch"
"testMath844","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testMath844"
"testSerializeUnserializable","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest~testSerializeUnserializable"
"testNoOpEnglishTranslation","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testNoOpEnglishTranslation"
"testTransitionMeasurementMatrixMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest~testTransitionMeasurementMatrixMismatch"
"Unserializable","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest[Unserializable"
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testNoError"
"testVariablePartsConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{LocalizedFormatsTest.java[LocalizedFormatsTest~testVariablePartsConsistency"
"Cannonball","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball"
"Unserializable","=mathmain3.6/src<test.java.org.apache.commons.math3.exception.util{ExceptionContextTest.java[ExceptionContextTest[Unserializable~Unserializable"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testPreconditions1"
"Cannonball","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~Cannonball~D~D~D"
"HarmonicCurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest"
"GaussianCurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest"
"testTinyVariationsData","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testTinyVariationsData"
"timeslice",\N
"test1PercentError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~test1PercentError"
"testFit01","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit01"
"angle",\N
"testUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testUnsorted"
"testInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testInitialGuess"
"initialVelocity",\N
"testFit02","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit02"
"CurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest"
"getX","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~getX"
"testMath844","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testMath844"
"testFit03","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit03"
"testMath303","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest~testMath303"
"getXVelocity","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~getXVelocity"
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testNoError"
"testFit04","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit04"
"testMath304","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest~testMath304"
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testPreconditions1"
"getY","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~getY"
"testFit05","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit05"
"testMath372","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest~testMath372"
"testTinyVariationsData","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testTinyVariationsData"
"getYVelocity","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~getYVelocity"
"testFit06","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit06"
"SimpleInverseFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction"
"step","=mathmain3.6/src<test.java.org.apache.commons.math3.filter{KalmanFilterTest.java[KalmanFilterTest[Cannonball~step"
"testUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{HarmonicCurveFitterTest.java[HarmonicCurveFitterTest~testUnsorted"
"gradient","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction~gradient~D~\\[D"
"testFit07","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testFit07"
"x",\N
"SimpleCurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{SimpleCurveFitterTest.java[SimpleCurveFitterTest"
"PolynomialCurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest"
"testMath519","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testMath519"
"doubles",\N
"testPolynomialFit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{SimpleCurveFitterTest.java[SimpleCurveFitterTest~testPolynomialFit"
"testFit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest~testFit"
"testMath798","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testMath798"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction~value~D~\\[D"
"testLargeSample","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest~testLargeSample"
"GaussianFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest"
"testWithMaxIterations1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testWithMaxIterations1"
"x",\N
"testFit01","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit01"
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest~testNoError"
"parameters",\N
"testWithMaxIterations2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testWithMaxIterations2"
"testFit02","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit02"
"testRedundantSolvable","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest~testRedundantSolvable"
"PolynomialFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest"
"testWithStartPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest~testWithStartPoint"
"testFit03","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit03"
"testFit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testFit"
"testSmallError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialCurveFitterTest.java[PolynomialCurveFitterTest~testSmallError"
"DATASET1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest^DATASET1"
"testFit04","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit04"
"testLargeSample","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testLargeSample"
"WeightedObservedPointsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest"
"DATASET2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest^DATASET2"
"testFit05","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit05"
"testAdd1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest~testAdd1"
"testMath798","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798"
"DATASET3","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest^DATASET3"
"testFit06","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit06"
"testAdd2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest~testAdd2"
"testMath798WithToleranceTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798WithToleranceTooLow"
"DATASET4","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest^DATASET4"
"testAdd3","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest~testAdd3"
"testFit07","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit07"
"testMath798WithToleranceTooLowButNoException","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798WithToleranceTooLowButNoException"
"DATASET5","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianCurveFitterTest.java[GaussianCurveFitterTest^DATASET5"
"testMath519","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testMath519"
"testClear","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest~testClear"
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testNoError"
"GaussNewtonOptimizerWithQRTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest"
"testToListCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{WeightedObservedPointsTest.java[WeightedObservedPointsTest~testToListCopy"
"testMath798","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest~testMath798"
"testRedundantSolvable","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testRedundantSolvable"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest~getMaxIterations"
"DATASET1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET1"
"testRedundantUnsolvable","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testRedundantUnsolvable"
"LevenbergMarquardtOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest~testCircleFittingBadInit"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~getMaxIterations"
"DATASET2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET2"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest~testHahn1"
"testSmallError","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testSmallError"
"testBevington","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testBevington"
"DATASET3","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET3"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest~testMaxEvaluations"
"MinpackTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest"
"testCircleFitting2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testCircleFitting2"
"DATASET4","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET4"
"testMinpackBard","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackBard"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithQRTest.java[GaussNewtonOptimizerWithQRTest~testMoreEstimatedParametersUnsorted"
"testControlParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testControlParameters"
"DATASET5","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET5"
"testMinpackBox3Dimensional","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackBox3Dimensional"
"GaussNewtonOptimizerWithLUTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest"
"testEvaluationCount","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testEvaluationCount"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~getMaxIterations"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem"
"testMinpackBrownAlmostLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackBrownAlmostLinear"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem~CircleProblem~D~D~I"
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testNonInvertible"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~testCircleFittingBadInit"
"testMinpackBrownDennis","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackBrownDennis"
"xError",\N
"testParameterValidator","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testParameterValidator"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~testHahn1"
"testMinpackChebyquad","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackChebyquad"
"yError",\N
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem"
"searchResolution",\N
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~testMaxEvaluations"
"testMinpackFreudensteinRoth","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackFreudensteinRoth"
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~BevingtonProblem"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem~CircleProblem~D~D"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~testMoreEstimatedParametersSimple"
"testMinpackHelicalValley","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackHelicalValley"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~addPoint~D~D"
"xError",\N
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithLUTest.java[GaussNewtonOptimizerWithLUTest~testMoreEstimatedParametersUnsorted"
"testMinpackJennrichSampson","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackJennrichSampson"
"yError",\N
"t",\N
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem~addPoint~D~D"
"EvaluationTestValidation","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTestValidation.java[EvaluationTestValidation"
"c",\N
"testMinpackKowalikOsborne","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackKowalikOsborne"
"testParametersErrorMonteCarloObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTestValidation.java[EvaluationTestValidation~testParametersErrorMonteCarloObservations"
"AbstractLeastSquaresOptimizerAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest"
"px",\N
"testMinpackLinearFullRank","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackLinearFullRank"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~getMaxIterations"
"py",\N
"testParametersErrorMonteCarloParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTestValidation.java[EvaluationTestValidation~testParametersErrorMonteCarloParameters"
"testMinpackLinearRank1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackLinearRank1"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem~target"
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFitting"
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleVectorial.java[CircleVectorial"
"testMinpackLinearRank1ZeroColsAndRows","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackLinearRank1ZeroColsAndRows"
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleProblem.java[CircleProblem~weight"
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleVectorial.java[CircleVectorial~CircleVectorial"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingBadInit"
"testMinpackMeyer","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackMeyer"
"GaussNewtonOptimizerWithCholeskyTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleVectorial.java[CircleVectorial~addPoint~D~D"
"testCircleFittingGoodInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingGoodInit"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~getMaxIterations"
"testMinpackOsborne1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackOsborne1"
"px",\N
"testGetIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testGetIterations"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~testCircleFittingBadInit"
"py",\N
"testMinpackOsborne2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackOsborne2"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testHahn1"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{CircleVectorial.java[CircleVectorial~getN"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~testHahn1"
"testMinpackPowellSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackPowellSingular"
"testIllConditioned","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testIllConditioned"
"EvaluationRmsCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationRmsCheckerTest.java[EvaluationRmsCheckerTest"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~testMaxEvaluations"
"testMinpackRosenbrok","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackRosenbrok"
"testInconsistentEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentEquations"
"testConverged","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationRmsCheckerTest.java[EvaluationRmsCheckerTest~testConverged"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~testMoreEstimatedParametersSimple"
"testMinpackWatson","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest~testMinpackWatson"
"testInconsistentSizes1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes1"
"GaussNewtonOptimizerWithSVDTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithCholeskyTest.java[GaussNewtonOptimizerWithCholeskyTest~testMoreEstimatedParametersUnsorted"
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction"
"getMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~getMaxIterations"
"testInconsistentSizes2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes2"
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~MinpackFunction~I~\\[D~D~\\[D"
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{RandomCirclePointGenerator.java[RandomCirclePointGenerator"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~testCircleFittingBadInit"
"testKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testKirby2"
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{RandomCirclePointGenerator.java[RandomCirclePointGenerator~RandomCirclePointGenerator~D~D~D~D~D~J"
"m",\N
"testGetIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~testGetIterations"
"startParams",\N
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersSimple"
"x",\N
"theoreticalMinCost",\N
"y",\N
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~testHahn1"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersUnsorted"
"theoreticalMinParams",\N
"radius",\N
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~testMaxEvaluations"
"buildArray","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~buildArray~I~D"
"testNoDependency","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNoDependency"
"xSigma",\N
"ySigma",\N
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{GaussNewtonOptimizerWithSVDTest.java[GaussNewtonOptimizerWithSVDTest~testNonInvertible"
"n",\N
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNonInvertible"
"seed",\N
"x",\N
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem"
"testOneSet","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testOneSet"
"checkTheoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~checkTheoreticalMinCost~D"
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset"
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~StraightLineProblem~D"
"testPointCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testPointCopy"
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~StatisticalReferenceDataset~QBufferedReader;"
"rms",\N
"error",\N
"in",\N
"testQRColumnsPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testQRColumnsPermutation"
"checkTheoreticalMinParams","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~checkTheoreticalMinParams~\\[D"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~addPoint~D~D"
"getData","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getData"
"params",\N
"testRedundantEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testRedundantEquations"
"px",\N
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~computeJacobian~\\[D"
"getLeastSquaresProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getLeastSquaresProblem"
"py",\N
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTrivial"
"solve","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~solve"
"variables",\N
"getModelDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getModelDerivatives~D~\\[D"
"testTwoSets","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTwoSets"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~computeValue~\\[D"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~target"
"x",\N
"TOl","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest^TOl"
"a",\N
"variables",\N
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~weight"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem"
"getModelValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getModelValue~D~\\[D"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~getN"
"x","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~x"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"x",\N
"getStartPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~getStartPoint"
"y","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem~y"
"a",\N
"factors",\N
"getTarget","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~getTarget"
"target",\N
"getName","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getName"
"Model","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem[Model"
"getWeight","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~getWeight"
"getTarget","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem~getTarget"
"Model","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem[Model~Model~D~D"
"getNumObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumObservations"
"setCostAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~setCostAccuracy~D"
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator"
"a",\N
"getNumParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumParameters"
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~RandomStraightLinePointGenerator~D~D~D~D~D~J"
"b",\N
"costAccuracy",\N
"getNumStartingPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumStartingPoints"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem[Model~value~D"
"a",\N
"setParamsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction~setParamsAccuracy~D"
"b",\N
"getParameter","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameter~I"
"x",\N
"paramsAccuracy",\N
"sigma",\N
"a","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem[Model^a"
"i",\N
"costAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^costAccuracy"
"lo",\N
"getParameterStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameterStandardDeviation~I"
"b","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StraightLineProblem.java[StraightLineProblem[Model^b"
"hi",\N
"m","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^m"
"i",\N
"seed",\N
"n","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^n"
"EvaluationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest"
"generate","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~generate~I"
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameters"
"testComputeCost","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeCost"
"paramsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^paramsAccuracy"
"n",\N
"getParametersStandardDeviations","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParametersStandardDeviations"
"testComputeCovariance","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeCovariance"
"StatisticalReferenceDatasetFactory","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory"
"startParams","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^startParams"
"getResidualSumOfSquares","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getResidualSumOfSquares"
"createAll","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createAll"
"testComputeRMS","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeRMS"
"theoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinCost"
"getStartingPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getStartingPoint~I"
"createBufferedReaderFromResource","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createBufferedReaderFromResource~QString;"
"testComputeResiduals","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeResiduals"
"theoreticalMinParams","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinParams"
"i",\N
"name",\N
"testComputeSigma","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeSigma"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearFullRankFunction"
"getX","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getX~I"
"createHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createHahn1"
"testComputeValueAndJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testComputeValueAndJacobian"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearFullRankFunction~LinearFullRankFunction~I~I~D~D~D"
"i",\N
"createKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createKirby2"
"getY","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getY~I"
"m",\N
"testDirectEvaluation","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testDirectEvaluation"
"createLanczos1","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createLanczos1"
"n",\N
"i",\N
"testEvaluateCopiesPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testEvaluateCopiesPoint"
"x0",\N
"createMGH17","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createMGH17"
"LeastSquaresProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{StatisticalReferenceDataset.java[StatisticalReferenceDataset[LeastSquaresProblem"
"theoreticalStartCost",\N
"testLazyEvaluation","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testLazyEvaluation"
"BigFractionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest"
"BigFractionFieldTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFieldTest.java[BigFractionFieldTest"
"theoreticalMinCost",\N
"testLazyEvaluationPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{EvaluationTest.java[EvaluationTest~testLazyEvaluationPrecondition"
"testOne","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFieldTest.java[BigFractionFieldTest~testOne"
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testAbs"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearFullRankFunction~computeJacobian~\\[D"
"FractionFieldTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFieldTest.java[FractionFieldTest"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFieldTest.java[BigFractionFieldTest~testSerial"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testAdd"
"variables",\N
"testOne","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFieldTest.java[FractionFieldTest~testOne"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearFullRankFunction~computeValue~\\[D"
"testBigDecimalValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testBigDecimalValue"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFieldTest.java[BigFractionFieldTest~testZero"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFieldTest.java[FractionFieldTest~testSerial"
"variables",\N
"testCompareTo","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testCompareTo"
"FractionFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFieldTest.java[FractionFieldTest~testZero"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~getLocale"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1Function"
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testConstructor"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1Function~LinearRank1Function~I~I~D~D~D"
"testConstructorDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testConstructorDouble"
"BigFractionFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~setUp"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~getLocale"
"m",\N
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testDivide"
"testDenominatorFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testDenominatorFormat"
"n",\N
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~setUp"
"testDoubleValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testDoubleValue"
"testDoubleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testDoubleFormat"
"x0",\N
"testDenominatorFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testDenominatorFormat"
"theoreticalStartCost",\N
"testDoubleValueForLargeNumeratorAndDenominator","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testDoubleValueForLargeNumeratorAndDenominator"
"testFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testFormat"
"theoreticalMinCost",\N
"testDoubleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testDoubleFormat"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testEqualsAndHashCode"
"testFormatImproper","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testFormatImproper"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1Function~computeJacobian~\\[D"
"testFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testFormat"
"testFloatValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testFloatValue"
"testFormatImproperNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testFormatImproperNegative"
"variables",\N
"testFormatImproper","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testFormatImproper"
"testFloatValueForLargeNumeratorAndDenominator","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testFloatValueForLargeNumeratorAndDenominator"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1Function~computeValue~\\[D"
"testFormatNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testFormatNegative"
"testFormatImproperNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testFormatImproperNegative"
"variables",\N
"testGetReducedFraction","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testGetReducedFraction"
"testFormatZero","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testFormatZero"
"testFormatNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testFormatNegative"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction"
"testGoldenRatio","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testGoldenRatio"
"testLongFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testLongFormat"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~LinearRank1ZeroColsAndRowsFunction~I~I~D"
"testFormatZero","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testFormatZero"
"testIntValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testIntValue"
"testNumeratorFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testNumeratorFormat"
"m",\N
"testLongFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testLongFormat"
"n",\N
"testLongValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testLongValue"
"testParse","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParse"
"x0",\N
"testNumeratorFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testNumeratorFormat"
"testMath340","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testMath340"
"testParseInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseInteger"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~computeJacobian~\\[D"
"testParse","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParse"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testMultiply"
"testParseInvalid","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseInvalid"
"variables",\N
"testParseBig","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseBig"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testNegate"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~computeValue~\\[D"
"testParseInvalidDenominator","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseInvalidDenominator"
"testParseInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseInteger"
"variables",\N
"testNegativeValueOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testNegativeValueOverflow"
"testParseNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseNegative"
"testParseInvalid","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseInvalid"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[RosenbrockFunction"
"testPercentage","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testPercentage"
"testParseOne1","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseOne1"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[RosenbrockFunction~RosenbrockFunction~\\[D~D"
"testParseInvalidDenominator","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseInvalidDenominator"
"testPositiveValueOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testPositiveValueOverflow"
"testParseOne2","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseOne2"
"startParams",\N
"testParseNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseNegative"
"theoreticalStartCost",\N
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testPow"
"testParseProper","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseProper"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[RosenbrockFunction~computeJacobian~\\[D"
"testParseProper","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseProper"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testReciprocal"
"testParseProperInvalidMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseProperInvalidMinus"
"variables",\N
"testParseProperInvalidMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseProperInvalidMinus"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionTest.java[BigFractionTest~testSubtract"
"testParseProperNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseProperNegative"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[RosenbrockFunction~computeValue~\\[D"
"testParseProperNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testParseProperNegative"
"FractionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest"
"testParseZero1","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseZero1"
"variables",\N
"testWholeFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{BigFractionFormatTest.java[BigFractionFormatTest~testWholeFormat"
"testAbs","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testAbs"
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[HelicalValleyFunction"
"testParseZero2","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testParseZero2"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testAdd"
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[HelicalValleyFunction~HelicalValleyFunction~\\[D~D"
"RandomKeyTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest"
"testWholeFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionFormatTest.java[FractionFormatTest~testWholeFormat"
"testComparatorPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testComparatorPermutation"
"startParams",\N
"testCompareTo","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testCompareTo"
"BinaryChromosomeTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryChromosomeTest.java[BinaryChromosomeTest"
"theoreticalStartCost",\N
"testConstructor1","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testConstructor1"
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testConstructor"
"testInvalidConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryChromosomeTest.java[BinaryChromosomeTest~testInvalidConstructor"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[HelicalValleyFunction~computeJacobian~\\[D"
"testConstructor2","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testConstructor2"
"testConstructorDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testConstructorDouble"
"testIsSame","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryChromosomeTest.java[BinaryChromosomeTest~testIsSame"
"variables",\N
"testDecode","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testDecode"
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testDivide"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[HelicalValleyFunction~computeValue~\\[D"
"testRandomConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryChromosomeTest.java[BinaryChromosomeTest~testRandomConstructor"
"testEqualRepr","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testEqualRepr"
"variables",\N
"testDoubleValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testDoubleValue"
"DummyListChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome"
"testIdentityPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testIdentityPermutation"
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[PowellSingularFunction"
"DummyListChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome~DummyListChromosome~\\[QInteger;"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testEqualsAndHashCode"
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[PowellSingularFunction~PowellSingularFunction~\\[D~D"
"testInducedPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testInducedPermutation"
"representation",\N
"testFloatValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testFloatValue"
"startParams",\N
"DummyListChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome~DummyListChromosome~QList\\<QInteger;>;"
"testInvalidRepresentation","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testInvalidRepresentation"
"theoreticalStartCost",\N
"testGetReducedFraction","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testGetReducedFraction"
"representation",\N
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[PowellSingularFunction~computeJacobian~\\[D"
"testIsSame","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testIsSame"
"testGoldenRatio","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testGoldenRatio"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome~equals~QObject;"
"variables",\N
"testRandomPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyTest.java[RandomKeyTest~testRandomPermutation"
"testIntValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testIntValue"
"obj",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[PowellSingularFunction~computeValue~\\[D"
"GeneticAlgorithmTestPermutations","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestPermutations.java[GeneticAlgorithmTestPermutations"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome~fitness"
"testIntegerOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testIntegerOverflow"
"variables",\N
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestPermutations.java[GeneticAlgorithmTestPermutations~test"
"hashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyListChromosome.java[DummyListChromosome~hashCode"
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[FreudensteinRothFunction"
"testLongValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testLongValue"
"MinPermutations","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestPermutations.java[GeneticAlgorithmTestPermutations[MinPermutations"
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[FreudensteinRothFunction~FreudensteinRothFunction~\\[D~D~D~\\[D"
"ElitisticListPopulationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest"
"MinPermutations","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestPermutations.java[GeneticAlgorithmTestPermutations[MinPermutations~MinPermutations~QList\\<QDouble;>;"
"testMath1261","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testMath1261"
"startParams",\N
"testChromosomeListConstructorTooHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testChromosomeListConstructorTooHigh"
"representation",\N
"testMath835","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testMath835"
"theoreticalStartCost",\N
"testChromosomeListConstructorTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testChromosomeListConstructorTooLow"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestPermutations.java[GeneticAlgorithmTestPermutations[MinPermutations~fitness"
"theoreticalMinCost",\N
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testMultiply"
"theoreticalMinParams",\N
"testConstructorTooHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testConstructorTooHigh"
"DummyRandomKey","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyRandomKey.java[DummyRandomKey"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testNegate"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[FreudensteinRothFunction~computeJacobian~\\[D"
"DummyRandomKey","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyRandomKey.java[DummyRandomKey~DummyRandomKey~QList\\<QDouble;>;"
"testConstructorTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testConstructorTooLow"
"testPercentage","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testPercentage"
"variables",\N
"representation",\N
"testNextGeneration","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testNextGeneration"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[FreudensteinRothFunction~computeValue~\\[D"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testReciprocal"
"DummyRandomKey","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyRandomKey.java[DummyRandomKey~DummyRandomKey~\\[QDouble;"
"testSetElitismRate","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testSetElitismRate"
"variables",\N
"representation",\N
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testSubtract"
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BardFunction"
"testSetElitismRateTooHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testSetElitismRateTooHigh"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyRandomKey.java[DummyRandomKey~fitness"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.fraction{FractionTest.java[FractionTest~testToString"
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BardFunction~BardFunction~D~D~D~\\[D"
"FitnessCachingTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FitnessCachingTest.java[FitnessCachingTest"
"testSetElitismRateTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest~testSetElitismRateTooLow"
"x0",\N
"testFitnessCaching","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FitnessCachingTest.java[FitnessCachingTest~testFitnessCaching"
"OrderedCrossoverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OrderedCrossoverTest.java[OrderedCrossoverTest"
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest[DummyChromosome"
"theoreticalStartCost",\N
"testCrossover","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OrderedCrossoverTest.java[OrderedCrossoverTest~testCrossover"
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest[DummyChromosome~DummyChromosome"
"DummyCountingBinaryChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FitnessCachingTest.java[FitnessCachingTest[DummyCountingBinaryChromosome"
"theoreticalMinCost",\N
"DummyCountingBinaryChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FitnessCachingTest.java[FitnessCachingTest[DummyCountingBinaryChromosome~DummyCountingBinaryChromosome~QList\\<QInteger;>;"
"theoreticalMinParams",\N
"testCrossoverDimensionMismatchException","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OrderedCrossoverTest.java[OrderedCrossoverTest~testCrossoverDimensionMismatchException"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ElitisticListPopulationTest.java[ElitisticListPopulationTest[DummyChromosome~fitness"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BardFunction~computeJacobian~\\[D"
"representation",\N
"testCrossoverInvalidFixedLengthChromosomeFirst","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OrderedCrossoverTest.java[OrderedCrossoverTest~testCrossoverInvalidFixedLengthChromosomeFirst"
"RandomKeyMutationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyMutationTest.java[RandomKeyMutationTest"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FitnessCachingTest.java[FitnessCachingTest[DummyCountingBinaryChromosome~fitness"
"variables",\N
"testMutate","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{RandomKeyMutationTest.java[RandomKeyMutationTest~testMutate"
"testCrossoverInvalidFixedLengthChromosomeSecond","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OrderedCrossoverTest.java[OrderedCrossoverTest~testCrossoverInvalidFixedLengthChromosomeSecond"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BardFunction~computeValue~\\[D"
"FixedElapsedTimeTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FixedElapsedTimeTest.java[FixedElapsedTimeTest"
"OnePointCrossoverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OnePointCrossoverTest.java[OnePointCrossoverTest"
"UniformCrossoverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest"
"testIsSatisfied","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FixedElapsedTimeTest.java[FixedElapsedTimeTest~testIsSatisfied"
"variables",\N
"testCrossover","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{OnePointCrossoverTest.java[OnePointCrossoverTest~testCrossover"
"setUpBeforeClass","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~setUpBeforeClass"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[KowalikOsborneFunction"
"CycleCrossoverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest"
"GeneticAlgorithmTestBinary","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestBinary.java[GeneticAlgorithmTestBinary"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[KowalikOsborneFunction~KowalikOsborneFunction~\\[D~D~D~\\[D"
"testCrossover","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testCrossover"
"testCrossover","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossover"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestBinary.java[GeneticAlgorithmTestBinary~test"
"startParams",\N
"testCrossoverDimensionMismatchException","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testCrossoverDimensionMismatchException"
"testCrossoverDimensionMismatchException","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossoverDimensionMismatchException"
"FindOnes","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestBinary.java[GeneticAlgorithmTestBinary[FindOnes"
"theoreticalStartCost",\N
"testCrossoverInvalidFixedLengthChromosomeFirst","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testCrossoverInvalidFixedLengthChromosomeFirst"
"FindOnes","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestBinary.java[GeneticAlgorithmTestBinary[FindOnes~FindOnes~QList\\<QInteger;>;"
"theoreticalMinCost",\N
"testCrossoverExample","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossoverExample"
"theoreticalMinParams",\N
"testCrossoverInvalidFixedLengthChromosomeSecond","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testCrossoverInvalidFixedLengthChromosomeSecond"
"representation",\N
"testCrossoverExample2","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossoverExample2"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[KowalikOsborneFunction~computeJacobian~\\[D"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{GeneticAlgorithmTestBinary.java[GeneticAlgorithmTestBinary[FindOnes~fitness"
"testRatioTooHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testRatioTooHigh"
"testCrossoverInvalidFixedLengthChromosomeFirst","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossoverInvalidFixedLengthChromosomeFirst"
"variables",\N
"FixedGenerationCountTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FixedGenerationCountTest.java[FixedGenerationCountTest"
"testRatioTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{UniformCrossoverTest.java[UniformCrossoverTest~testRatioTooLow"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[KowalikOsborneFunction~computeValue~\\[D"
"testCrossoverInvalidFixedLengthChromosomeSecond","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{CycleCrossoverTest.java[CycleCrossoverTest~testCrossoverInvalidFixedLengthChromosomeSecond"
"testIsSatisfied","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{FixedGenerationCountTest.java[FixedGenerationCountTest~testIsSatisfied"
"DummyBinaryChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyBinaryChromosome.java[DummyBinaryChromosome"
"variables",\N
"BinaryMutationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryMutationTest.java[BinaryMutationTest"
"ListPopulationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest"
"DummyBinaryChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyBinaryChromosome.java[DummyBinaryChromosome~DummyBinaryChromosome~QList\\<QInteger;>;"
"testMutate","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{BinaryMutationTest.java[BinaryMutationTest~testMutate"
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MeyerFunction"
"testAddTooManyChromosomes","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testAddTooManyChromosomes"
"representation",\N
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MeyerFunction~MeyerFunction~\\[D~D~D~\\[D"
"TournamentSelectionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{TournamentSelectionTest.java[TournamentSelectionTest"
"testAddTooManyChromosomesSingleCall","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testAddTooManyChromosomesSingleCall"
"DummyBinaryChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyBinaryChromosome.java[DummyBinaryChromosome~DummyBinaryChromosome~\\[QInteger;"
"startParams",\N
"testSelect","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{TournamentSelectionTest.java[TournamentSelectionTest~testSelect"
"testChromosomeListConstructorPopulationLimitNotPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testChromosomeListConstructorPopulationLimitNotPositive"
"theoreticalStartCost",\N
"representation",\N
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{TournamentSelectionTest.java[TournamentSelectionTest[DummyChromosome"
"theoreticalMinCost",\N
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{DummyBinaryChromosome.java[DummyBinaryChromosome~fitness"
"testChromosomes","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testChromosomes"
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{TournamentSelectionTest.java[TournamentSelectionTest[DummyChromosome~DummyChromosome"
"theoreticalMinParams",\N
"ChromosomeTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ChromosomeTest.java[ChromosomeTest"
"testConstructorListOfChromosomesBiggerThanPopulationSize","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testConstructorListOfChromosomesBiggerThanPopulationSize"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MeyerFunction~computeJacobian~\\[D"
"fitness","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{TournamentSelectionTest.java[TournamentSelectionTest[DummyChromosome~fitness"
"testCompareTo","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ChromosomeTest.java[ChromosomeTest~testCompareTo"
"testConstructorPopulationLimitNotPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testConstructorPopulationLimitNotPositive"
"variables",\N
"NPointCrossoverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest"
"testFindSameChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ChromosomeTest.java[ChromosomeTest~testFindSameChromosome"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[MeyerFunction~computeValue~\\[D"
"testGetFittestChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testGetFittestChromosome"
"testCrossover","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest~testCrossover"
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ChromosomeTest.java[ChromosomeTest[DummyChromosome"
"variables",\N
"testCrossoverDimensionMismatchException","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest~testCrossoverDimensionMismatchException"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testIterator"
"DummyChromosome","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ChromosomeTest.java[ChromosomeTest[DummyChromosome~DummyChromosome~I"
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[WatsonFunction"
"testSetPopulationLimit","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testSetPopulationLimit"
"testCrossoverInvalidFixedLengthChromosomeFirst","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest~testCrossoverInvalidFixedLengthChromosomeFirst"
"repr",\N
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[WatsonFunction~WatsonFunction~I~D~D~D~\\[D"
"testCrossoverInvalidFixedLengthChromosomeSecond","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest~testCrossoverInvalidFixedLengthChromosomeSecond"
"testSetPopulationLimitTooSmall","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{ListPopulationTest.java[ListPopulationTest~testSetPopulationLimitTooSmall"
"WelzlEncloser2DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest"
"n",\N
"testLargeSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testLargeSamples"
"x0",\N
"testNumberIsTooLargeException","=mathmain3.6/src<test.java.org.apache.commons.math3.genetics{NPointCrossoverTest.java[NPointCrossoverTest~testNumberIsTooLargeException"
"WelzlEncloser3DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest"
"theoreticalStartCost",\N
"testNoPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testNoPoints"
"testInfiniteLoop","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest~testInfiniteLoop"
"FrenchVector1DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{FrenchVector1DFormatTest.java[FrenchVector1DFormatTest"
"theoreticalMinCost",\N
"testNullList","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testNullList"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{FrenchVector1DFormatTest.java[FrenchVector1DFormatTest~getDecimalCharacter"
"theoreticalMinParams",\N
"testLargeSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest~testLargeSamples"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[WatsonFunction~computeJacobian~\\[D"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{FrenchVector1DFormatTest.java[FrenchVector1DFormatTest~getLocale"
"testReducingBall1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testReducingBall1"
"testNoPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest~testNoPoints"
"variables",\N
"testReducingBall2","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testReducingBall2"
"IntervalsSetTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSetTest.java[IntervalsSetTest"
"testNullList","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest~testNullList"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[WatsonFunction~computeValue~\\[D"
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSetTest.java[IntervalsSetTest~testInfinite"
"testRegularPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testRegularPoints"
"testReducingBall","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser3DTest.java[WelzlEncloser3DTest~testReducingBall"
"variables",\N
"testInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSetTest.java[IntervalsSetTest~testInterval"
"testSolutionOnDiameter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.enclosing{WelzlEncloser2DTest.java[WelzlEncloser2DTest~testSolutionOnDiameter"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Box3DimensionalFunction"
"Vector1DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest"
"testMultiple","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSetTest.java[IntervalsSetTest~testMultiple"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Box3DimensionalFunction~Box3DimensionalFunction~I~\\[D~D"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testAdd"
"Vector1DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest"
"testSinglePoint","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalsSetTest.java[IntervalsSetTest~testSinglePoint"
"m",\N
"Vector1DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~Vector1DFormatAbstractTest"
"testCoordinates","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testCoordinates"
"startParams",\N
"Vector1DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatTest.java[Vector1DFormatTest"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~getDecimalCharacter"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testDistance"
"theoreticalStartCost",\N
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatTest.java[Vector1DFormatTest~getDecimalCharacter"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Box3DimensionalFunction~computeJacobian~\\[D"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~getLocale"
"testDistance1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testDistance1"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatTest.java[Vector1DFormatTest~getLocale"
"variables",\N
"testDistanceInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testDistanceInf"
"tesNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~tesNegativeInfinity"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Box3DimensionalFunction~computeValue~\\[D"
"Euclidean1DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1DTest.java[Euclidean1DTest"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testConstructorSingleFormat"
"testDistanceSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testDistanceSq"
"testDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1DTest.java[Euclidean1DTest~testDimension"
"variables",\N
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testEquals"
"testDefaultFormatVector1D","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testDefaultFormatVector1D"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1DTest.java[Euclidean1DTest~testSerialization"
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[JennrichSampsonFunction"
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[JennrichSampsonFunction~JennrichSampsonFunction~I~\\[D~D~D~\\[D"
"testHash","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testHash"
"testForgottenPrefix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testForgottenPrefix"
"testSubSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Euclidean1DTest.java[Euclidean1DTest~testSubSpace"
"m",\N
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testInfinite"
"testForgottenSuffix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testForgottenSuffix"
"IntervalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest"
"startParams",\N
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest~testInfinite"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNaN"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testNan"
"theoreticalStartCost",\N
"theoreticalMinCost",\N
"testInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest~testInterval"
"testNegativeX","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testNegativeX"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNegate"
"theoreticalMinParams",\N
"testSinglePoint","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest~testSinglePoint"
"testNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testNonDefaultSetting"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNorm"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[JennrichSampsonFunction~computeJacobian~\\[D"
"testStrictOrdering","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest~testStrictOrdering"
"testNorm1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNorm1"
"testParseIgnoredWhitespace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testParseIgnoredWhitespace"
"variables",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[JennrichSampsonFunction~computeValue~\\[D"
"testTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{IntervalTest.java[IntervalTest~testTolerance"
"testNormInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNormInf"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testPositiveInfinity"
"variables",\N
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testSimpleNoDecimals"
"testNormSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testNormSq"
"FieldRotationDfpTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest"
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownDennisFunction"
"testIdentity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest~testIdentity"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testSimpleWithDecimals"
"testScalarProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testScalarProduct"
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownDennisFunction~BrownDennisFunction~I~\\[D~D~D~\\[D"
"testRevert","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest~testRevert"
"testSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testSpace"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DFormatAbstractTest.java[Vector1DFormatAbstractTest~testSimpleWithDecimalsTrunc"
"m",\N
"testRevertFrameTransform","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest~testRevertFrameTransform"
"startParams",\N
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testSubtract"
"PlaneTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PlaneTest.java[PlaneTest"
"theoreticalStartCost",\N
"testRevertVectorOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest~testRevertVectorOperator"
"RotationOrderTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrderTest.java[RotationOrderTest"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testToString"
"theoreticalMinCost",\N
"testName","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationOrderTest.java[RotationOrderTest~testName"
"testSingularities","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDfpTest.java[FieldRotationDfpTest~testSingularities"
"theoreticalMinParams",\N
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.oned{Vector1DTest.java[Vector1DTest~testZero"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownDennisFunction~computeJacobian~\\[D"
"SubLineTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SubLineTest.java[SubLineTest"
"Vector3DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest"
"PLYParser","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser"
"PolyhedronsSetTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest"
"testAccurateCrossProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testAccurateCrossProduct"
"variables",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownDennisFunction~computeValue~\\[D"
"PLYParser","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser~PLYParser~QInputStream;"
"testBox","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testBox"
"testAccurateDotProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testAccurateDotProduct"
"variables",\N
"stream",\N
"testBuildBox","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testBuildBox"
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[ChebyquadFunction"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testAdd"
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[ChebyquadFunction~ChebyquadFunction~I~I~D~D~D~\\[D"
"getFaces","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser~getFaces"
"testConnectedFacets","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testConnectedFacets"
"testAngular","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testAngular"
"n",\N
"Field","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser[Field"
"testCross","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testCross"
"testCoordinates","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testCoordinates"
"m",\N
"Field","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser[Field~Field~QString;"
"factor",\N
"testDumpParse","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testDumpParse"
"testCrossProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testCrossProduct"
"value",\N
"theoreticalStartCost",\N
"getValue","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PLYParser.java[PLYParser[Field~getValue"
"testFacet2Vertices","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testFacet2Vertices"
"testCrossProductCancellation","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testCrossProductCancellation"
"theoreticalMinCost",\N
"theoreticalMinParams",\N
"testHole","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testHole"
"SphericalCoordinatesTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinatesTest.java[SphericalCoordinatesTest"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testDistance"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[ChebyquadFunction~computeJacobian~\\[D"
"testGradient","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinatesTest.java[SphericalCoordinatesTest~testGradient"
"testIssue1211","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testIssue1211"
"testDistance1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testDistance1"
"variables",\N
"testHessian","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinatesTest.java[SphericalCoordinatesTest~testHessian"
"testNonPlanar","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testNonPlanar"
"testDistanceInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testDistanceInf"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[ChebyquadFunction~computeValue~\\[D"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphericalCoordinatesTest.java[SphericalCoordinatesTest~testSerialization"
"testOrientation","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testOrientation"
"testDistanceSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testDistanceSq"
"variables",\N
"Euclidean3DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3DTest.java[Euclidean3DTest"
"testTooClose","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testTooClose"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction"
"testDotProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testDotProduct"
"testDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3DTest.java[Euclidean3DTest~testDimension"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~BrownAlmostLinearFunction~I~D~D~D~\\[D"
"testTooThinBox","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testTooThinBox"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testEquals"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3DTest.java[Euclidean3DTest~testSerialization"
"m",\N
"testWrongUsage","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{PolyhedronsSetTest.java[PolyhedronsSetTest~testWrongUsage"
"testHash","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testHash"
"factor",\N
"testSubSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Euclidean3DTest.java[Euclidean3DTest~testSubSpace"
"theoreticalStartCost",\N
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testInfinite"
"FieldRotationDSTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest"
"SphereGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest"
"theoreticalMinCost",\N
"testDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testDerivatives"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNaN"
"testDegeneratedCase","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testDegeneratedCase"
"theoreticalMinParams",\N
"testIdentity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testIdentity"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~computeJacobian~\\[D"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNegate"
"testRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testRandom"
"testRevert","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testRevert"
"variables",\N
"testSupport0Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testSupport0Point"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNorm"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~computeValue~\\[D"
"testRevertFrameTransform","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testRevertFrameTransform"
"testNorm1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNorm1"
"testSupport1Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testSupport1Point"
"variables",\N
"testRevertVectorOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testRevertVectorOperator"
"testNormInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNormInf"
"testSupport2Points","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testSupport2Points"
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne1Function"
"testSingularities","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldRotationDSTest.java[FieldRotationDSTest~testSingularities"
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne1Function~Osborne1Function~\\[D~D~D~\\[D"
"testSupport3Points","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testSupport3Points"
"testNormSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testNormSq"
"FrenchVector3DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FrenchVector3DFormatTest.java[FrenchVector3DFormatTest"
"startParams",\N
"testSupport4Points","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{SphereGeneratorTest.java[SphereGeneratorTest~testSupport4Points"
"testScalarProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testScalarProduct"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FrenchVector3DFormatTest.java[FrenchVector3DFormatTest~getDecimalCharacter"
"theoreticalStartCost",\N
"testSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testSpace"
"LineTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{LineTest.java[LineTest"
"theoreticalMinCost",\N
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FrenchVector3DFormatTest.java[FrenchVector3DFormatTest~getLocale"
"testRevert","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{LineTest.java[LineTest~testRevert"
"theoreticalMinParams",\N
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testSubtract"
"FieldVector3DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne1Function~computeJacobian~\\[D"
"Vector3DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testToString"
"testAccurateCrossProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testAccurateCrossProduct"
"Vector3DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~Vector3DFormatAbstractTest"
"variables",\N
"testVectorialProducts","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testVectorialProducts"
"testAccurateDotProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testAccurateDotProduct"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne1Function~computeValue~\\[D"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~getDecimalCharacter"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DTest.java[Vector3DTest~testZero"
"variables",\N
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testAdd"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~getLocale"
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne2Function"
"Vector3DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatTest.java[Vector3DFormatTest"
"testAngular","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testAngular"
"tesNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~tesNegativeInfinity"
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne2Function~Osborne2Function~\\[D~D~D~\\[D"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatTest.java[Vector3DFormatTest~getDecimalCharacter"
"testCoordinates","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testCoordinates"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testConstructorSingleFormat"
"startParams",\N
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatTest.java[Vector3DFormatTest~getLocale"
"theoreticalStartCost",\N
"testCrossProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testCrossProduct"
"testDefaultFormatVector3D","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testDefaultFormatVector3D"
"theoreticalMinCost",\N
"RotationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest"
"testCrossProductCancellation","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testCrossProductCancellation"
"testForgottenPrefix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testForgottenPrefix"
"theoreticalMinParams",\N
"testGithubPullRequest22A","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testGithubPullRequest22A"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testDistance"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne2Function~computeJacobian~\\[D"
"testForgottenSeparator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testForgottenSeparator"
"testGithubPullRequest22B","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testGithubPullRequest22B"
"variables",\N
"testDistance1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testDistance1"
"testForgottenSuffix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testForgottenSuffix"
"testIdentity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testIdentity"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.fitting.leastsquares{MinpackTest.java[MinpackTest[Osborne2Function~computeValue~\\[D"
"testDistanceInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testDistanceInf"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testNan"
"testRevertDeprecated","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testRevertDeprecated"
"variables",\N
"testDistanceSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testDistanceSq"
"testNegativeX","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testNegativeX"
"testRevertFrameTransform","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testRevertFrameTransform"
"Euclidean2DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2DTest.java[Euclidean2DTest"
"testDotProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testDotProduct"
"testDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2DTest.java[Euclidean2DTest~testDimension"
"testNegativeY","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testNegativeY"
"testRevertVectorOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testRevertVectorOperator"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2DTest.java[Euclidean2DTest~testSerialization"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testEquals"
"testNegativeZ","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testNegativeZ"
"testSingularities","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{RotationTest.java[RotationTest~testSingularities"
"testHash","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testHash"
"testSubSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Euclidean2DTest.java[Euclidean2DTest~testSubSpace"
"testNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testNonDefaultSetting"
"DiskGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest"
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testInfinite"
"testParseIgnoredWhitespace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testParseIgnoredWhitespace"
"testRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest~testRandom"
"FrenchVector2DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{FrenchVector2DFormatTest.java[FrenchVector2DFormatTest"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{FrenchVector2DFormatTest.java[FrenchVector2DFormatTest~getDecimalCharacter"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNaN"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testPositiveInfinity"
"testSupport0Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest~testSupport0Point"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{FrenchVector2DFormatTest.java[FrenchVector2DFormatTest~getLocale"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNegate"
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testSimpleNoDecimals"
"testSupport1Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest~testSupport1Point"
"Vector2DFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatTest.java[Vector2DFormatTest"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNorm"
"testSupport2Points","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest~testSupport2Points"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testSimpleWithDecimals"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatTest.java[Vector2DFormatTest~getDecimalCharacter"
"testNorm1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNorm1"
"testSupport3Points","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{DiskGeneratorTest.java[DiskGeneratorTest~testSupport3Points"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{Vector3DFormatAbstractTest.java[Vector3DFormatAbstractTest~testSimpleWithDecimalsTrunc"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatTest.java[Vector2DFormatTest~getLocale"
"testNormInf","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNormInf"
"Vector2DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DTest.java[Vector2DTest"
"Vector2DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest"
"SubLineTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest"
"testCrossProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DTest.java[Vector2DTest~testCrossProduct"
"Vector2DFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~Vector2DFormatAbstractTest"
"testNormSq","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testNormSq"
"testEndPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testEndPoints"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~getDecimalCharacter"
"testScalarProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testScalarProduct"
"PolygonsSetTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest"
"testHalfInfiniteNeg","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testHalfInfiniteNeg"
"testBoundarySimplification","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testBoundarySimplification"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~getLocale"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testSubtract"
"testHalfInfinitePos","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testHalfInfinitePos"
"testBox","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testBox"
"tesNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~tesNegativeInfinity"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testToString"
"testIntersectionBoundaryBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionBoundaryBoundary"
"testBug20040520","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testBug20040520"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testConstructorSingleFormat"
"testVectorialProducts","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.threed{FieldVector3DTest.java[FieldVector3DTest~testVectorialProducts"
"testIntersectionBoundaryOutside","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionBoundaryOutside"
"testBug20041003","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testBug20041003"
"testDefaultFormatVector2D","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testDefaultFormatVector2D"
"LineTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest"
"testIntersectionInsideBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionInsideBoundary"
"testChoppedHexagon","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testChoppedHexagon"
"testAbscissa","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testAbscissa"
"testForgottenPrefix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testForgottenPrefix"
"testIntersectionInsideInside","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionInsideInside"
"testConcentric","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testConcentric"
"testContains","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testContains"
"testForgottenSeparator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testForgottenSeparator"
"testIntersectionInsideOutside","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionInsideOutside"
"testDifference","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testDifference"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testDistance"
"testIntersectionOutsideOutside","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionOutsideOutside"
"testForgottenSuffix","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testForgottenSuffix"
"testIntersection","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testIntersection"
"testIntersectionParallel","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testIntersectionParallel"
"testDisjointPolygons","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testDisjointPolygons"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testNan"
"testOffset","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testOffset"
"testNoEndPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testNoEndPoints"
"testNegativeX","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testNegativeX"
"testEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testEmpty"
"testOriginOffset","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testOriginOffset"
"testNoSegments","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testNoSegments"
"testParallel","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testParallel"
"testEmptyDifference","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testEmptyDifference"
"testNegativeY","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testNegativeY"
"testSeveralSegments","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SubLineTest.java[SubLineTest~testSeveralSegments"
"testPointAt","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{LineTest.java[LineTest~testPointAt"
"testFull","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testFull"
"testNegativeZ","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testNegativeZ"
"SegmentTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SegmentTest.java[SegmentTest"
"testNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testNonDefaultSetting"
"testHole","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testHole"
"AklToussaintHeuristicTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{AklToussaintHeuristicTest.java[AklToussaintHeuristicTest"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{SegmentTest.java[SegmentTest~testDistance"
"MonotoneChainTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChainTest.java[MonotoneChainTest"
"testInconsistentHyperplanes","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testInconsistentHyperplanes"
"testParseIgnoredWhitespace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testParseIgnoredWhitespace"
"testConvergenceException","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{MonotoneChainTest.java[MonotoneChainTest~testConvergenceException"
"ConvexHullGenerator2DAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest"
"testInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testInfinite"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testPositiveInfinity"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~setUp"
"RegionParser","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser"
"testIntersection","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testIntersection"
"TreeBuilder","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder"
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testSimpleNoDecimals"
"testAllIdentical","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testAllIdentical"
"TreeBuilder","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder~TreeBuilder~QString;~QString;"
"testIssue1162","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testIssue1162"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testSimpleWithDecimals"
"testClosePoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testClosePoints"
"type",\N
"testIssue880Complete","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testIssue880Complete"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{Vector2DFormatAbstractTest.java[Vector2DFormatAbstractTest~testSimpleWithDecimalsTrunc"
"testCollinearPointOnExistingBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPointOnExistingBoundary"
"s",\N
"getBoolean","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder~getBoolean"
"testIssue880Simplified","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testIssue880Simplified"
"RegionDumper","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionDumper.java[RegionDumper"
"testCollinearPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPoints"
"TreeDumper","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionDumper.java[RegionDumper[TreeDumper"
"testLineIntersection","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testLineIntersection"
"getNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder~getNumber"
"testCollinearPointsInAnyOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPointsInAnyOrder"
"TreeDumper","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionDumper.java[RegionDumper[TreeDumper~TreeDumper~QString;~D"
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder~getTolerance"
"testOppositeHyperplanes","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testOppositeHyperplanes"
"testCollinearPointsIncluded","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPointsIncluded"
"type",\N
"tolerance",\N
"getWord","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionParser.java[RegionParser[TreeBuilder~getWord~\\[QString;"
"testSimplyConnected","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testSimplyConnected"
"testCollinearPointsIncludedReverse","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPointsIncludedReverse"
"getDump","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionDumper.java[RegionDumper[TreeDumper~getDump"
"allowed",\N
"testSingularPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testSingularPoint"
"testCollinearPointsReverse","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testCollinearPointsReverse"
"getFormatter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning{RegionDumper.java[RegionDumper[TreeDumper~getFormatter"
"AVLTreeTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest"
"testSqueezedHexa","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testSqueezedHexa"
"testConvexHull","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testConvexHull"
"testDelete1","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest~testDelete1"
"LimitAngleTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngleTest.java[LimitAngleTest"
"testStair","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testStair"
"testEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testEmpty"
"testInsert","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest~testInsert"
"testReversedLimit","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{LimitAngleTest.java[LimitAngleTest~testReversedLimit"
"testThinRectangle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testThinRectangle"
"testIdenticalPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testIdenticalPoints"
"testNavigation","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest~testNavigation"
"ArcTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest"
"testTooThinBox","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testTooThinBox"
"testIdenticalPoints2","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testIdenticalPoints2"
"testArc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest~testArc"
"testRepetition","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest~testRepetition"
"testUnion","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testUnion"
"testFullCircle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest~testFullCircle"
"testIssue1123","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testIssue1123"
"testSearch","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.partitioning.utilities{AVLTreeTest.java[AVLTreeTest~testSearch"
"testUnlimitedSubHyperplane","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testUnlimitedSubHyperplane"
"testNullArgument","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testNullArgument"
"testSmall","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest~testSmall"
"S1PointTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest"
"testWrongUsage","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testWrongUsage"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest~testDistance"
"testOnePoint","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testOnePoint"
"testTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest~testTolerance"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest~testEquals"
"testXor","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest~testXor"
"testTwoPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod.hull{ConvexHullGenerator2DAbstractTest.java[ConvexHullGenerator2DAbstractTest~testTwoPoints"
"testWrongInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcTest.java[ArcTest~testWrongInterval"
"Counter","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest[Counter"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest~testNaN"
"Sphere1Test","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1Test.java[Sphere1Test"
"ArcsSetTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest"
"getInternalNodes","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest[Counter~getInternalNodes"
"testArc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testArc"
"testDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1Test.java[Sphere1Test~testDimension"
"testS1Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest~testS1Point"
"getLeafNodes","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.euclidean.twod{PolygonsSetTest.java[PolygonsSetTest[Counter~getLeafNodes"
"testDifference","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testDifference"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1Test.java[Sphere1Test~testSerialization"
"testSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{S1PointTest.java[S1PointTest~testSpace"
"testSubSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{Sphere1Test.java[Sphere1Test~testSubSpace"
"SubCircleTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SubCircleTest.java[SubCircleTest"
"testEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testEmpty"
"CircleTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest"
"testFullCircle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SubCircleTest.java[SubCircleTest~testFullCircle"
"testEmptyTree","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testEmptyTree"
"testEquator","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testEquator"
"SphericalPolygonsSetTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest"
"testSPlit","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SubCircleTest.java[SubCircleTest~testSPlit"
"testConcentricSubParts","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testConcentricSubParts"
"testFarSplit","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testFarSplit"
"testInsideArc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testInsideArc"
"testSide","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SubCircleTest.java[SubCircleTest~testSide"
"testEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testEmpty"
"testFullCircle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testFullCircle"
"testOffset","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testOffset"
"testSideSplitConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SubCircleTest.java[SubCircleTest~testSideSplitConsistency"
"testFullSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testFullSphere"
"testPhase","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testPhase"
"testFullEqualEndPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testFullEqualEndPoints"
"S2PointTest","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest"
"testGeographicalMap","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testGeographicalMap"
"testInconsistentState","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testInconsistentState"
"testReverse","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testReverse"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testDistance"
"testModeratlyComplexShape","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testModeratlyComplexShape"
"testSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testSpace"
"testIntersection","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testIntersection"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testEquals"
"testNonConvex","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testNonConvex"
"testSubSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testSubSpace"
"testIteration","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testIteration"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testNaN"
"testPartWithHole","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testPartWithHole"
"testTransform","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testTransform"
"testMultiple","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testMultiple"
"testNegativePolarAngle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testNegativePolarAngle"
"testPositiveOctantByIntersection","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testPositiveOctantByIntersection"
"testXY","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{CircleTest.java[CircleTest~testXY"
"testShiftedAngles","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testShiftedAngles"
"testS2Point","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testS2Point"
"testPositiveOctantByVertices","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testPositiveOctantByVertices"
"testSide","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSide"
"RealVectorFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest"
"testSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testSpace"
"RealVectorFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~RealVectorFormatAbstractTest"
"testSeveralParts","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testSeveralParts"
"testSideEmbedded","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSideEmbedded"
"testTooLargePolarAngle","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{S2PointTest.java[S2PointTest~testTooLargePolarAngle"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~getDecimalCharacter"
"testSouthHemisphere","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.twod{SphericalPolygonsSetTest.java[SphericalPolygonsSetTest~testSouthHemisphere"
"testSideHyper","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSideHyper"
"RealMatrixFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatTest.java[RealMatrixFormatTest"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~getLocale"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatTest.java[RealMatrixFormatTest~getDecimalCharacter"
"RectangularCholeskyDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RectangularCholeskyDecompositionTest.java[RectangularCholeskyDecompositionTest"
"testSideOverlapping","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSideOverlapping"
"testDecomposition3x3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RectangularCholeskyDecompositionTest.java[RectangularCholeskyDecompositionTest~testDecomposition3x3"
"tesNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~tesNegativeInfinity"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatTest.java[RealMatrixFormatTest~getLocale"
"testSideSplitConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSideSplitConsistency"
"testFullRank","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RectangularCholeskyDecompositionTest.java[RectangularCholeskyDecompositionTest~testFullRank"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testConstructorSingleFormat"
"LUDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest"
"testSinglePoint","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSinglePoint"
"testMath789","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RectangularCholeskyDecompositionTest.java[RectangularCholeskyDecompositionTest~testMath789"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testDimensions"
"testDefaultFormatRealVectorImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testDefaultFormatRealVectorImpl"
"testSpecialConstruction","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSpecialConstruction"
"testLLowerTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testLLowerTriangular"
"testForgottenPrefix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testForgottenPrefix"
"SparseRealVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest"
"testSplitAtEnd","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSplitAtEnd"
"testConcurrentModification","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest~testConcurrentModification"
"testMatricesValues1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testMatricesValues1"
"testForgottenSeparator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testForgottenSeparator"
"testSplitEmbedded","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSplitEmbedded"
"testConstructors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest~testConstructors"
"testMatricesValues2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testMatricesValues2"
"testForgottenSuffix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testForgottenSuffix"
"testSplitOver2Pi","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSplitOver2Pi"
"testEbeDivideSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest~testEbeDivideSameType"
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testNonSquare"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testNan"
"testSplitOverlapping","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSplitOverlapping"
"testEbeMultiplyMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest~testEbeMultiplyMixedTypes"
"testPAEqualLU","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testPAEqualLU"
"testNegativeX","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testNegativeX"
"testSplitWithinEpsilon","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testSplitWithinEpsilon"
"testEbeMultiplySameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealVectorTest.java[SparseRealVectorTest~testEbeMultiplySameType"
"testPPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testPPermutation"
"testNegativeY","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testNegativeY"
"testTiny","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testTiny"
"SingularValueDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest"
"testSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testSingular"
"testNegativeZ","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testNegativeZ"
"testWrapAround2PiArc","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testWrapAround2PiArc"
"testAEqualUSVt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testAEqualUSVt"
"testUUpperTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUDecompositionTest.java[LUDecompositionTest~testUUpperTriangular"
"testNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testNonDefaultSetting"
"testConditionNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testConditionNumber"
"testWrongInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.geometry.spherical.oned{ArcsSetTest.java[ArcsSetTest~testWrongInterval"
"MatrixUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest"
"testParseIgnoredWhitespace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseIgnoredWhitespace"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testDimensions"
"SparseFieldMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest"
"testBigFractionConverter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testBigFractionConverter"
"testParseManyComponents","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseManyComponents"
"SparseFieldMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~SparseFieldMatrixTest"
"testHadamard","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testHadamard"
"testBlockInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testBlockInverse"
"testParseNan","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNan"
"testInverseConditionNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testInverseConditionNumber"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testAdd"
"testBlockInverseNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testBlockInverseNonInvertible"
"testIssue947","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testIssue947"
"testParseNegativeAll","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNegativeAll"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testAddFail"
"testCheckSymmetric1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCheckSymmetric1"
"testMatricesValues1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testMatricesValues1"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testCopyFunctions"
"testParseNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNegativeInfinity"
"testCheckSymmetric2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCheckSymmetric2"
"testMoreColumns","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testMoreColumns"
"testParseNegativeX","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNegativeX"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testDimensions"
"testCreateColumnFieldMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateColumnFieldMatrix"
"testMoreRows","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testMoreRows"
"testParseNegativeY","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNegativeY"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testEqualsAndHashCode"
"testCreateColumnRealMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateColumnRealMatrix"
"testRank","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testRank"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testExamples"
"testParseNegativeZ","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNegativeZ"
"testCreateIdentityMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateIdentityMatrix"
"testStability1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testStability1"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetColumnMatrix"
"testParseNoComponents","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNoComponents"
"testCreateRealMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateRealMatrix"
"testStability2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testStability2"
"testParseNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseNonDefaultSetting"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetColumnVector"
"testCreateRowFieldMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateRowFieldMatrix"
"testUOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testUOrthogonal"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetEntry"
"testParsePositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParsePositiveInfinity"
"testCreateRowRealMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testCreateRowRealMatrix"
"testVOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~testVOrthogonal"
"testParseSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseSimpleNoDecimals"
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetRowMatrix"
"testFractionConverter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testFractionConverter"
"useless_testMatricesValues2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueDecompositionTest.java[SingularValueDecompositionTest~useless_testMatricesValues2"
"testParseSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseSimpleWithDecimals"
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetRowVector"
"testInverseDiagonalMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testInverseDiagonalMatrix"
"testParseSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseSimpleWithDecimalsTrunc"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testGetVectors"
"SparseFieldVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest"
"testInverseNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testInverseNonSquare"
"testMisc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testMisc"
"testParseZeroX","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testParseZeroX"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testMath209"
"testInverseRealMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testInverseRealMatrix"
"testOuterProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testOuterProduct"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testPositiveInfinity"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testMultiply"
"testInverseSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testInverseSingular"
"testPredicates","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testPredicates"
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testSimpleNoDecimals"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testMultiply2"
"testIsSymmetric","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testIsSymmetric"
"testWalkInDefaultOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderChangingVisitor1"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testSimpleWithDecimals"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testOperate"
"testIsSymmetricTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testIsSymmetricTolerance"
"testWalkInDefaultOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderChangingVisitor2"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testPlusMinus"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatAbstractTest.java[RealVectorFormatAbstractTest~testSimpleWithDecimalsTrunc"
"testSolveLowerTriangularSystem","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testSolveLowerTriangularSystem"
"testWalkInDefaultOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderChangingVisitor3"
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testPremultiply"
"FieldLUDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest"
"testSolveUpperTriangularSystem","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testSolveUpperTriangularSystem"
"testWalkInDefaultOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderPreservingVisitor1"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testDimensions"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testPremultiplyVector"
"testcreateFieldIdentityMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testcreateFieldIdentityMatrix"
"testLLowerTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testLLowerTriangular"
"testWalkInDefaultOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderPreservingVisitor2"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testScalarAdd"
"testcreateFieldMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest~testcreateFieldMatrix"
"testWalkInDefaultOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInDefaultOrderPreservingVisitor3"
"testMatricesValues1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testMatricesValues1"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testSetSubMatrix"
"bigCol","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^bigCol"
"testMatricesValues2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testMatricesValues2"
"testWalkInOptimizedOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderChangingVisitor1"
"testSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testSubMatrix"
"bigColMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^bigColMatrix"
"testWalkInOptimizedOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderChangingVisitor2"
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testNonSquare"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testTrace"
"bigRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^bigRow"
"testPAEqualLU","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testPAEqualLU"
"testWalkInOptimizedOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderChangingVisitor3"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest~testTranspose"
"bigRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^bigRowMatrix"
"testPPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testPPermutation"
"testWalkInOptimizedOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor1"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest^entryTolerance"
"col","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^col"
"testSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testSingular"
"testWalkInOptimizedOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor2"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldMatrixTest.java[SparseFieldMatrixTest^normTolerance"
"colMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^colMatrix"
"testWalkInOptimizedOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor3"
"testUUpperTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUDecompositionTest.java[FieldLUDecompositionTest~testUUpperTriangular"
"BlockFieldMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest"
"nullDoubleArray","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^nullDoubleArray"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest^entryTolerance"
"RealVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testAdd"
"nullMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^nullMatrix"
"testAppendScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testAppendScalar"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseFieldVectorTest.java[SparseFieldVectorTest^normTolerance"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testAddFail"
"row","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^row"
"testAppendVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testAppendVector"
"SparseRealMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testCopyFunctions"
"assertClose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~assertClose~QString;~\\[D~\\[D~D"
"rowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^rowMatrix"
"testEbeDivideDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeDivideDimensionMismatch"
"testCopySubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testCopySubMatrix"
"msg",\N
"stringCol","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^stringCol"
"testEbeDivideMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeDivideMixedTypes"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testDimensions"
"m",\N
"stringColMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^stringColMatrix"
"testEbeDivideSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeDivideSameType"
"n",\N
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testEqualsAndHashCode"
"tolerance",\N
"stringRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^stringRow"
"testEbeMultiplyDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeMultiplyDimensionMismatch"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testExamples"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testAdd"
"stringRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^stringRowMatrix"
"testEbeMultiplyMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeMultiplyMixedTypes"
"testGetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetColumn"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testAddFail"
"testData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^testData"
"testEbeMultiplySameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEbeMultiplySameType"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetColumnMatrix"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testCopyFunctions"
"testData3x3Singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^testData3x3Singular"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testEquals"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetColumnVector"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testDimensions"
"testData3x4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixUtilsTest.java[MatrixUtilsTest^testData3x4"
"testGetL1Norm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetL1Norm"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetEntry"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testEqualsAndHashCode"
"testGetLInfNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetLInfNorm"
"EigenSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest"
"testGetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetRow"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testExamples"
"testInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testInvertible"
"testGetSubVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetSubVector"
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetRowMatrix"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetColumnMatrix"
"testInvertibleTinyValues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testInvertibleTinyValues"
"testGetSubVectorInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetSubVectorInvalidIndex1"
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetRowVector"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetColumnVector"
"testIsNonSingularTinyOutOfOrderEigenvalue","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testIsNonSingularTinyOutOfOrderEigenvalue"
"testGetSubVectorInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetSubVectorInvalidIndex2"
"testGetSetColumnLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetColumnLarge"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetEntry"
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testNonInvertible"
"testGetSubVectorInvalidIndex3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetSubVectorInvalidIndex3"
"testGetSetColumnMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetColumnMatrixLarge"
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetRowMatrix"
"testNonInvertibleMath1045","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testNonInvertibleMath1045"
"testGetSubVectorInvalidIndex4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testGetSubVectorInvalidIndex4"
"testGetSetColumnVectorLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetColumnVectorLarge"
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetRowVector"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testSolve"
"testIsInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testIsInfinite"
"testGetSetMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetMatrixLarge"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testGetVectors"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testSolveDimensionErrors"
"testIsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testIsNaN"
"testGetSetRowLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetRowLarge"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testMath209"
"testZeroMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenSolverTest.java[EigenSolverTest~testZeroMatrix"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSerial"
"testGetSetRowMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetRowMatrixLarge"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testMultiply"
"FrenchRealVectorFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FrenchRealVectorFormatTest.java[FrenchRealVectorFormatTest"
"testSetSubVectorInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSetSubVectorInvalidIndex1"
"testGetSetRowVectorLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSetRowVectorLarge"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testMultiply2"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FrenchRealVectorFormatTest.java[FrenchRealVectorFormatTest~getDecimalCharacter"
"testSetSubVectorInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSetSubVectorInvalidIndex2"
"testGetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetSubMatrix"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FrenchRealVectorFormatTest.java[FrenchRealVectorFormatTest~getLocale"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testNorm"
"testSetSubVectorInvalidIndex3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSetSubVectorInvalidIndex3"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testGetVectors"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testOperate"
"FieldLUSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest"
"testSetSubVectorMixedType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSetSubVectorMixedType"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testMath209"
"testDeterminant","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest~testDeterminant"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testPlusMinus"
"testSetSubVectorSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSetSubVectorSameType"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testMultiply"
"testSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest~testSingular"
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testPremultiply"
"testSparseIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorTest.java[RealVectorTest~testSparseIterator"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest~testSolve"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testMultiply2"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testPremultiplyVector"
"SymmLQTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest~testSolveDimensionErrors"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testOperate"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testScalarAdd"
"saundersTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~saundersTest~I~Z~Z~D~D"
"testSolveSingularityErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldLUSolverTest.java[FieldLUSolverTest~testSolveSingularityErrors"
"testOperateLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testOperateLarge"
"n",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testSerial"
"goodb",\N
"testOperatePremultiplyLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testOperatePremultiplyLarge"
"QRSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testSetSubMatrix"
"precon",\N
"testOverdetermined","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testOverdetermined"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testPlusMinus"
"shift",\N
"testSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testSubMatrix"
"testRank","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testRank"
"pertbn",\N
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testPremultiply"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testToString"
"testDimensionMismatchRightHandSide","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testDimensionMismatchRightHandSide"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testSolve"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testPremultiplyVector"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testTrace"
"testDimensionMismatchSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testDimensionMismatchSolution"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testSolveDimensionErrors"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testScalarAdd"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest~testTranspose"
"testEventManagement","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testEventManagement"
"testSolveRankErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testSolveRankErrors"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSerial"
"bigSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^bigSingular"
"testMismatchedOperatorDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testMismatchedOperatorDimensions"
"testUnderdetermined","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest~testUnderdetermined"
"testSetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetColumn"
"detData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^detData"
"testNonPositiveDefinitePreconditioner","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testNonPositiveDefinitePreconditioner"
"testData3x3NonSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest^testData3x3NonSingular"
"testSetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetColumnMatrix"
"detData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^detData2"
"testNonSelfAdjointOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testNonSelfAdjointOperator"
"testData3x3Singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest^testData3x3Singular"
"testSetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetColumnVector"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^entryTolerance"
"testNonSelfAdjointPreconditioner","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testNonSelfAdjointPreconditioner"
"testData3x4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest^testData3x4"
"testSetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetRow"
"id","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^id"
"testNonSquareOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testNonSquareOperator"
"testData4x3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRSolverTest.java[QRSolverTest^testData4x3"
"testSetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetRowMatrix"
"luData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^luData"
"testNonSquarePreconditioner","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testNonSquarePreconditioner"
"BiDiagonalTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest"
"testSetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetRowVector"
"luDataLUDecomposition","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^luDataLUDecomposition"
"testAEqualUSVt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testAEqualUSVt"
"testPreconditionedNormOfResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testPreconditionedNormOfResidual"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSetSubMatrix"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^normTolerance"
"testBBiDiagonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testBBiDiagonal"
"testPreconditionedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testPreconditionedSolution"
"testSeveralBlocks","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testSeveralBlocks"
"preMultTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^preMultTest"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testDimensions"
"testPreconditionedSolution2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testPreconditionedSolution2"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testToString"
"singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^singular"
"testMatricesValues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testMatricesValues"
"testSolveSaunders1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders1"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testTrace"
"subColumn1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subColumn1"
"testSingularMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testSingularMatrix"
"testSolveSaunders10","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders10"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testTranspose"
"subColumn3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subColumn3"
"testUOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testUOrthogonal"
"testSolveSaunders11","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders11"
"testWalk","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest~testWalk"
"subRow0","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRow0"
"testUpperOrLower","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testUpperOrLower"
"testSolveSaunders12","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders12"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest^entryTolerance"
"subRow3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRow3"
"testVOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BiDiagonalTransformerTest.java[BiDiagonalTransformerTest~testVOrthogonal"
"testSolveSaunders13","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders13"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest^normTolerance"
"subRows00Cols33","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows00Cols33"
"ConjugateGradientTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest"
"testSolveSaunders14","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders14"
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest[SetVisitor"
"testDimensionMismatchRightHandSide","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testDimensionMismatchRightHandSide"
"subRows01Cols23","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows01Cols23"
"testSolveSaunders15","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders15"
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest[SetVisitor~SetVisitor"
"testDimensionMismatchSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testDimensionMismatchSolution"
"subRows02Cols13","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows02Cols13"
"testSolveSaunders16","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders16"
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest[GetVisitor"
"testEventManagement","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testEventManagement"
"subRows03Cols12","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows03Cols12"
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest[GetVisitor~GetVisitor"
"testSolveSaunders17","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders17"
"testMismatchedOperatorDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testMismatchedOperatorDimensions"
"subRows03Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows03Cols123"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockFieldMatrixTest.java[BlockFieldMatrixTest[GetVisitor~getCount"
"testSolveSaunders18","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders18"
"testNonPositiveDefiniteLinearOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testNonPositiveDefiniteLinearOperator"
"subRows20Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows20Cols123"
"QRDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest"
"testSolveSaunders19","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders19"
"testNonPositiveDefinitePreconditioner","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testNonPositiveDefinitePreconditioner"
"testAEqualQR","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testAEqualQR"
"subRows23Cols00","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows23Cols00"
"testSolveSaunders2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders2"
"testNonSquareOperator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testNonSquareOperator"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testDimensions"
"subRows31Cols31","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subRows31Cols31"
"testSolveSaunders20","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders20"
"testNonSquarePreconditioner","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testNonSquarePreconditioner"
"testHTrapezoidal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testHTrapezoidal"
"subTestData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^subTestData"
"testSolveSaunders3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders3"
"testData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testData"
"testInvertShortWide","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testInvertShortWide"
"testPreconditionedNormOfResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testPreconditionedNormOfResidual"
"testSolveSaunders4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders4"
"testData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testData2"
"testPreconditionedResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testPreconditionedResidual"
"testInvertTallSkinny","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testInvertTallSkinny"
"testSolveSaunders5","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders5"
"testData2T","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testData2T"
"testPreconditionedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testPreconditionedSolution"
"testMatricesValues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testMatricesValues"
"testSolveSaunders6","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders6"
"testDataCol3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataCol3"
"testPreconditionedSolution2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testPreconditionedSolution2"
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testNonInvertible"
"testSolveSaunders7","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders7"
"testDataInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataInv"
"testUnpreconditionedInPlaceSolutionWithInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testUnpreconditionedInPlaceSolutionWithInitialGuess"
"testQOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testQOrthogonal"
"testSolveSaunders8","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders8"
"testDataLU","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataLU"
"testQRSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testQRSingular"
"testUnpreconditionedNormOfResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testUnpreconditionedNormOfResidual"
"testSolveSaunders9","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testSolveSaunders9"
"testDataMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataMinus"
"testUnpreconditionedResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testUnpreconditionedResidual"
"testRUpperTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{QRDecompositionTest.java[QRDecompositionTest~testRUpperTriangular"
"testUnpreconditionedInPlaceSolutionWithInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testUnpreconditionedInPlaceSolutionWithInitialGuess"
"testDataPlus2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataPlus2"
"testUnpreconditionedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testUnpreconditionedSolution"
"DiagonalMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testAdd"
"testUnpreconditionedNormOfResidual","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testUnpreconditionedNormOfResidual"
"testDataPlusInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataPlusInv"
"testUnpreconditionedSolutionWithInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ConjugateGradientTest.java[ConjugateGradientTest~testUnpreconditionedSolutionWithInitialGuess"
"testAddNonDiagonalEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testAddNonDiagonalEntry"
"testUnpreconditionedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testUnpreconditionedSolution"
"testDataRow1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testDataRow1"
"TriDiagonalTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest"
"testAddNonDiagonalZero","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testAddNonDiagonalZero"
"testAEqualQTQt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testAEqualQTQt"
"testUnpreconditionedSolutionWithInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SymmLQTest.java[SymmLQTest~testUnpreconditionedSolutionWithInitialGuess"
"testVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testVector"
"testAddToEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testAddToEntry"
"testMatricesValues3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testMatricesValues3"
"testVector2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SparseRealMatrixTest.java[SparseRealMatrixTest^testVector2"
"ArrayRealVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayRealVectorTest.java[ArrayRealVectorTest"
"testConstructor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testConstructor1"
"testMatricesValues5","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testMatricesValues5"
"testConstructors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayRealVectorTest.java[ArrayRealVectorTest~testConstructors"
"UnmodifiableRealVectorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest"
"testConstructor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testConstructor2"
"testNoAccessBelowDiagonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testNoAccessBelowDiagonal"
"testGetDataRef","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayRealVectorTest.java[ArrayRealVectorTest~testGetDataRef"
"createParameter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~createParameter~QClass\\<*>;"
"testConstructor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testConstructor3"
"c",\N
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testNonSquare"
"testPredicates","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayRealVectorTest.java[ArrayRealVectorTest~testPredicates"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~equals~D~D"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testCopy"
"testZeroVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayRealVectorTest.java[ArrayRealVectorTest~testZeroVectors"
"testQOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testQOrthogonal"
"x",\N
"testCreate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testCreate"
"testQTOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testQTOrthogonal"
"Array2DRowRealMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest"
"y",\N
"testCreateError","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testCreateError"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testAdd"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~equals~\\[D~\\[D"
"testTTriDiagonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{TriDiagonalTransformerTest.java[TriDiagonalTransformerTest~testTTriDiagonal"
"testGetData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testGetData"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testAddFail"
"x",\N
"CholeskyDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest"
"y",\N
"testAEqualLLT","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testAEqualLLT"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testCopyFunctions"
"testInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testInverse"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~equals~QObject;~QObject;"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testDimensions"
"testCopySubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testCopySubMatrix"
"testInverseError","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testInverseError"
"x",\N
"testLLowerTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testLLowerTriangular"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testDimensions"
"testInverseError2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testInverseError2"
"y",\N
"testMultiply1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testMultiply1"
"testLTTransposed","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testLTTransposed"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testEqualsAndHashCode"
"testAddToEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testAddToEntry"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testMultiply2"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testExamples"
"testMath274","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testMath274"
"testAllButExcluded","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testAllButExcluded"
"testMultiplyEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testMultiplyEntry"
"testMatricesValues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testMatricesValues"
"testFrobeniusNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testFrobeniusNorm"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testGetEntry"
"testMultiplyNonDiagonalEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testMultiplyNonDiagonalEntry"
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testNonSquare"
"testGetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetColumn"
"testGetSubVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testGetSubVector"
"testMultiplyNonDiagonalZero","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testMultiplyNonDiagonalZero"
"testNotPositiveDefinite","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testNotPositiveDefinite"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetColumnMatrix"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testIterator"
"testNull","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testNull"
"testNotSymmetricMatrixException","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskyDecompositionTest.java[CholeskyDecompositionTest~testNotSymmetricMatrixException"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetColumnVector"
"testSetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testSetEntry"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testOperate"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetEntry"
"RealMatrixFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest"
"testSetSubVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testSetSubVector"
"RealMatrixFormatAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~RealMatrixFormatAbstractTest"
"testPreMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testPreMultiply"
"testGetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetRow"
"testSparseIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest~testSparseIterator"
"testPreMultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testPreMultiplyVector"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~getDecimalCharacter"
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetRowMatrix"
"DIM","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest^DIM"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~getLocale"
"testSetEntryOutOfRange","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSetEntryOutOfRange"
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetRowVector"
"EPS","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest^EPS"
"testSetNonDiagonalEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSetNonDiagonalEntry"
"tesNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~tesNegativeInfinity"
"testGetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetSubMatrix"
"EXCLUDE","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest^EXCLUDE"
"testSetNonDiagonalZero","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSetNonDiagonalZero"
"testConstructorSingleFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testConstructorSingleFormat"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testGetVectors"
"RANDOM","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableRealVectorAbstractTest.java[UnmodifiableRealVectorAbstractTest^RANDOM"
"testDefaultFormat","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testDefaultFormat"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSetSubMatrix"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testMath209"
"RealVectorFormatTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatTest.java[RealVectorFormatTest"
"testForgottenPrefix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testForgottenPrefix"
"testSetSubMatrixError","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSetSubMatrixError"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testMultiply"
"getDecimalCharacter","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatTest.java[RealVectorFormatTest~getDecimalCharacter"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{DiagonalMatrixTest.java[DiagonalMatrixTest~testSubtract"
"testForgottenSeparator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testForgottenSeparator"
"getLocale","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorFormatTest.java[RealVectorFormatTest~getLocale"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testMultiply2"
"testForgottenSuffix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testForgottenSuffix"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testNorm"
"FieldMatrixImplTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest"
"UnmodifiableOpenMapRealVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableOpenMapRealVectorTest.java[UnmodifiableOpenMapRealVectorTest"
"PROBABILITY_OF_ZERO","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableOpenMapRealVectorTest.java[UnmodifiableOpenMapRealVectorTest^PROBABILITY_OF_ZERO"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testAdd"
"testNan","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testNan"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testOperate"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testAddFail"
"LUSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest"
"testNegativeComponent","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testNegativeComponent"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testPlusMinus"
"testDeterminant","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testDeterminant"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testCopyFunctions"
"testNegativeComponent2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testNegativeComponent2"
"testPower","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testPower"
"testSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testSingular"
"testCopySubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testCopySubMatrix"
"testNegativeSecondRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testNegativeSecondRow"
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testPremultiply"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testSolve"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testDimensions"
"testNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testNonDefaultSetting"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testPremultiplyVector"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testSolveDimensionErrors"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testEqualsAndHashCode"
"testParseIgnoredWhitespace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseIgnoredWhitespace"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testScalarAdd"
"testSolveSingularityErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testSolveSingularityErrors"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testExamples"
"testParseManyComponents","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseManyComponents"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSerial"
"testThreshold","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{LUSolverTest.java[LUSolverTest~testThreshold"
"testGetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetColumn"
"testParseNan","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNan"
"testSetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetColumn"
"InverseHilbertMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{InverseHilbertMatrix.java[InverseHilbertMatrix"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetColumnMatrix"
"testParseNegativeAll","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNegativeAll"
"InverseHilbertMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{InverseHilbertMatrix.java[InverseHilbertMatrix~InverseHilbertMatrix~I"
"testSetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetColumnMatrix"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetColumnVector"
"testParseNegativeComponent","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNegativeComponent"
"n",\N
"testSetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetColumnVector"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetEntry"
"getColumnDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{InverseHilbertMatrix.java[InverseHilbertMatrix~getColumnDimension"
"testParseNegativeInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNegativeInfinity"
"testSetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetRow"
"getEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{InverseHilbertMatrix.java[InverseHilbertMatrix~getEntry~I~I"
"testGetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetRow"
"testParseNoComponents","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNoComponents"
"testSetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetRowMatrix"
"i",\N
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetRowMatrix"
"testParseNonDefaultSetting","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseNonDefaultSetting"
"testSetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetRowVector"
"j",\N
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetRowVector"
"testParsePositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParsePositiveInfinity"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testSetSubMatrix"
"getRowDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{InverseHilbertMatrix.java[InverseHilbertMatrix~getRowDimension"
"testGetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetSubMatrix"
"testParseSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseSimpleNoDecimals"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testToString"
"CholeskySolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskySolverTest.java[CholeskySolverTest"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testGetVectors"
"testDeterminant","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskySolverTest.java[CholeskySolverTest~testDeterminant"
"testParseSimpleWithClosingRowSeparator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseSimpleWithClosingRowSeparator"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testTrace"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testMath209"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskySolverTest.java[CholeskySolverTest~testSolve"
"testParseSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseSimpleWithDecimals"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testTranspose"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testMultiply"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{CholeskySolverTest.java[CholeskySolverTest~testSolveDimensionErrors"
"testParseSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseSimpleWithDecimalsTrunc"
"testWalk","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest~testWalk"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testMultiply2"
"UnmodifiableArrayRealVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{UnmodifiableArrayRealVectorTest.java[UnmodifiableArrayRealVectorTest"
"testParseZeroComponent","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testParseZeroComponent"
"bigSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^bigSingular"
"EigenDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testOperate"
"testPositiveInfinity","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testPositiveInfinity"
"detData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^detData"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~setUp"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testPlusMinus"
"testSimpleNoDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testSimpleNoDecimals"
"detData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^detData2"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~tearDown"
"testPower","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testPower"
"testSimpleWithDecimals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testSimpleWithDecimals"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^entryTolerance"
"testAEqualVDVt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testAEqualVDVt"
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testPremultiply"
"testSimpleWithDecimalsTrunc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealMatrixFormatAbstractTest.java[RealMatrixFormatAbstractTest~testSimpleWithDecimalsTrunc"
"testBigMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testBigMatrix"
"id","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^id"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testPremultiplyVector"
"MatrixDimensionMismatchExceptionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixDimensionMismatchExceptionTest.java[MatrixDimensionMismatchExceptionTest"
"luData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^luData"
"testDiagonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDiagonal"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{MatrixDimensionMismatchExceptionTest.java[MatrixDimensionMismatchExceptionTest~testAccessors"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testScalarAdd"
"luDataLUDecomposition","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^luDataLUDecomposition"
"testDimension1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension1"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSerial"
"ArrayFieldVectorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest"
"testDimension2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension2"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^normTolerance"
"testBasicFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testBasicFunctions"
"testSetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetColumn"
"testDimension3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension3"
"powerTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^powerTolerance"
"testConstructors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testConstructors"
"testSetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetColumnMatrix"
"testDimension3MultipleRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension3MultipleRoot"
"preMultTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^preMultTest"
"testDataInOut","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testDataInOut"
"testSetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetColumnVector"
"testDimension4WithSplit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension4WithSplit"
"singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^singular"
"testMapFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testMapFunctions"
"testSetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetRow"
"testDimension4WithoutSplit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimension4WithoutSplit"
"subColumn1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subColumn1"
"testMisc","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testMisc"
"testSetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetRowMatrix"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDimensions"
"subColumn3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subColumn3"
"testOuterProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testOuterProduct"
"testSetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetRowVector"
"testDistinctEigenvalues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testDistinctEigenvalues"
"subRow0","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRow0"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testSerial"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testSetSubMatrix"
"testEigenvalues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testEigenvalues"
"subRow3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRow3"
"testWalkInDefaultOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderChangingVisitor1"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testToString"
"testEigenvectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testEigenvectors"
"subRows00Cols33","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows00Cols33"
"testWalkInDefaultOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderChangingVisitor2"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testTrace"
"testMath1051","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testMath1051"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testTranspose"
"subRows01Cols23","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows01Cols23"
"testWalkInDefaultOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderChangingVisitor3"
"testMath308","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testMath308"
"testWalk","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest~testWalk"
"subRows02Cols13","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows02Cols13"
"testWalkInDefaultOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderPreservingVisitor1"
"testMath848","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testMath848"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest^entryTolerance"
"subRows03Cols12","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows03Cols12"
"testWalkInDefaultOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderPreservingVisitor2"
"testMathpbx02","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testMathpbx02"
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest^normTolerance"
"subRows03Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows03Cols123"
"testWalkInDefaultOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInDefaultOrderPreservingVisitor3"
"testMathpbx03","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testMathpbx03"
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest[SetVisitor"
"subRows20Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows20Cols123"
"testWalkInOptimizedOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderChangingVisitor1"
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest[SetVisitor~SetVisitor"
"testNormalDistributionUnsymmetricMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testNormalDistributionUnsymmetricMatrix"
"subRows23Cols00","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows23Cols00"
"testWalkInOptimizedOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderChangingVisitor2"
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest[GetVisitor"
"testRandomUnsymmetricMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testRandomUnsymmetricMatrix"
"subRows31Cols31","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subRows31Cols31"
"testWalkInOptimizedOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderChangingVisitor3"
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest[GetVisitor~GetVisitor"
"testRepeatedEigenvalue","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testRepeatedEigenvalue"
"subTestData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^subTestData"
"testWalkInOptimizedOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor1"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{FieldMatrixImplTest.java[FieldMatrixImplTest[GetVisitor~getCount"
"testSquareRoot","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testSquareRoot"
"testData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testData"
"testWalkInOptimizedOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor2"
"SchurTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest"
"testSquareRootNonPositiveDefinite","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testSquareRootNonPositiveDefinite"
"testAEqualPTPt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testAEqualPTPt"
"testData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testData2"
"testWalkInOptimizedOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testWalkInOptimizedOrderPreservingVisitor3"
"testSquareRootNonSymmetric","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testSquareRootNonSymmetric"
"testMath848","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testMath848"
"testData2T","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testData2T"
"testZeroVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest~testZeroVectors"
"testSymmetric","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testSymmetric"
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testNonSquare"
"testDataCol3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataCol3"
"FieldVectorTestImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl"
"FieldVectorTestImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~FieldVectorTestImpl~\\[QT;"
"testTinyValues","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testTinyValues"
"testPOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testPOrthogonal"
"testDataInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataInv"
"d",\N
"testTridiagonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testTridiagonal"
"testPTOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testPTOrthogonal"
"testDataLU","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataLU"
"dotProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~dotProduct~\\[QT;"
"testUnsymmetric","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testUnsymmetric"
"testRandomData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testRandomData"
"testDataMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataMinus"
"v",\N
"testVOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testVOrthogonal"
"testRandomDataNormalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testRandomDataNormalDistribution"
"testDataPlus2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataPlus2"
"getData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~getData"
"testZeroDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{EigenDecompositionTest.java[EigenDecompositionTest~testZeroDivide"
"testSchurForm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SchurTransformerTest.java[SchurTransformerTest~testSchurForm"
"testDataPlusInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataPlusInv"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~getDimension"
"SingularValueSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest"
"OpenMapRealMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{OpenMapRealMatrixTest.java[OpenMapRealMatrixTest"
"testDataRow1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testDataRow1"
"getEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~getEntry~I"
"testConditionNumber","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testConditionNumber"
"testMath679","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{OpenMapRealMatrixTest.java[OpenMapRealMatrixTest~testMath679"
"index",\N
"testVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testVector"
"testLeastSquareSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testLeastSquareSolve"
"testMath870","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{OpenMapRealMatrixTest.java[OpenMapRealMatrixTest~testMath870"
"set","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~set~QT;"
"testVector2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest^testVector2"
"testMath320B","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testMath320B"
"RRQRDecompositionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest"
"value",\N
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest[SetVisitor"
"testAPEqualQR","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testAPEqualQR"
"setEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~setEntry~I~QT;"
"testSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testSingular"
"visit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest[SetVisitor~visit~I~I~D"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testDimensions"
"index",\N
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testSolve"
"i",\N
"value",\N
"testHTrapezoidal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testHTrapezoidal"
"j",\N
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{SingularValueSolverTest.java[SingularValueSolverTest~testSolveDimensionErrors"
"setSubVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~setSubVector~I~\\[QT;"
"value",\N
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testNonInvertible"
"HessenbergTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest"
"index",\N
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest[GetVisitor"
"testQOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testQOrthogonal"
"testAEqualPHPt","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testAEqualPHPt"
"v",\N
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest[GetVisitor~getCount"
"toArray","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl~toArray"
"testRUpperTriangular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testRUpperTriangular"
"testHessenbergForm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testHessenbergForm"
"visit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{Array2DRowRealMatrixTest.java[Array2DRowRealMatrixTest[GetVisitor~visit~I~I~D"
"data","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{ArrayFieldVectorTest.java[ArrayFieldVectorTest[FieldVectorTestImpl^data"
"testMatricesValues3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testMatricesValues3"
"testRank","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRDecompositionTest.java[RRQRDecompositionTest~testRank"
"i",\N
"j",\N
"testMatricesValues5","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testMatricesValues5"
"BlockRealMatrixTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest"
"HilbertMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HilbertMatrix.java[HilbertMatrix"
"value",\N
"HilbertMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HilbertMatrix.java[HilbertMatrix~HilbertMatrix~I"
"assertClose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~assertClose~\\[D~\\[D~D"
"testNonSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testNonSquare"
"RealVectorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest"
"m",\N
"n",\N
"RealVectorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~RealVectorAbstractTest"
"testPOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testPOrthogonal"
"n",\N
"getColumnDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HilbertMatrix.java[HilbertMatrix~getColumnDimension"
"testPTOrthogonal","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testPTOrthogonal"
"getPreferredEntryValue","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~getPreferredEntryValue"
"tolerance",\N
"getRowDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HilbertMatrix.java[HilbertMatrix~getRowDimension"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testAdd"
"testAddDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddDimensionMismatch"
"testRandomData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testRandomData"
"RRQRSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest"
"testAddFail","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testAddFail"
"testAddMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddMixedTypes"
"testRandomDataNormalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{HessenbergTransformerTest.java[HessenbergTransformerTest~testRandomDataNormalDistribution"
"testOverdetermined","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testOverdetermined"
"testCopyFunctions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testCopyFunctions"
"testAddSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddSameType"
"MultiKMeansPlusPlusClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClustererTest.java[MultiKMeansPlusPlusClustererTest"
"testRank","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testRank"
"dimension2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{MultiKMeansPlusPlusClustererTest.java[MultiKMeansPlusPlusClustererTest~dimension2"
"testCopySubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testCopySubMatrix"
"testAddToEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddToEntry"
"testSolve","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testSolve"
"KMeansPlusPlusClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest"
"testDimensions","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testDimensions"
"testAddToEntryInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddToEntryInvalidIndex1"
"testSolveDimensionErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testSolveDimensionErrors"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~setUp"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testEqualsAndHashCode"
"testAddToEntryInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAddToEntryInvalidIndex2"
"testSolveRankErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testSolveRankErrors"
"testCertainSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testCertainSpace"
"testExamples","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testExamples"
"testAppendScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAppendScalar"
"testUnderdetermined","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest~testUnderdetermined"
"testPerformClusterAnalysisDegenerate","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testPerformClusterAnalysisDegenerate"
"testFrobeniusNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testFrobeniusNorm"
"testAppendVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testAppendVector"
"testData3x3NonSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest^testData3x3NonSingular"
"testPerformClusterAnalysisToManyClusters","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testPerformClusterAnalysisToManyClusters"
"testGetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetColumn"
"testCombineDimensionMismatchMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineDimensionMismatchMixedTypes"
"testData3x3Singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest^testData3x3Singular"
"testSmallDistances","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testSmallDistances"
"testGetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetColumnMatrix"
"testCombineDimensionMismatchSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineDimensionMismatchSameType"
"testData3x4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest^testData3x4"
"CloseDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseDistance"
"testGetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetColumnVector"
"testCombineMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineMixedTypes"
"testData4x3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RRQRSolverTest.java[RRQRSolverTest^testData4x3"
"compute","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseDistance~compute~\\[D~\\[D"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetEntry"
"testCombineSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineSameType"
"a",\N
"FuzzyKMeansClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest"
"b",\N
"testGetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetRow"
"testCluster","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testCluster"
"testCombineToSelfDimensionMismatchMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineToSelfDimensionMismatchMixedTypes"
"DBSCANClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest"
"testGetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetRowMatrix"
"testClusterCenterEqualsPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testClusterCenterEqualsPoints"
"testCombineToSelfDimensionMismatchSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineToSelfDimensionMismatchSameType"
"testCluster","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testCluster"
"testGetters","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testGetters"
"testGetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetRowVector"
"testCombineToSelfMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineToSelfMixedTypes"
"testGetEps","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testGetEps"
"testGetSetColumnLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetColumnLarge"
"testNullDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testNullDataset"
"testCombineToSelfSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCombineToSelfSameType"
"testGetMinPts","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testGetMinPts"
"testSingleCluster","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testSingleCluster"
"testGetSetColumnMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetColumnMatrixLarge"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCopy"
"testNegativeEps","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNegativeEps"
"testGetSetColumnVectorLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetColumnVectorLarge"
"testTooSmallFuzzynessFactor","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{FuzzyKMeansClustererTest.java[FuzzyKMeansClustererTest~testTooSmallFuzzynessFactor"
"testCosineDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCosineDimensionMismatch"
"testNegativeMinPts","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNegativeMinPts"
"testGetSetMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetMatrixLarge"
"SumOfClusterVariancesTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering.evaluation{SumOfClusterVariancesTest.java[SumOfClusterVariancesTest"
"testCosineLeftNullVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCosineLeftNullVector"
"testNullDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNullDataset"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering.evaluation{SumOfClusterVariancesTest.java[SumOfClusterVariancesTest~setUp"
"testGetSetRowLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetRowLarge"
"testCosineMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCosineMixedTypes"
"testSingleLink","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testSingleLink"
"testOrdering","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering.evaluation{SumOfClusterVariancesTest.java[SumOfClusterVariancesTest~testOrdering"
"testGetSetRowMatrixLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetRowMatrixLarge"
"testCosineRightNullVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCosineRightNullVector"
"ChebyshevDistanceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ChebyshevDistanceTest.java[ChebyshevDistanceTest"
"testScore","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.clustering.evaluation{SumOfClusterVariancesTest.java[SumOfClusterVariancesTest~testScore"
"testCosineSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testCosineSameType"
"testGetSetRowVectorLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSetRowVectorLarge"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ChebyshevDistanceTest.java[ChebyshevDistanceTest~test"
"ManhattanDistanceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ManhattanDistanceTest.java[ManhattanDistanceTest"
"testDotProductDimensionMismatchMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testDotProductDimensionMismatchMixedTypes"
"testGetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetSubMatrix"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ChebyshevDistanceTest.java[ChebyshevDistanceTest~testZero"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ManhattanDistanceTest.java[ManhattanDistanceTest~test"
"testDotProductDimensionMismatchSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testDotProductDimensionMismatchSameType"
"testGetVectors","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testGetVectors"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{ManhattanDistanceTest.java[ManhattanDistanceTest~testZero"
"EarthMoversDistanceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest~test"
"testDotProductMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testDotProductMixedTypes"
"testMath209","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testMath209"
"EuclideanDistanceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EuclideanDistanceTest.java[EuclideanDistanceTest"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest~testZero"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EuclideanDistanceTest.java[EuclideanDistanceTest~test"
"testDotProductSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testDotProductSameType"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testMultiply"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EuclideanDistanceTest.java[EuclideanDistanceTest~testZero"
"testZero2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest~testZero2"
"testEbeDivideDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeDivideDimensionMismatch"
"testMultiply2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testMultiply2"
"a","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest^a"
"CanberraDistanceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{CanberraDistanceTest.java[CanberraDistanceTest"
"testEbeDivideMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeDivideMixedTypes"
"testNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testNorm"
"test","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{CanberraDistanceTest.java[CanberraDistanceTest~test"
"b","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{EarthMoversDistanceTest.java[EarthMoversDistanceTest^b"
"testEbeDivideSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeDivideSameType"
"testOperate","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testOperate"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{CanberraDistanceTest.java[CanberraDistanceTest~testZero"
"testEbeMultiplyDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeMultiplyDimensionMismatch"
"NetworkTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest"
"testOperateLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testOperateLarge"
"testZero2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.distance{CanberraDistanceTest.java[CanberraDistanceTest~testZero2"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testCopy"
"testEbeMultiplyMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeMultiplyMixedTypes"
"testOperatePremultiplyLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testOperatePremultiplyLarge"
"MapUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{MapUtilsTest.java[MapUtilsTest"
"testDeleteLink","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testDeleteLink"
"testEbeMultiplySameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEbeMultiplySameType"
"testPlusMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testPlusMinus"
"testFindClosestNeuron","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{MapUtilsTest.java[MapUtilsTest~testFindClosestNeuron"
"testDeleteNeuron","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testDeleteNeuron"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testEquals"
"testSort","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{MapUtilsTest.java[MapUtilsTest~testSort"
"testPremultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testPremultiply"
"testGetFeaturesSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testGetFeaturesSize"
"testGetDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetDimension"
"testPremultiplyVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testPremultiplyVector"
"OffsetFeatureInitializer","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{OffsetFeatureInitializer.java[OffsetFeatureInitializer"
"testIterationOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testIterationOrder"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{OffsetFeatureInitializer.java[OffsetFeatureInitializer~value"
"testGetDistanceDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetDistanceDimensionMismatch"
"testScalarAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testScalarAdd"
"testSerialize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NetworkTest.java[NetworkTest~testSerialize"
"NeuronTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest"
"testGetDistanceMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetDistanceMixedTypes"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSerial"
"testCompareAndSetFeatures","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testCompareAndSetFeatures"
"NeuronStringTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronStringTest.java[NeuronStringTest"
"testGetDistanceSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetDistanceSameType"
"testSetColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetColumn"
"testCircleNetwork","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronStringTest.java[NeuronStringTest~testCircleNetwork"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testCopy"
"testGetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetEntry"
"testSetColumnMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetColumnMatrix"
"testGetNeighboursWithExclude","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronStringTest.java[NeuronStringTest~testGetNeighboursWithExclude"
"testGetFeatures","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testGetFeatures"
"testGetEntryInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetEntryInvalidIndex1"
"testSetColumnVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetColumnVector"
"testSegmentNetwork","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronStringTest.java[NeuronStringTest~testSegmentNetwork"
"testGetIdentifier","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testGetIdentifier"
"testGetEntryInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetEntryInvalidIndex2"
"testSetRow","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetRow"
"testSerialize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.oned{NeuronStringTest.java[NeuronStringTest~testSerialize"
"testGetSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testGetSize"
"testGetL1DistanceDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetL1DistanceDimensionMismatch"
"testSetRowMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetRowMatrix"
"NeighbourhoodSizeFunctionFactoryTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest"
"testSerialize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet{NeuronTest.java[NeuronTest~testSerialize"
"testGetL1DistanceMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetL1DistanceMixedTypes"
"testExponentialDecayPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testExponentialDecayPrecondition1"
"testSetRowVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetRowVector"
"KohonenUpdateActionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenUpdateActionTest.java[KohonenUpdateActionTest"
"testGetL1DistanceSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetL1DistanceSameType"
"testExponentialDecayPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testExponentialDecayPrecondition2"
"testSetSubMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSetSubMatrix"
"testUpdate","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenUpdateActionTest.java[KohonenUpdateActionTest~testUpdate"
"testExponentialDecayPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testExponentialDecayPrecondition3"
"testGetL1Norm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetL1Norm"
"testSeveralBlocks","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testSeveralBlocks"
"LearningFactorFunctionFactoryTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest"
"testExponentialDecayPrecondition0","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayPrecondition0"
"testExponentialDecayPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testExponentialDecayPrecondition4"
"testGetLInfDistanceDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetLInfDistanceDimensionMismatch"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testToString"
"testExponentialDecayPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayPrecondition1"
"testGetLInfDistanceMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetLInfDistanceMixedTypes"
"testExponentialDecayTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testExponentialDecayTrivial"
"testTrace","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testTrace"
"testExponentialDecayPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayPrecondition2"
"testGetLInfDistanceSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetLInfDistanceSameType"
"testQuasiSigmoidDecayPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testQuasiSigmoidDecayPrecondition1"
"testTranspose","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testTranspose"
"testExponentialDecayPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayPrecondition3"
"testGetLInfNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetLInfNorm"
"testQuasiSigmoidDecayPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testQuasiSigmoidDecayPrecondition3"
"testWalk","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest~testWalk"
"testExponentialDecayPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayPrecondition4"
"testQuasiSigmoidDecayPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testQuasiSigmoidDecayPrecondition4"
"testGetNorm","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetNorm"
"bigSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^bigSingular"
"testExponentialDecayTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testExponentialDecayTrivial"
"testQuasiSigmoidDecayTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{NeighbourhoodSizeFunctionFactoryTest.java[NeighbourhoodSizeFunctionFactoryTest~testQuasiSigmoidDecayTrivial"
"testGetSubVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetSubVector"
"detData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^detData"
"testQuasiSigmoidDecayPrecondition0","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testQuasiSigmoidDecayPrecondition0"
"testGetSubVectorInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetSubVectorInvalidIndex1"
"KohonenTrainingTaskTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenTrainingTaskTest.java[KohonenTrainingTaskTest"
"detData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^detData2"
"testTravellerSalesmanSquareTourParallelSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenTrainingTaskTest.java[KohonenTrainingTaskTest~testTravellerSalesmanSquareTourParallelSolver"
"testQuasiSigmoidDecayPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testQuasiSigmoidDecayPrecondition1"
"testGetSubVectorInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetSubVectorInvalidIndex2"
"entryTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^entryTolerance"
"testTravellerSalesmanSquareTourSequentialSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{KohonenTrainingTaskTest.java[KohonenTrainingTaskTest~testTravellerSalesmanSquareTourSequentialSolver"
"testQuasiSigmoidDecayPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testQuasiSigmoidDecayPrecondition3"
"testGetSubVectorInvalidIndex3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetSubVectorInvalidIndex3"
"id","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^id"
"testQuasiSigmoidDecayPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testQuasiSigmoidDecayPrecondition4"
"TravellingSalesmanSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver"
"testGetSubVectorInvalidIndex4","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testGetSubVectorInvalidIndex4"
"luData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^luData"
"TravellingSalesmanSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~TravellingSalesmanSolver~\\[QCity;~D"
"testQuasiSigmoidDecayTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{LearningFactorFunctionFactoryTest.java[LearningFactorFunctionFactoryTest~testQuasiSigmoidDecayTrivial"
"testIsInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testIsInfinite"
"luDataLUDecomposition","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^luDataLUDecomposition"
"cityList",\N
"ExponentialDecayFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest"
"testIsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testIsNaN"
"numNeuronsPerCity",\N
"normTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^normTolerance"
"testPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest~testPrecondition1"
"TravellingSalesmanSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~TravellingSalesmanSolver~\\[QCity;~D~J"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testIterator"
"preMultTest","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^preMultTest"
"testPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest~testPrecondition2"
"cityList",\N
"testMap","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMap"
"singular","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^singular"
"numNeuronsPerCity",\N
"testPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest~testPrecondition3"
"testMapAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapAdd"
"seed",\N
"subColumn1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subColumn1"
"testPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest~testPrecondition4"
"createParallelTasks","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~createParallelTasks~I~J"
"testMapAddToSelf","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapAddToSelf"
"subColumn3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subColumn3"
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{ExponentialDecayFunctionTest.java[ExponentialDecayFunctionTest~testTrivial"
"numTasks",\N
"testMapDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapDivide"
"subRow0","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRow0"
"numSamplesPerTask",\N
"QuasiSigmoidDecayFunctionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunctionTest.java[QuasiSigmoidDecayFunctionTest"
"testMapDivideToSelf","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapDivideToSelf"
"subRow3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRow3"
"createSequentialTask","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~createSequentialTask~J"
"testPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunctionTest.java[QuasiSigmoidDecayFunctionTest~testPrecondition1"
"testMapMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapMultiply"
"numSamples",\N
"subRows00Cols33","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows00Cols33"
"testPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunctionTest.java[QuasiSigmoidDecayFunctionTest~testPrecondition3"
"getCityList","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~getCityList"
"testMapMultiplyToSelf","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapMultiplyToSelf"
"subRows01Cols23","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows01Cols23"
"testPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunctionTest.java[QuasiSigmoidDecayFunctionTest~testPrecondition4"
"getClosestCity","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~getClosestCity~D~D"
"testMapSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapSubtract"
"subRows02Cols13","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows02Cols13"
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm.util{QuasiSigmoidDecayFunctionTest.java[QuasiSigmoidDecayFunctionTest~testTrivial"
"x",\N
"testMapSubtractToSelf","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapSubtractToSelf"
"subRows03Cols12","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows03Cols12"
"NeuronSquareMesh2DTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest"
"y",\N
"testMapToSelf","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMapToSelf"
"test2x2Network","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test2x2Network"
"subRows03Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows03Cols123"
"getCoordinatesList","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~getCoordinatesList"
"testMinMax","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testMinMax"
"test2x2Network2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test2x2Network2"
"subRows20Cols123","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows20Cols123"
"getUpdateRatio","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[TravellingSalesmanSolver~getUpdateRatio"
"test3x2CylinderNetwork","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x2CylinderNetwork"
"testOuterProductMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testOuterProductMixedTypes"
"subRows23Cols00","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows23Cols00"
"City","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City"
"City","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~City~QString;~D~D"
"testOuterProductSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testOuterProductSameType"
"test3x2CylinderNetwork2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x2CylinderNetwork2"
"subRows31Cols31","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subRows31Cols31"
"name",\N
"test3x3CylinderNetwork","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x3CylinderNetwork"
"testProjectionDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testProjectionDimensionMismatch"
"subTestData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^subTestData"
"x",\N
"test3x3CylinderNetwork2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x3CylinderNetwork2"
"testProjectionMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testProjectionMixedTypes"
"y",\N
"testData","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testData"
"distance","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~distance~D~D"
"test3x3TorusNetwork","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x3TorusNetwork"
"testProjectionNullVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testProjectionNullVector"
"testData2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testData2"
"x",\N
"testProjectionSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testProjectionSameType"
"test3x3TorusNetwork2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~test3x3TorusNetwork2"
"testData2T","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testData2T"
"y",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSerial"
"testConcentricNeighbourhood","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testConcentricNeighbourhood"
"testDataCol3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataCol3"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~equals~QObject;"
"testSet","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSet"
"testConcentricNeighbourhood2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testConcentricNeighbourhood2"
"testDataInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataInv"
"o",\N
"getCoordinates","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~getCoordinates"
"testGetFeaturesSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testGetFeaturesSize"
"testSetEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetEntry"
"testDataLU","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataLU"
"getName","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~getName"
"testGetNeuron","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testGetNeuron"
"testSetEntryInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetEntryInvalidIndex1"
"testDataMinus","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataMinus"
"hashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City~hashCode"
"testGetNeuronAlongDirection","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testGetNeuronAlongDirection"
"testSetEntryInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetEntryInvalidIndex2"
"testDataPlus2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataPlus2"
"name","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City^name"
"testGetNeuronAlongDirectionWrappedMap","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testGetNeuronAlongDirectionWrappedMap"
"testSetSubVectorInvalidIndex1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetSubVectorInvalidIndex1"
"testDataPlusInv","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataPlusInv"
"x","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City^x"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testIterator"
"testSetSubVectorInvalidIndex2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetSubVectorInvalidIndex2"
"testDataRow1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testDataRow1"
"y","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.sofm{TravellingSalesmanSolver.java[City^y"
"testMinimalNetworkSize1","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testMinimalNetworkSize1"
"testSetSubVectorInvalidIndex3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetSubVectorInvalidIndex3"
"testVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testVector"
"testSetSubVectorMixedType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetSubVectorMixedType"
"testMinimalNetworkSize2","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testMinimalNetworkSize2"
"LocationFinderTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinderTest.java[LocationFinderTest"
"testVector2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest^testVector2"
"test2x2Network","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod.util{LocationFinderTest.java[LocationFinderTest~test2x2Network"
"testSerialize","=mathmain3.6/src<test.java.org.apache.commons.math3.ml.neuralnet.twod{NeuronSquareMesh2DTest.java[NeuronSquareMesh2DTest~testSerialize"
"testSetSubVectorSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSetSubVectorSameType"
"SetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest[SetVisitor"
"TestFieldProblem3","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem3.java[TestFieldProblem3"
"visit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest[SetVisitor~visit~I~I~D"
"testSubtractDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSubtractDimensionMismatch"
"TestProblem2","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem2.java[TestProblem2"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem3.java[TestFieldProblem3~computeTheoreticalState~QT;"
"TestProblem2","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem2.java[TestProblem2~TestProblem2"
"i",\N
"testSubtractMixedTypes","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSubtractMixedTypes"
"t",\N
"j",\N
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem2.java[TestProblem2~computeTheoreticalState~D"
"testSubtractSameType","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testSubtractSameType"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem3.java[TestFieldProblem3~doComputeDerivatives~QT;~\\[QT;"
"value",\N
"t",\N
"GetVisitor","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest[GetVisitor"
"t",\N
"testToArray","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testToArray"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem2.java[TestProblem2~doComputeDerivatives~D~\\[D~\\[D"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest[GetVisitor~getCount"
"y",\N
"testUnitVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testUnitVector"
"t",\N
"e","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem3.java[TestFieldProblem3^e"
"visit","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{BlockRealMatrixTest.java[BlockRealMatrixTest[GetVisitor~visit~I~I~D"
"y",\N
"testUnitVectorNullVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testUnitVectorNullVector"
"TestProblem4","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4"
"i",\N
"yDot",\N
"TestProblem4","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4~TestProblem4"
"testUnitize","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testUnitize"
"j",\N
"TestFieldProblem1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem1.java[TestFieldProblem1"
"value",\N
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem1.java[TestFieldProblem1~computeTheoreticalState~QT;"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4~computeTheoreticalState~D"
"testUnitizeNullVector","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testUnitizeNullVector"
"TestProblemAbstract","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract"
"t",\N
"t",\N
"testWalkInDefaultOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderChangingVisitor1"
"TestProblemAbstract","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~TestProblemAbstract"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4~doComputeDerivatives~D~\\[D~\\[D"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem1.java[TestFieldProblem1~doComputeDerivatives~QT;~\\[QT;"
"testWalkInDefaultOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderChangingVisitor2"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~computeDerivatives~D~\\[D~\\[D"
"t",\N
"t",\N
"testWalkInDefaultOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderChangingVisitor3"
"t",\N
"y",\N
"y",\N
"y",\N
"yDot",\N
"testWalkInDefaultOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderPreservingVisitor1"
"JacobianMatricesTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest"
"yDot",\N
"getTheoreticalEventsTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4~getTheoreticalEventsTimes"
"testWrongParameterName","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest~testWrongParameterName"
"testWalkInDefaultOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderPreservingVisitor2"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~computeTheoreticalState~D"
"Bounce","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Bounce"
"Brusselator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator"
"testWalkInDefaultOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInDefaultOrderPreservingVisitor3"
"t",\N
"Bounce","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Bounce~Bounce"
"Brusselator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~Brusselator~D"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~doComputeDerivatives~D~\\[D~\\[D"
"testWalkInOptimizedOrderChangingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderChangingVisitor1"
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Bounce~g~D~\\[D"
"b",\N
"t",\N
"testWalkInOptimizedOrderChangingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderChangingVisitor2"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~computeDerivatives~D~\\[D~\\[D"
"t",\N
"y",\N
"y",\N
"testWalkInOptimizedOrderChangingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderChangingVisitor3"
"t",\N
"yDot",\N
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Bounce~init~D~\\[D~D"
"y",\N
"getCalls","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getCalls"
"testWalkInOptimizedOrderPreservingVisitor1","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderPreservingVisitor1"
"yDot",\N
"t0",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getDimension"
"testWalkInOptimizedOrderPreservingVisitor2","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderPreservingVisitor2"
"computeMainStateJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~computeMainStateJacobian~D~\\[D~\\[D~\\[\\[D"
"y0",\N
"getErrorScale","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getErrorScale"
"t",\N
"testWalkInOptimizedOrderPreservingVisitor3","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest~testWalkInOptimizedOrderPreservingVisitor3"
"t",\N
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Bounce~resetState~D~\\[D"
"y",\N
"getFinalTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getFinalTime"
"RealVectorTestImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl"
"yDot",\N
"t",\N
"RealVectorTestImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~RealVectorTestImpl~\\[D"
"getInitialState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getInitialState"
"dFdY",\N
"y",\N
"d",\N
"getInitialTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getInitialTime"
"computeParameterJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~computeParameterJacobian~D~\\[D~\\[D~QString;~\\[D"
"Stop","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Stop"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~getDimension"
"Stop","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Stop~Stop"
"t",\N
"getTheoreticalEventsTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~getTheoreticalEventsTimes"
"getEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~getEntry~I"
"y",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Stop~g~D~\\[D"
"setErrorScale","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~setErrorScale~\\[D"
"yDot",\N
"index",\N
"t",\N
"errorScale",\N
"paramName",\N
"isInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~isInfinite"
"y",\N
"dFdP",\N
"setFinalConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~setFinalConditions~D"
"isNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~isNaN"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Stop~init~D~\\[D~D"
"dYdP0","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~dYdP0"
"t1",\N
"t0",\N
"setEntry","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl~setEntry~I~D"
"setInitialConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemAbstract.java[TestProblemAbstract~setInitialConditions~D~\\[D"
"dYdP1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~dYdP1"
"y0",\N
"index",\N
"t0",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator~getDimension"
"t",\N
"value",\N
"y0",\N
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem4.java[TestProblem4[Stop~resetState~D~\\[D"
"B","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Brusselator^B"
"data","=mathmain3.6/src<test.java.org.apache.commons.math3.linear{RealVectorAbstractTest.java[RealVectorAbstractTest[RealVectorTestImpl^data"
"TestFieldProblemAbstract","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract"
"t",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~computeDerivatives~QT;~\\[QT;"
"ParamBrusselator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator"
"ContinuousOutputFieldModelTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest"
"y",\N
"ParamBrusselator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator~ParamBrusselator~D"
"checkValue","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest~checkValue~D~D"
"t",\N
"TestFieldProblem5","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem5.java[TestFieldProblem5"
"y",\N
"b",\N
"value",\N
"FieldExpandableODETest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~computeTheoreticalState~QT;"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator~computeDerivatives~D~\\[D~\\[D"
"reference",\N
"testExtractDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testExtractDimensionMismatch"
"testBoundaries","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest~testBoundaries"
"t",\N
"t",\N
"testInsertTooShortComplete","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testInsertTooShortComplete"
"y",\N
"convert","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~convert~D"
"testErrorConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest~testErrorConditions"
"testInsertWrongEquationData","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testInsertWrongEquationData"
"yDot",\N
"d",\N
"testModelsMerging","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest~testModelsMerging"
"dYdP0","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator~dYdP0"
"testMainAndSecondary","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testMainAndSecondary"
"convert","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~convert~\\[D"
"testRandomAccess","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputFieldModelTest.java[ContinuousOutputFieldModelTest~testRandomAccess"
"dYdP1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator~dYdP1"
"testMap","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testMap"
"elements",\N
"TestFieldProblem2","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem2.java[TestFieldProblem2"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~doComputeDerivatives~QT;~\\[QT;"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator~getDimension"
"testNegativeIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testNegativeIndex"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem2.java[TestFieldProblem2~computeTheoreticalState~QT;"
"t",\N
"B","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParamBrusselator^B"
"testOnlyMainEquation","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testOnlyMainEquation"
"t",\N
"y",\N
"Circle","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle"
"testTooLargeIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest~testTooLargeIndex"
"getCalls","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~getCalls"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem2.java[TestFieldProblem2~doComputeDerivatives~QT;~\\[QT;"
"Circle","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~Circle~\\[D~D~D~D"
"Linear","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~getDimension"
"y0",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear~computeDerivatives~QT;~\\[QT;"
"y",\N
"cx",\N
"getErrorScale","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~getErrorScale"
"TestProblem5","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem5.java[TestProblem5"
"t",\N
"cy",\N
"TestProblem5","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem5.java[TestProblem5~TestProblem5"
"getFinalTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~getFinalTime"
"y",\N
"omega",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear~computeDerivatives~QT;~\\[QT;~\\[QT;~\\[QT;"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~computeDerivatives~D~\\[D~\\[D"
"getTheoreticalEventsTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~getTheoreticalEventsTimes"
"TestProblemHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler"
"t",\N
"getCalls","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~getCalls"
"t",\N
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~init~QT;~\\[QT;~QT;"
"primary",\N
"y",\N
"getLastError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~getLastError"
"primaryDot",\N
"t0",\N
"yDot",\N
"secondary",\N
"y0",\N
"getLastTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~getLastTime"
"computeMainStateJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~computeMainStateJacobian~D~\\[D~\\[D~\\[\\[D"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear~getDimension"
"getMaximalTimeError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~getMaximalTimeError"
"t",\N
"setErrorScale","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~setErrorScale~\\[QT;"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear~init~QT;~\\[QT;~QT;"
"y",\N
"getMaximalValueError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~getMaximalValueError"
"errorScale",\N
"yDot",\N
"t0",\N
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblemHandler.java[TestProblemHandler~init~D~\\[D~D"
"setFinalConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~setFinalConditions~QT;"
"dFdY",\N
"y0",\N
"exactDyDcx","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~exactDyDcx~D"
"t1",\N
"t0",\N
"finalTime",\N
"y0",\N
"setInitialConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemAbstract.java[TestFieldProblemAbstract~setInitialConditions~QT;~\\[QT;"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FieldExpandableODETest.java[FieldExpandableODETest[Linear~init~QT;~\\[QT;~\\[QT;~QT;"
"t",\N
"t",\N
"exactDyDcy","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~exactDyDcy~D"
"t0",\N
"t0",\N
"TestProblem3","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3"
"y0",\N
"primary0",\N
"t",\N
"TestProblem3","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3~TestProblem3~D"
"secondary0",\N
"ContinuousOutputModelTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest"
"exactDyDom","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~exactDyDom~D"
"finalTime",\N
"ContinuousOutputModelTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest~ContinuousOutputModelTest"
"e",\N
"t",\N
"TestProblem6","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem6.java[TestProblem6"
"TestProblem3","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3~TestProblem3"
"checkValue","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest~checkValue~D~D"
"exactDyDy0","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~exactDyDy0~D"
"TestProblem6","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem6.java[TestProblem6~TestProblem6"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3~computeTheoreticalState~D"
"value",\N
"t",\N
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem6.java[TestProblem6~computeTheoreticalState~D"
"reference",\N
"t",\N
"exactY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~exactY~D"
"t",\N
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest~setUp"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3~doComputeDerivatives~D~\\[D~\\[D"
"t",\N
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem6.java[TestProblem6~doComputeDerivatives~D~\\[D~\\[D"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest~tearDown"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle~getDimension"
"t",\N
"y",\N
"pb","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{ContinuousOutputModelTest.java[ContinuousOutputModelTest^pb"
"CX","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle^CX"
"y",\N
"yDot",\N
"yDot",\N
"TestFieldProblemHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemHandler.java[TestFieldProblemHandler"
"CY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle^CY"
"e","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem3.java[TestProblem3^e"
"getLastError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemHandler.java[TestFieldProblemHandler~getLastError"
"FirstOrderConverterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest"
"OMEGA","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[Circle^OMEGA"
"TestProblem1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem1.java[TestProblem1"
"testDoubleDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest~testDoubleDimension"
"getLastTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemHandler.java[TestFieldProblemHandler~getLastTime"
"TestProblem1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem1.java[TestProblem1~TestProblem1"
"ParameterizedCircle","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle"
"Equations","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest[Equations"
"getMaximalTimeError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemHandler.java[TestFieldProblemHandler~getMaximalTimeError"
"ParameterizedCircle","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~ParameterizedCircle~\\[D~D~D~D"
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem1.java[TestProblem1~computeTheoreticalState~D"
"Equations","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest[Equations~Equations~I~D"
"getMaximalValueError","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblemHandler.java[TestFieldProblemHandler~getMaximalValueError"
"y0",\N
"t",\N
"n",\N
"cx",\N
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestProblem1.java[TestProblem1~doComputeDerivatives~D~\\[D~\\[D"
"omega",\N
"TestFieldProblem4","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4"
"cy",\N
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4~computeTheoreticalState~QT;"
"computeSecondDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest[Equations~computeSecondDerivatives~D~\\[D~\\[D~\\[D"
"t",\N
"omega",\N
"y",\N
"t",\N
"t",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~computeDerivatives~D~\\[D~\\[D"
"yDot",\N
"y",\N
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4~doComputeDerivatives~QT;~\\[QT;"
"t",\N
"yDot",\N
"TestFieldProblem6","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem6.java[TestFieldProblem6"
"t",\N
"y",\N
"yDDot",\N
"computeTheoreticalState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem6.java[TestFieldProblem6~computeTheoreticalState~QT;"
"y",\N
"yDot",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{FirstOrderConverterTest.java[FirstOrderConverterTest[Equations~getDimension"
"t",\N
"getTheoreticalEventsTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4~getTheoreticalEventsTimes"
"exactDyDcx","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~exactDyDcx~D"
"doComputeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem6.java[TestFieldProblem6~doComputeDerivatives~QT;~\\[QT;"
"EventFilterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest"
"Bounce","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4[Bounce"
"t",\N
"testHistoryDecreasingBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest~testHistoryDecreasingBackward"
"t",\N
"Bounce","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4[Bounce~Bounce"
"exactDyDcy","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~exactDyDcy~D"
"y",\N
"testHistoryDecreasingForward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest~testHistoryDecreasingForward"
"Stop","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4[Stop"
"t",\N
"ReappearingEventTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest"
"Stop","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{TestFieldProblem4.java[TestFieldProblem4[Stop~Stop"
"testHistoryIncreasingBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest~testHistoryIncreasingBackward"
"exactDyDom","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~exactDyDom~D"
"Ode","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Ode"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Ode~computeDerivatives~D~\\[D~\\[D"
"testHistoryIncreasingForward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest~testHistoryIncreasingForward"
"t",\N
"EventStateTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest"
"exactDyDy0","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~exactDyDy0~D"
"ResettingEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[ResettingEvent"
"t",\N
"SineCosine","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[SineCosine"
"ResettingEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[ResettingEvent~ResettingEvent~D"
"y",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[SineCosine~computeDerivatives~D~\\[D~\\[D"
"t",\N
"yDot",\N
"tEvent",\N
"exactY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~exactY~D"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Ode~getDimension"
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[ResettingEvent~g~D~\\[D"
"y",\N
"t",\N
"yDot",\N
"Event","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Event"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle~getDimension"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[SineCosine~getDimension"
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Event~g~D~\\[D"
"y",\N
"CX","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle^CX"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[ResettingEvent~init~D~\\[D~D"
"t",\N
"Event","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event"
"CY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle^CY"
"y",\N
"Event","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event~Event~Z~Z"
"t0",\N
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Event~init~D~\\[D~D"
"y0",\N
"OMEGA","=mathmain3.6/src<test.java.org.apache.commons.math3.ode{JacobianMatricesTest.java[JacobianMatricesTest[ParameterizedCircle^OMEGA"
"expectDecreasing",\N
"t",\N
"t0",\N
"expectIncreasing",\N
"CloseEventsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[ResettingEvent~resetState~D~\\[D"
"y0",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event~g~D~\\[D"
"testCloseEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest~testCloseEvents"
"t",\N
"t",\N
"t",\N
"testSimultaneousEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest~testSimultaneousEvents"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{ReappearingEventTest.java[ReappearingEventTest[Event~resetState~D~\\[D"
"y",\N
"y",\N
"TimeDetector","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector"
"SecondaryStateEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[SecondaryStateEvent"
"t",\N
"getEventCount","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event~getEventCount"
"TimeDetector","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector~TimeDetector~D"
"SecondaryStateEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[SecondaryStateEvent~SecondaryStateEvent~I~D"
"y",\N
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event~init~D~\\[D~D"
"OverlappingEventsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest"
"index",\N
"eventT",\N
"t0",\N
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest~computeDerivatives~D~\\[D~\\[D"
"target",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector~g~D~\\[D"
"y0",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[SecondaryStateEvent~g~D~\\[D"
"t",\N
"t",\N
"t",\N
"y",\N
"y",\N
"t",\N
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventFilterTest.java[EventFilterTest[Event~resetState~D~\\[D"
"yDot",\N
"y",\N
"getActualT","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector~getActualT"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest~getDimension"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[SecondaryStateEvent~init~D~\\[D~D"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector~init~D~\\[D~D"
"y",\N
"Event","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest[Event"
"t0",\N
"ThreeEighthesFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest"
"t0",\N
"Event","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest[Event~Event~I~I"
"y0",\N
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testBackward"
"y0",\N
"t",\N
"idx",\N
"t",\N
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testBigStep"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[SecondaryStateEvent~resetState~D~\\[D"
"eventType",\N
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[TimeDetector~resetState~D~\\[D"
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest[Event~g~D~\\[D"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testDecreasingSteps"
"t",\N
"t",\N
"y",\N
"t",\N
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testDerivativesConsistency"
"y",\N
"CloseEventsGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator"
"y",\N
"Equation","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[Equation"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testKepler"
"CloseEventsGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator~CloseEventsGenerator~D~D"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest[Event~init~D~\\[D~D"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[Equation~computeDerivatives~D~\\[D~\\[D"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testMissedEndEvent"
"r1",\N
"t",\N
"t0",\N
"r2",\N
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testNonFieldIntegratorConsistency"
"y",\N
"y0",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator~g~D~\\[D"
"t",\N
"yDot",\N
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testPartialDerivatives"
"t",\N
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{OverlappingEventsTest.java[OverlappingEventsTest[Event~resetState~D~\\[D"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{CloseEventsTest.java[CloseEventsTest[Equation~getDimension"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testSanityChecks"
"y",\N
"t",\N
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator~getCount"
"RungeKuttaFieldStepInterpolatorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testSingleStep"
"y",\N
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest~interpolationAtBounds"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator~init~D~\\[D~D"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testSmallStep"
"LutherFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest~interpolationInside"
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testDerivativesConsistency"
"t0",\N
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testStepSize"
"y0",\N
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest~nonFieldInterpolatorConsistency"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testNonFieldIntegratorConsistency"
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testTooLargeFirstStep"
"t",\N
"SinCos","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest[SinCos"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testPartialDerivatives"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator~resetState~D~\\[D"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldIntegratorTest.java[ThreeEighthesFieldIntegratorTest~testUnstableDerivative"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest[SinCos~computeDerivatives~QT;~\\[QT;"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testSingleStep"
"t",\N
"ClassicalRungeKuttaFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest"
"t",\N
"y",\N
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testTooLargeFirstStep"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testBackward"
"y",\N
"count","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator^count"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest[SinCos~getDimension"
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testBigStep"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldIntegratorTest.java[LutherFieldIntegratorTest~testUnstableDerivative"
"r1","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator^r1"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldStepInterpolatorAbstractTest.java[RungeKuttaFieldStepInterpolatorAbstractTest[SinCos~init~QT;~\\[QT;~QT;"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testDecreasingSteps"
"ClassicalRungKuttaFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungKuttaFieldStepInterpolatorTest.java[ClassicalRungKuttaFieldStepInterpolatorTest"
"r2","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.events{EventStateTest.java[EventStateTest[CloseEventsGenerator^r2"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungKuttaFieldStepInterpolatorTest.java[ClassicalRungKuttaFieldStepInterpolatorTest~interpolationAtBounds"
"t0",\N
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testDerivativesConsistency"
"y0",\N
"ThreeEighthesFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldStepInterpolatorTest.java[ThreeEighthesFieldStepInterpolatorTest"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungKuttaFieldStepInterpolatorTest.java[ClassicalRungKuttaFieldStepInterpolatorTest~interpolationInside"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testKepler"
"finalTime",\N
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldStepInterpolatorTest.java[ThreeEighthesFieldStepInterpolatorTest~interpolationAtBounds"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungKuttaFieldStepInterpolatorTest.java[ClassicalRungKuttaFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"HighamHall54IntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54IntegratorTest.java[HighamHall54IntegratorTest"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testMissedEndEvent"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldStepInterpolatorTest.java[ThreeEighthesFieldStepInterpolatorTest~interpolationInside"
"LocalException","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54IntegratorTest.java[HighamHall54IntegratorTest[LocalException"
"HighamHall54StepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54StepInterpolatorTest.java[HighamHall54StepInterpolatorTest"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testNonFieldIntegratorConsistency"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesFieldStepInterpolatorTest.java[ThreeEighthesFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"EulerFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldStepInterpolatorTest.java[EulerFieldStepInterpolatorTest"
"StepProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldStepInterpolatorTest.java[EulerFieldStepInterpolatorTest~interpolationAtBounds"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testPartialDerivatives"
"StepProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~StepProblem~D~D~D"
"DormandPrince54FieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldStepInterpolatorTest.java[EulerFieldStepInterpolatorTest~interpolationInside"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testBackward"
"rateBefore",\N
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testSanityChecks"
"rateAfter",\N
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldStepInterpolatorTest.java[EulerFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testEvents"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testSingleStep"
"switchTime",\N
"testEventsErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testEventsErrors"
"AdamsBashforthIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~computeDerivatives~D~\\[D~\\[D"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testSmallStep"
"testStartFailure","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest~testStartFailure"
"testEventsNoConvergence","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testEventsNoConvergence"
"t",\N
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testStepSize"
"PerfectStarter","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectStarter"
"y",\N
"testForwardBackwardExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testForwardBackwardExceptions"
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testTooLargeFirstStep"
"PerfectInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator"
"yDot",\N
"getCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getCurrentTime"
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testIncreasingTolerance"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaFieldIntegratorTest.java[ClassicalRungeKuttaFieldIntegratorTest~testUnstableDerivative"
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~g~D~\\[D"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testKepler"
"getInterpolatedDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getInterpolatedDerivatives"
"t",\N
"AdamsMoultonIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest"
"y",\N
"PerfectStarter","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectStarter"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testMinStep"
"getInterpolatedSecondaryDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getInterpolatedSecondaryDerivatives~I"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~getDimension"
"PerfectInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator"
"index",\N
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testNonFieldIntegratorConsistency"
"getCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getCurrentTime"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~init~D~\\[D~D"
"getInterpolatedSecondaryState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getInterpolatedSecondaryState~I"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testPartialDerivatives"
"getInterpolatedDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getInterpolatedDerivatives"
"t0",\N
"index",\N
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldIntegratorTest.java[DormandPrince54FieldIntegratorTest~testSanityChecks"
"y0",\N
"getInterpolatedSecondaryDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getInterpolatedSecondaryDerivatives~I"
"getInterpolatedState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getInterpolatedState"
"t",\N
"EulerFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest"
"index",\N
"getInterpolatedTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getInterpolatedTime"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~resetState~D~\\[D"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testBackward"
"getInterpolatedSecondaryState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getInterpolatedSecondaryState~I"
"getPreviousTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~getPreviousTime"
"t",\N
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testBigStep"
"index",\N
"y",\N
"isForward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~isForward"
"getInterpolatedState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getInterpolatedState"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testDecreasingSteps"
"setRate","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepProblem.java[StepProblem~setRate~D"
"readExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~readExternal~QObjectInput;"
"getInterpolatedTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getInterpolatedTime"
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testDerivativesConsistency"
"rate",\N
"",\N
"getPreviousTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~getPreviousTime"
"GillIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillIntegratorTest.java[GillIntegratorTest"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testKepler"
"setCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~setCurrentTime~D"
"KeplerStepHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillIntegratorTest.java[GillIntegratorTest[KeplerStepHandler"
"isForward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~isForward"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testMissedEndEvent"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillIntegratorTest.java[GillIntegratorTest[KeplerStepHandler~init~D~\\[D~D"
"time",\N
"readExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~readExternal~QObjectInput;"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testNonFieldIntegratorConsistency"
"setInterpolatedTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~setInterpolatedTime~D"
"t0",\N
"",\N
"y0",\N
"time",\N
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testPartialDerivatives"
"t",\N
"setCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~setCurrentTime~D"
"setPreviousTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~setPreviousTime~D"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testSanityChecks"
"GillStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillStepInterpolatorTest.java[GillStepInterpolatorTest"
"time",\N
"time",\N
"LutherStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherStepInterpolatorTest.java[LutherStepInterpolatorTest"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testSingleStep"
"setInterpolatedTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~setInterpolatedTime~D"
"writeExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthIntegratorTest.java[AdamsBashforthIntegratorTest[PerfectInterpolator~writeExternal~QObjectOutput;"
"DormandPrince54IntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testSmallStep"
"time",\N
"",\N
"DP54SmallLastHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[DP54SmallLastHandler"
"setPreviousTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~setPreviousTime~D"
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testStepSize"
"GillFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldStepInterpolatorTest.java[GillFieldStepInterpolatorTest"
"DP54SmallLastHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[DP54SmallLastHandler~DP54SmallLastHandler~D"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldStepInterpolatorTest.java[GillFieldStepInterpolatorTest~interpolationAtBounds"
"time",\N
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testTooLargeFirstStep"
"minStep",\N
"writeExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonIntegratorTest.java[AdamsMoultonIntegratorTest[PerfectInterpolator~writeExternal~QObjectOutput;"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldStepInterpolatorTest.java[GillFieldStepInterpolatorTest~interpolationInside"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[DP54SmallLastHandler~init~D~\\[D~D"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerFieldIntegratorTest.java[EulerFieldIntegratorTest~testUnstableDerivative"
"",\N
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldStepInterpolatorTest.java[GillFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"t0",\N
"DormandPrince54FieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldStepInterpolatorTest.java[DormandPrince54FieldStepInterpolatorTest"
"AdamsNordsieckTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest"
"y0",\N
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldStepInterpolatorTest.java[DormandPrince54FieldStepInterpolatorTest~interpolationAtBounds"
"AdamsMoultonFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest"
"testPolynomialExtraDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest~testPolynomialExtraDerivative"
"t",\N
"backward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~backward"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldStepInterpolatorTest.java[DormandPrince54FieldStepInterpolatorTest~interpolationInside"
"testPolynomialMissingLastDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest~testPolynomialMissingLastDerivative"
"wasLastSeen","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[DP54SmallLastHandler~wasLastSeen"
"exceedMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~exceedMaxEvaluations"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54FieldStepInterpolatorTest.java[DormandPrince54FieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testPolynomialRegular","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest~testPolynomialRegular"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[KeplerHandler"
"polynomial","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~polynomial"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[KeplerHandler~init~D~\\[D~D"
"HighamHall54FieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldStepInterpolatorTest.java[HighamHall54FieldStepInterpolatorTest"
"testTransformExact","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest~testTransformExact"
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~testIncreasingTolerance"
"t0",\N
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldStepInterpolatorTest.java[HighamHall54FieldStepInterpolatorTest~interpolationAtBounds"
"testTransformInexact","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsNordsieckTransformerTest.java[AdamsNordsieckTransformerTest~testTransformInexact"
"y0",\N
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~testMinStep"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldStepInterpolatorTest.java[HighamHall54FieldStepInterpolatorTest~interpolationInside"
"t",\N
"ClassicalRungeKuttaIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegratorTest.java[ClassicalRungeKuttaIntegratorTest"
"testStartFailure","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsMoultonFieldIntegratorTest.java[AdamsMoultonFieldIntegratorTest~testStartFailure"
"VariableHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[VariableHandler"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldStepInterpolatorTest.java[HighamHall54FieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegratorTest.java[ClassicalRungeKuttaIntegratorTest~testTooLargeFirstStep"
"VariableHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[VariableHandler~VariableHandler"
"ClassicalRungeKuttaStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaStepInterpolatorTest.java[ClassicalRungeKuttaStepInterpolatorTest"
"DormandPrince853FieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegratorTest.java[ClassicalRungeKuttaIntegratorTest[KeplerHandler"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54IntegratorTest.java[DormandPrince54IntegratorTest[VariableHandler~init~D~\\[D~D"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testBackward"
"EulerStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolatorTest.java[EulerStepInterpolatorTest"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ClassicalRungeKuttaIntegratorTest.java[ClassicalRungeKuttaIntegratorTest[KeplerHandler~init~D~\\[D~D"
"DummyIntegrator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerStepInterpolatorTest.java[EulerStepInterpolatorTest[DummyIntegrator"
"t0",\N
"testEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testEvents"
"LutherIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherIntegratorTest.java[LutherIntegratorTest"
"y0",\N
"t0",\N
"testEventsErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testEventsErrors"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherIntegratorTest.java[LutherIntegratorTest~testSingleStep"
"t",\N
"y0",\N
"t",\N
"StepFieldProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepFieldProblem.java[StepFieldProblem"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherIntegratorTest.java[LutherIntegratorTest[KeplerHandler"
"testEventsNoConvergence","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testEventsNoConvergence"
"MidpointFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherIntegratorTest.java[LutherIntegratorTest[KeplerHandler~init~D~\\[D~D"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepFieldProblem.java[StepFieldProblem~computeDerivatives~QT;~\\[QT;"
"testForwardBackwardExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testForwardBackwardExceptions"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testBackward"
"t",\N
"t0",\N
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testIncreasingTolerance"
"y0",\N
"y",\N
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testBigStep"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testKepler"
"t",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepFieldProblem.java[StepFieldProblem~getDimension"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testDecreasingSteps"
"AdamsBashforthFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testMinStep"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepFieldProblem.java[StepFieldProblem~init~QT;~\\[QT;~QT;"
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testDerivativesConsistency"
"backward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~backward"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testNonFieldIntegratorConsistency"
"t0",\N
"exceedMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~exceedMaxEvaluations"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testKepler"
"y0",\N
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testPartialDerivatives"
"t",\N
"polynomial","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~polynomial"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testMissedEndEvent"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldIntegratorTest.java[DormandPrince853FieldIntegratorTest~testSanityChecks"
"setRate","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{StepFieldProblem.java[StepFieldProblem~setRate~QT;"
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~testIncreasingTolerance"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testNonFieldIntegratorConsistency"
"rate",\N
"MidpointStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointStepInterpolatorTest.java[MidpointStepInterpolatorTest"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~testMinStep"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testPartialDerivatives"
"ThreeEighthesStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesStepInterpolatorTest.java[ThreeEighthesStepInterpolatorTest"
"EulerIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EulerIntegratorTest.java[EulerIntegratorTest"
"testStartFailure","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsBashforthFieldIntegratorTest.java[AdamsBashforthFieldIntegratorTest~testStartFailure"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testSanityChecks"
"DormandPrince853StepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853StepInterpolatorTest.java[DormandPrince853StepInterpolatorTest"
"HighamHall54FieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testBackward"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testSingleStep"
"DormandPrince853FieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldStepInterpolatorTest.java[DormandPrince853FieldStepInterpolatorTest"
"RungeKuttaFieldIntegratorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldStepInterpolatorTest.java[DormandPrince853FieldStepInterpolatorTest~interpolationAtBounds"
"doTestPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~doTestPartialDerivatives~D~\\[D"
"testEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testEvents"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testSmallStep"
"epsilonY",\N
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldStepInterpolatorTest.java[DormandPrince853FieldStepInterpolatorTest~interpolationInside"
"testEventsErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testEventsErrors"
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testStepSize"
"epsilonPartials",\N
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853FieldStepInterpolatorTest.java[DormandPrince853FieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testEventsNoConvergence","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testEventsNoConvergence"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testBackward"
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testTooLargeFirstStep"
"GillFieldIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest"
"testForwardBackwardExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testForwardBackwardExceptions"
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testBigStep"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldIntegratorTest.java[MidpointFieldIntegratorTest~testUnstableDerivative"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testBackward"
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testIncreasingTolerance"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testDecreasingSteps"
"MidpointFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldStepInterpolatorTest.java[MidpointFieldStepInterpolatorTest"
"testBigStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testBigStep"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testKepler"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldStepInterpolatorTest.java[MidpointFieldStepInterpolatorTest~interpolationAtBounds"
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testDerivativesConsistency"
"testDecreasingSteps","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testDecreasingSteps"
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldStepInterpolatorTest.java[MidpointFieldStepInterpolatorTest~interpolationInside"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testMinStep"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testKepler"
"testDerivativesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testDerivativesConsistency"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testNonFieldIntegratorConsistency"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointFieldStepInterpolatorTest.java[MidpointFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testMissedEndEvent"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testKepler"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testPartialDerivatives"
"MidpointIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{MidpointIntegratorTest.java[MidpointIntegratorTest"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testNonFieldIntegratorConsistency"
"testMissedEndEvent","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testMissedEndEvent"
"AdamsFieldIntegratorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{HighamHall54FieldIntegratorTest.java[HighamHall54FieldIntegratorTest~testSanityChecks"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testPartialDerivatives"
"backward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~backward"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testNonFieldIntegratorConsistency"
"ThreeEighthesIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesIntegratorTest.java[ThreeEighthesIntegratorTest"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testSanityChecks"
"exceedMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~exceedMaxEvaluations"
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testPartialDerivatives"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesIntegratorTest.java[ThreeEighthesIntegratorTest[KeplerHandler"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testSingleStep"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{ThreeEighthesIntegratorTest.java[ThreeEighthesIntegratorTest[KeplerHandler~init~D~\\[D~D"
"polynomial","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~polynomial"
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testSanityChecks"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testSmallStep"
"t0",\N
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~testIncreasingTolerance"
"testSingleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testSingleStep"
"y0",\N
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testStepSize"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~testMinStep"
"testSmallStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testSmallStep"
"t",\N
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testTooLargeFirstStep"
"testStartFailure","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest~testStartFailure"
"testStepSize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testStepSize"
"DormandPrince853IntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest~testUnstableDerivative"
"testEventsScheduling","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest~testEventsScheduling"
"PerfectStarter","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectStarter"
"testTooLargeFirstStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testTooLargeFirstStep"
"PerfectInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectInterpolator"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest[KeplerHandler"
"SchedulingChecker","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker"
"testUnstableDerivative","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GillFieldIntegratorTest.java[GillFieldIntegratorTest~testUnstableDerivative"
"getCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectInterpolator~getCurrentTime"
"SinCos","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest[SinCos"
"SchedulingChecker","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker~SchedulingChecker~I"
"getDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest[SinCos~getDerivatives~D"
"EmbeddedRungeKuttaFieldIntegratorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest"
"isForward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectInterpolator~isForward"
"index",\N
"doTestPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~doTestPartialDerivatives~D~\\[D"
"t",\N
"g","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker~g~D~\\[D"
"setCurrentTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectInterpolator~setCurrentTime~QT;"
"epsilonY",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest[SinCos~getDimension"
"t",\N
"currentTime",\N
"epsilonPartials",\N
"y",\N
"theoreticalY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{RungeKuttaFieldIntegratorAbstractTest.java[RungeKuttaFieldIntegratorAbstractTest[SinCos~theoreticalY~D"
"setPreviousTime","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{AdamsFieldIntegratorAbstractTest.java[AdamsFieldIntegratorAbstractTest[PerfectInterpolator~setPreviousTime~QT;"
"testBackward","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testBackward"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker~init~D~\\[D~D"
"t",\N
"previousTime",\N
"testEvents","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testEvents"
"t0",\N
"GraggBulirschStoerStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerStepInterpolatorTest.java[GraggBulirschStoerStepInterpolatorTest"
"GraggBulirschStoerIntegratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest"
"y0",\N
"testEventsErrors","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testEventsErrors"
"DormandPrince54StepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince54StepInterpolatorTest.java[DormandPrince54StepInterpolatorTest"
"KeplerStepHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest[KeplerStepHandler"
"t",\N
"testEventsNoConvergence","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testEventsNoConvergence"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest[KeplerStepHandler~init~D~\\[D~D"
"LutherFieldStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldStepInterpolatorTest.java[LutherFieldStepInterpolatorTest"
"resetState","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker~resetState~D~\\[D"
"interpolationAtBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldStepInterpolatorTest.java[LutherFieldStepInterpolatorTest~interpolationAtBounds"
"testForwardBackwardExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testForwardBackwardExceptions"
"t0",\N
"t",\N
"y0",\N
"interpolationInside","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldStepInterpolatorTest.java[LutherFieldStepInterpolatorTest~interpolationInside"
"testIncreasingTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testIncreasingTolerance"
"y",\N
"t",\N
"index","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker^index"
"nonFieldInterpolatorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{LutherFieldStepInterpolatorTest.java[LutherFieldStepInterpolatorTest~nonFieldInterpolatorConsistency"
"testKepler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testKepler"
"VariableStepHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest[VariableStepHandler"
"tMin","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[SchedulingChecker^tMin"
"VariableStepHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest[VariableStepHandler~VariableStepHandler"
"StepInterpolatorTestUtils","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepInterpolatorTestUtils.java[StepInterpolatorTestUtils"
"testMinStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testMinStep"
"StepNormalizerOutputTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[KeplerHandler"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{GraggBulirschStoerIntegratorTest.java[GraggBulirschStoerIntegratorTest[VariableStepHandler~init~D~\\[D~D"
"testNonFieldIntegratorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testNonFieldIntegratorConsistency"
"getEnd","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getEnd"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[KeplerHandler~init~D~\\[D~D"
"t0",\N
"testPartialDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testPartialDerivatives"
"getExpInc","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getExpInc"
"y0",\N
"t0",\N
"testSanityChecks","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest~testSanityChecks"
"t",\N
"y0",\N
"getExpIncRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getExpIncRev"
"t",\N
"NordsieckStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{NordsieckStepInterpolatorTest.java[NordsieckStepInterpolatorTest"
"LocalException","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[LocalException"
"getExpMul","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getExpMul"
"VariableHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[VariableHandler"
"StepNormalizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest"
"KeplerHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[KeplerHandler"
"getExpMulRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getExpMulRev"
"VariableHandler","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[VariableHandler~VariableHandler"
"StepNormalizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest~StepNormalizerTest"
"SinCos","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[SinCos"
"getDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[SinCos~getDerivatives~D"
"getO","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getO"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{DormandPrince853IntegratorTest.java[DormandPrince853IntegratorTest[VariableHandler~init~D~\\[D~D"
"checkValue","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest~checkValue~D~D"
"t",\N
"t0",\N
"getStart","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTest.java[StepNormalizerOutputTest~getStart"
"value",\N
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[SinCos~getDimension"
"y0",\N
"reference",\N
"StepNormalizerOutputOverlapTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest"
"t",\N
"setLastSeen","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest~setLastSeen~Z"
"theoreticalY","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.nonstiff{EmbeddedRungeKuttaFieldIntegratorAbstractTest.java[EmbeddedRungeKuttaFieldIntegratorAbstractTest[SinCos~theoreticalY~D"
"getEnd","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getEnd"
"DummyStepInterpolatorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest"
"lastSeen",\N
"t",\N
"testImpossibleSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest~testImpossibleSerialization"
"getExpInc","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getExpInc"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest~setUp"
"StepNormalizerOutputTestBase","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase"
"BadStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest[BadStepInterpolator"
"getExpIncRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getExpIncRev"
"computeDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~computeDerivatives~D~\\[D~\\[D"
"BadStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest[BadStepInterpolator~BadStepInterpolator~\\[D~Z"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest~tearDown"
"getExpMul","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getExpMul"
"t",\N
"y",\N
"lastSeen","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerTest.java[StepNormalizerTest^lastSeen"
"y",\N
"getExpMulRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getExpMulRev"
"forward",\N
"DummyFieldStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyFieldStepInterpolator.java[DummyFieldStepInterpolator"
"yDot",\N
"doFinalize","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest[BadStepInterpolator~doFinalize"
"getO","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getO"
"DummyStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator"
"getDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getDimension"
"DummyStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~DummyStepInterpolator"
"LocalException","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolatorTest.java[DummyStepInterpolatorTest[LocalException"
"getStart","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputOverlapTest.java[StepNormalizerOutputOverlapTest~getStart"
"getEnd","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getEnd"
"SimpleValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleValueCheckerTest.java[SimpleValueCheckerTest"
"DummyStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~DummyStepInterpolator~\\[D~\\[D~Z"
"SimpleVectorValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheck"
"getExpInc","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getExpInc"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheck"
"y",\N
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheckDisabled"
"getExpIncRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getExpIncRev"
"yDot",\N
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheckDisabled"
"forward",\N
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheckPrecondition"
"getExpMul","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getExpMul"
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheckPrecondition"
"DummyStepInterpolator","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~DummyStepInterpolator~QDummyStepInterpolator;"
"PointVectorValuePairTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{PointVectorValuePairTest.java[PointVectorValuePairTest"
"getExpMulRev","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getExpMulRev"
"SimplePointCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimplePointCheckerTest.java[SimplePointCheckerTest"
"interpolator",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{PointVectorValuePairTest.java[PointVectorValuePairTest~testSerial"
"getO","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getO"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheck"
"computeInterpolatedStateAndDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~computeInterpolatedStateAndDerivatives~D~D"
"PointValuePairTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{PointValuePairTest.java[PointValuePairTest"
"getStart","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~getStart"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheckDisabled"
"theta",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{PointValuePairTest.java[PointValuePairTest~testSerial"
"oneMinusThetaH",\N
"handleStep","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~handleStep~D~\\[D~\\[D~Z"
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optim{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheckPrecondition"
"SimplexSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest"
"readExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~readExternal~QObjectInput;"
"t",\N
"testDegeneracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testDegeneracy"
"SimplexTableauTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexTableauTest.java[SimplexTableauTest"
"in",\N
"y",\N
"testDropPhase1Objective","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexTableauTest.java[SimplexTableauTest~testDropPhase1Objective"
"testEpsilon","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testEpsilon"
"writeExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{DummyStepInterpolator.java[DummyStepInterpolator~writeExternal~QObjectOutput;"
"yDot",\N
"testInitialization","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexTableauTest.java[SimplexTableauTest~testInitialization"
"isLast",\N
"testInfeasibleSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testInfeasibleSolution"
"out",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexTableauTest.java[SimplexTableauTest~testSerial"
"init","=mathmain3.6/src<test.java.org.apache.commons.math3.ode.sampling{StepNormalizerOutputTestBase.java[StepNormalizerOutputTestBase~init~D~\\[D~D"
"MultivariateFunctionPenaltyAdapterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest"
"testLargeModel","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testLargeModel"
"testHalfBounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testHalfBounded"
"t0",\N
"testTableauWithNoArtificialVars","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexTableauTest.java[SimplexTableauTest~testTableauWithNoArtificialVars"
"testMath272","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath272"
"y0",\N
"testOptimumOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testOptimumOutsideRange"
"MultivariateFunctionMappingAdapterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest"
"t",\N
"testMath286","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath286"
"testStartSimplexInsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testStartSimplexInsideRange"
"testHalfBounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testHalfBounded"
"MultiStartMultivariateOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest"
"testMath288","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath288"
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest~testCircleFitting"
"testOptimumOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testOptimumOutsideRange"
"testStartSimplexOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testStartSimplexOutsideRange"
"testMath290GEQ","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath290GEQ"
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest~testRosenbrock"
"testUnbounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testUnbounded"
"testStartSimplexInsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testStartSimplexInsideRange"
"testMath290LEQ","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath290LEQ"
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest[Rosenbrock"
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic"
"testUnbounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testUnbounded"
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest[Rosenbrock~Rosenbrock"
"testMath293","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath293"
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~BiQuadratic~D~D~D~D~D~D"
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest[Rosenbrock~getCount"
"testMath434NegativeVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434NegativeVariable"
"xOptimum",\N
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~BiQuadratic~D~D~D~D~D~D"
"yOptimum",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultiStartMultivariateOptimizerTest.java[MultiStartMultivariateOptimizerTest[Rosenbrock~value~\\[D"
"testMath434PivotRowSelection","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434PivotRowSelection"
"xOptimum",\N
"xMin",\N
"yOptimum",\N
"x",\N
"testMath434PivotRowSelection2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434PivotRowSelection2"
"xMax",\N
"xMin",\N
"yMin",\N
"NonLinearConjugateGradientOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest"
"testMath434UnfeasibleSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434UnfeasibleSolution"
"xMax",\N
"yMax",\N
"testBoundsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testBoundsUnsupported"
"yMin",\N
"testMath713NegativeVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath713NegativeVariable"
"getBoundedXOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getBoundedXOptimum"
"yMax",\N
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testCircleFitting"
"testMath781","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath781"
"getBoundedXOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getBoundedXOptimum"
"getBoundedYOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getBoundedYOptimum"
"testColumnsPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testColumnsPermutation"
"testMath828","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath828"
"getLower","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getLower"
"getBoundedYOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getBoundedYOptimum"
"testIllConditioned","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testIllConditioned"
"testMath828Cycle","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath828Cycle"
"getLower","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getLower"
"getUpper","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getUpper"
"testInconsistentEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testInconsistentEquations"
"testMath842Cycle","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath842Cycle"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~value~\\[D"
"getUpper","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getUpper"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testMoreEstimatedParametersSimple"
"testMath930","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMath930"
"point",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~value~\\[D"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testMoreEstimatedParametersUnsorted"
"CircleScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{CircleScalar.java[CircleScalar"
"testMinimization","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testMinimization"
"point",\N
"CircleScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{CircleScalar.java[CircleScalar~CircleScalar"
"testNoDependency","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testNoDependency"
"testModelWithNoArtificialVars","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testModelWithNoArtificialVars"
"SimplexOptimizerMultiDirectionalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{CircleScalar.java[CircleScalar~addPoint~D~D"
"testNonInversible","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testNonInversible"
"testBoundsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testBoundsUnsupported"
"testRestrictVariablesToNonNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testRestrictVariablesToNonNegative"
"px",\N
"testOneSet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testOneSet"
"testMath283","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMath283"
"testSimplexSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testSimplexSolver"
"py",\N
"testRedundantEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testRedundantEquations"
"testMaximize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMaximize1"
"SimplexOptimizerNelderMeadTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest"
"testSingleVariableAndConstraint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testSingleVariableAndConstraint"
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testTrivial"
"testBoundsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testBoundsUnsupported"
"testMaximize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMaximize2"
"testSolutionCallback","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testSolutionCallback"
"testTwoSets","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testTwoSets"
"testLeastSquares1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares1"
"testMinimize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMinimize1"
"testSolutionWithNegativeDecisionVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testSolutionWithNegativeDecisionVariable"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem"
"testLeastSquares2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares2"
"testMinimize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMinimize2"
"testTrivialModel","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testTrivialModel"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"testLeastSquares3","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares3"
"testPowell","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testPowell"
"testUnboundedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.linear{SimplexSolverTest.java[SimplexSolverTest~testUnboundedSolution"
"factors",\N
"testMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaxIterations"
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testRosenbrock"
"target",\N
"CMAESOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.gradient{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem^target"
"testMaximize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaximize1"
"FourExtrema","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema"
"testAckley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testAckley"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema~value~\\[D"
"testMaximize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaximize2"
"BOBYQAOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest"
"testBoundariesDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testBoundariesDimensionMismatch"
"variables",\N
"testAckley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testAckley"
"testMinimize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMinimize1"
"testCigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigTab"
"valueXmYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXmYm"
"testBoundariesDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testBoundariesDimensionMismatch"
"testMinimize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMinimize2"
"testCigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigar"
"valueXmYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXmYp"
"testCigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testCigTab"
"testPowell","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testPowell"
"testCigarWithBoundaries","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigarWithBoundaries"
"valueXpYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXpYm"
"testCigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testCigar"
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testRosenbrock"
"testConstrainedRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testConstrainedRosen"
"valueXpYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXpYp"
"testConstrainedRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testConstrainedRosen"
"FourExtrema","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema"
"testDiagonalRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testDiagonalRosen"
"xM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^xM"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema~value~\\[D"
"testConstrainedRosenWithMoreInterpolationPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testConstrainedRosenWithMoreInterpolationPoints"
"testDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testDiffPow"
"variables",\N
"xP","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^xP"
"testDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testDiffPow"
"testElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testElliRotated"
"testElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testElliRotated"
"yM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^yM"
"valueXmYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXmYm"
"testEllipse","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testEllipse"
"testEllipse","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testEllipse"
"yP","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^yP"
"valueXmYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXmYp"
"testFitAccuracyDependsOnBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testFitAccuracyDependsOnBoundary"
"testInitOutOfBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testInitOutOfBounds"
"valueXpYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXpYm"
"Gaussian2D","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D"
"testInitOutofbounds1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testInitOutofbounds1"
"Gaussian2D","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~Gaussian2D~D~D~D"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testMaxEvaluations"
"valueXpYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXpYp"
"testInitOutofbounds2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testInitOutofbounds2"
"xOpt",\N
"testMaximize","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testMaximize"
"xM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^xM"
"yOpt",\N
"testInputSigmaDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaDimensionMismatch"
"testProblemDimensionTooSmall","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testProblemDimensionTooSmall"
"std",\N
"xP","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^xP"
"testInputSigmaNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaNegative"
"testRastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testRastrigin"
"getMaximum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~getMaximum"
"yM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^yM"
"testInputSigmaOutOfRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaOutOfRange"
"getMaximumPosition","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~getMaximumPosition"
"testRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testRosen"
"yP","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^yP"
"testMath864","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testMath864"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~value~\\[D"
"testSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testSphere"
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock"
"testMaximize","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testMaximize"
"point",\N
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~Rosenbrock"
"testSsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testSsDiffPow"
"PowellOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest"
"testRastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testRastrigin"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~getCount"
"testTablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testTablet"
"testBoundsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest~testBoundsUnsupported"
"testRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testRosen"
"testTwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testTwoAxes"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~value~\\[D"
"testMaximizeQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest~testMaximizeQuadratic"
"testSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testSphere"
"x",\N
"DIM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest^DIM"
"testQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest~testQuadratic"
"Powell","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell"
"testSsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testSsDiffPow"
"Sphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Sphere"
"Powell","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~Powell"
"testRelativeToleranceOnScaledValues","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest~testRelativeToleranceOnScaledValues"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Sphere~value~\\[D"
"testTablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testTablet"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~getCount"
"testSumSinc","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{PowellOptimizerTest.java[PowellOptimizerTest~testSumSinc"
"x",\N
"testTwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest~testTwoAxes"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~value~\\[D"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar"
"MultiStartMultivariateVectorOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest"
"DIM","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest^DIM"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~Cigar"
"testGetOptimaBeforeOptimize","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest~testGetOptimaBeforeOptimize"
"x",\N
"LAMBDA","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest^LAMBDA"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~Cigar~D"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem"
"testIssue914","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest~testIssue914"
"Sphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Sphere"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem~CircleProblem~D~D~I"
"axisratio",\N
"testNoOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest~testNoOptimum"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Sphere~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~value~\\[D"
"xError",\N
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest~testTrivial"
"x",\N
"yError",\N
"x",\N
"searchResolution",\N
"TestException","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest[TestException"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~Cigar"
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem~CircleProblem~D~D"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest[LinearProblem"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~Tablet"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector{MultiStartMultivariateVectorOptimizerTest.java[MultiStartMultivariateVectorOptimizerTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"xError",\N
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~Cigar~D"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~Tablet~D"
"yError",\N
"factors",\N
"axisratio",\N
"axisratio",\N
"target",\N
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem~addPoint~D~D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~value~\\[D"
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset"
"px",\N
"x",\N
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~StatisticalReferenceDataset~QBufferedReader;"
"x",\N
"py",\N
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab"
"in",\N
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem~target"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~Tablet"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~CigTab"
"getData","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getData"
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleProblem.java[CircleProblem~weight"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~Tablet~D"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~CigTab~D"
"getLeastSquaresProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getLeastSquaresProblem"
"StatisticalReferenceDatasetFactory","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory"
"axisratio",\N
"axisratio",\N
"getModelDerivatives","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getModelDerivatives~D~\\[D"
"createAll","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createAll"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~value~\\[D"
"x",\N
"createBufferedReaderFromResource","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createBufferedReaderFromResource~QString;"
"x",\N
"x",\N
"a",\N
"name",\N
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes"
"getModelValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getModelValue~D~\\[D"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~CigTab"
"createHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createHahn1"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~TwoAxes"
"x",\N
"createKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createKirby2"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~CigTab~D"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~TwoAxes~D"
"a",\N
"axisratio",\N
"createLanczos1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createLanczos1"
"getName","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getName"
"axisratio",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~value~\\[D"
"createMGH17","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createMGH17"
"getNumObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumObservations"
"x",\N
"x",\N
"getNumParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumParameters"
"LevenbergMarquardtOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated"
"testBevington","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testBevington"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~TwoAxes"
"getNumStartingPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumStartingPoints"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~ElliRotated"
"testCircleFitting2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testCircleFitting2"
"getParameter","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameter~I"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~TwoAxes~D"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~ElliRotated~D"
"testConstraintsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testConstraintsUnsupported"
"axisratio",\N
"i",\N
"axisratio",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~value~\\[D"
"getParameterStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameterStandardDeviation~I"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~value~\\[D"
"testControlParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testControlParameters"
"i",\N
"x",\N
"x",\N
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testNonInvertible"
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameters"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli"
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~ElliRotated"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~Elli"
"getParametersStandardDeviations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParametersStandardDeviations"
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~BevingtonProblem"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~ElliRotated~D"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~Elli~D"
"getResidualSumOfSquares","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getResidualSumOfSquares"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~addPoint~D~D"
"axisratio",\N
"axisratio",\N
"getStartingPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getStartingPoint~I"
"t",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~value~\\[D"
"c",\N
"i",\N
"x",\N
"x",\N
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{RandomCirclePointGenerator.java[RandomCirclePointGenerator"
"getX","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getX~I"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli"
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{RandomCirclePointGenerator.java[RandomCirclePointGenerator~RandomCirclePointGenerator~D~D~D~D~D~J"
"MinusElli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[MinusElli"
"i",\N
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~Elli"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[MinusElli~value~\\[D"
"x",\N
"getY","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getY~I"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~Elli~D"
"x",\N
"y",\N
"i",\N
"radius",\N
"DiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[DiffPow"
"axisratio",\N
"LeastSquaresProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StatisticalReferenceDataset.java[StatisticalReferenceDataset[LeastSquaresProblem"
"xSigma",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[DiffPow~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~value~\\[D"
"AbstractLeastSquaresOptimizerAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest"
"ySigma",\N
"x",\N
"x",\N
"doTestStRD","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~doTestStRD~QStatisticalReferenceDataset;~D~D"
"seed",\N
"SsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[SsDiffPow"
"MinusElli","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[MinusElli"
"dataset",\N
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[SsDiffPow~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[MinusElli~value~\\[D"
"errParams",\N
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~RandomStraightLinePointGenerator~D~D~D~D~D~J"
"x",\N
"x",\N
"errParamsSd",\N
"a",\N
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFitting"
"b",\N
"DiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[DiffPow"
"Rosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rosen"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[DiffPow~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rosen~value~\\[D"
"sigma",\N
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingBadInit"
"lo",\N
"x",\N
"x",\N
"testCircleFittingGoodInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingGoodInit"
"hi",\N
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley"
"SsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[SsDiffPow"
"seed",\N
"testGetIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testGetIterations"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~Ackley~D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[SsDiffPow~value~\\[D"
"generate","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~generate~I"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testHahn1"
"axra",\N
"x",\N
"n",\N
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~Ackley"
"Rosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rosen"
"testIllConditioned","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testIllConditioned"
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rosen~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~value~\\[D"
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~StraightLineProblem~D"
"testInconsistentEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentEquations"
"x",\N
"x",\N
"error",\N
"testInconsistentSizes1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes1"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~addPoint~D~D"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~Ackley~D"
"testInconsistentSizes2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes2"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~Rastrigin"
"px",\N
"axra",\N
"testKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testKirby2"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~Rastrigin~D~D"
"py",\N
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~Ackley"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersSimple"
"solve","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~solve"
"axisratio",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~value~\\[D"
"amplitude",\N
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~target"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersUnsorted"
"x",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~value~\\[D"
"testNoDependency","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNoDependency"
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~weight"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin"
"x",\N
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~Rastrigin"
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNonInvertible"
"x","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~x"
"Basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~Rastrigin~D~D"
"GenBasis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis~GenBasis~I"
"y","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem~y"
"testOneSet","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testOneSet"
"DIM",\N
"axisratio",\N
"testQRColumnsPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testQRColumnsPermutation"
"Model","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem[Model"
"amplitude",\N
"Rotate","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis~Rotate~\\[D"
"Model","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem[Model~Model~D~D"
"testRedundantEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testRedundantEquations"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~value~\\[D"
"x",\N
"a",\N
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTrivial"
"x",\N
"basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis^basis"
"b",\N
"Basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem[Model~value~D"
"testTwoSets","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTwoSets"
"rand","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis^rand"
"GenBasis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis~GenBasis~I"
"x",\N
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem"
"AbstractLeastSquaresOptimizerTestValidation","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation"
"DIM",\N
"a","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem[Model^a"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"testParametersErrorMonteCarloObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation~testParametersErrorMonteCarloObservations"
"Rotate","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis~Rotate~\\[D"
"factors",\N
"b","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{StraightLineProblem.java[StraightLineProblem[Model^b"
"testParametersErrorMonteCarloParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation~testParametersErrorMonteCarloParameters"
"x",\N
"target",\N
"GaussNewtonOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest"
"basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis^basis"
"DummyOptimizer","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTestValidation.java[DummyOptimizer"
"MinpackTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest"
"DummyOptimizer","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTestValidation.java[DummyOptimizer~DummyOptimizer"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testCircleFittingBadInit"
"rand","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.scalar.noderiv{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis^rand"
"testMinpackBard","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackBard"
"testConstraintsUnsupported","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testConstraintsUnsupported"
"AbstractLeastSquaresOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest"
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleVectorial.java[CircleVectorial"
"testMinpackBox3Dimensional","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackBox3Dimensional"
"testComputeSigma","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testComputeSigma"
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleVectorial.java[CircleVectorial~CircleVectorial"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testHahn1"
"testMinpackBrownAlmostLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackBrownAlmostLinear"
"testGetChiSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testGetChiSquare"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleVectorial.java[CircleVectorial~addPoint~D~D"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMaxEvaluations"
"testMinpackBrownDennis","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackBrownDennis"
"testGetRMS","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testGetRMS"
"px",\N
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMoreEstimatedParametersSimple"
"testMinpackChebyquad","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackChebyquad"
"py",\N
"MultiStartUnivariateOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMoreEstimatedParametersUnsorted"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{CircleVectorial.java[CircleVectorial~getN"
"testMinpackFreudensteinRoth","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackFreudensteinRoth"
"testBadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest~testBadFunction"
"BracketFinderTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BracketFinderTest.java[BracketFinderTest"
"BrentOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest"
"testMissingMaxEval","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest~testMissingMaxEval"
"testMinpackHelicalValley","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackHelicalValley"
"testCubicMax","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BracketFinderTest.java[BracketFinderTest~testCubicMax"
"testBoundaries","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testBoundaries"
"testMinpackJennrichSampson","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackJennrichSampson"
"testMissingSearchInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest~testMissingSearchInterval"
"testCubicMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BracketFinderTest.java[BracketFinderTest~testCubicMin"
"testKeepInitIfBest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testKeepInitIfBest"
"testMinpackKowalikOsborne","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackKowalikOsborne"
"testQuinticMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest~testQuinticMin"
"testIntervalBoundsOrdering","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BracketFinderTest.java[BracketFinderTest~testIntervalBoundsOrdering"
"testMath832","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMath832"
"testSinMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest~testSinMin"
"testMinpackLinearFullRank","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackLinearFullRank"
"testMinimumIsOnIntervalBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BracketFinderTest.java[BracketFinderTest~testMinimumIsOnIntervalBoundary"
"testMath855","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMath855"
"LocalException","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{MultiStartUnivariateOptimizerTest.java[MultiStartUnivariateOptimizerTest[LocalException"
"testMinpackLinearRank1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackLinearRank1"
"SimpleUnivariateValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest"
"testMinEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMinEndpoints"
"PointValuePairTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{PointValuePairTest.java[PointValuePairTest"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheck"
"testMinpackLinearRank1ZeroColsAndRows","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackLinearRank1ZeroColsAndRows"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{PointValuePairTest.java[PointValuePairTest~testSerial"
"testQuinticMax","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMax"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheckDisabled"
"testMinpackMeyer","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackMeyer"
"PointVectorValuePairTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{PointVectorValuePairTest.java[PointVectorValuePairTest"
"testQuinticMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMin"
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheckPrecondition"
"testMinpackOsborne1","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackOsborne1"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{PointVectorValuePairTest.java[PointVectorValuePairTest~testSerial"
"testQuinticMinStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMinStatistics"
"MultivariateDifferentiableVectorMultiStartOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest"
"testMinpackOsborne2","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackOsborne2"
"SimplePointCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimplePointCheckerTest.java[SimplePointCheckerTest"
"testNoOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest~testNoOptimum"
"testSinMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testSinMin"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheck"
"testMinpackPowellSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackPowellSingular"
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest~testTrivial"
"testSinMinWithValueChecker","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testSinMinWithValueChecker"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheckDisabled"
"testMinpackRosenbrok","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackRosenbrok"
"TestException","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest[TestException"
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimplePointCheckerTest.java[SimplePointCheckerTest~testIterationCheckPrecondition"
"SimpleVectorValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest"
"testMinpackWatson","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest~testMinpackWatson"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest[LinearProblem"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheck"
"MultivariateDifferentiableMultiStartOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableMultiStartOptimizerTest.java[MultivariateDifferentiableMultiStartOptimizerTest"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheckDisabled"
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableMultiStartOptimizerTest.java[MultivariateDifferentiableMultiStartOptimizerTest~testCircleFitting"
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~MinpackFunction~I~\\[D~D~\\[D"
"factors",\N
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleVectorValueCheckerTest.java[SimpleVectorValueCheckerTest~testIterationCheckPrecondition"
"MultivariateMultiStartOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest"
"target",\N
"m",\N
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest~testRosenbrock"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest[LinearProblem~value~\\[D"
"startParams",\N
"SimpleValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleValueCheckerTest.java[SimpleValueCheckerTest"
"theoreticalMinCost",\N
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest[Rosenbrock"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheck"
"variables",\N
"theoreticalMinParams",\N
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest[Rosenbrock~Rosenbrock"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateDifferentiableVectorMultiStartOptimizerTest.java[MultivariateDifferentiableVectorMultiStartOptimizerTest[LinearProblem^target"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheckDisabled"
"buildArray","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~buildArray~I~D"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest[Rosenbrock~getCount"
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{SimpleValueCheckerTest.java[SimpleValueCheckerTest~testIterationCheckPrecondition"
"SimplexOptimizerMultiDirectionalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest"
"n",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization{MultivariateMultiStartOptimizerTest.java[MultivariateMultiStartOptimizerTest[Rosenbrock~value~\\[D"
"testMath283","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMath283"
"x",\N
"MultivariateFunctionMappingAdapterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest"
"x",\N
"testMaximize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMaximize1"
"checkTheoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~checkTheoreticalMinCost~D"
"testHalfBounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testHalfBounded"
"BOBYQAOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest"
"rms",\N
"testMaximize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMaximize2"
"testOptimumOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testOptimumOutsideRange"
"testAckley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testAckley"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~computeJacobian~\\[D"
"testMinimize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMinimize1"
"testBoundariesDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testBoundariesDimensionMismatch"
"testStartSimplexInsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testStartSimplexInsideRange"
"variables",\N
"testMinimize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testMinimize2"
"testUnbounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest~testUnbounded"
"testCigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testCigTab"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~computeValue~\\[D"
"testPowell","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testPowell"
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic"
"variables",\N
"testCigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testCigar"
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~BiQuadratic~D~D~D~D~D~D"
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest~testRosenbrock"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~getN"
"testConstrainedRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testConstrainedRosen"
"xOptimum",\N
"FourExtrema","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema"
"getStartPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~getStartPoint"
"yOptimum",\N
"testConstrainedRosenWithMoreInterpolationPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testConstrainedRosenWithMoreInterpolationPoints"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema~value~\\[D"
"xMin",\N
"getTarget","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~getTarget"
"testDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testDiffPow"
"variables",\N
"xMax",\N
"valueXmYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXmYm"
"getWeight","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~getWeight"
"yMin",\N
"testElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testElliRotated"
"yMax",\N
"valueXmYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXmYp"
"setCostAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~setCostAccuracy~D"
"testEllipse","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testEllipse"
"getBoundedXOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getBoundedXOptimum"
"costAccuracy",\N
"valueXpYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXpYm"
"testInitOutOfBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testInitOutOfBounds"
"getBoundedYOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getBoundedYOptimum"
"setParamsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction~setParamsAccuracy~D"
"valueXpYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^valueXpYp"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testMaxEvaluations"
"getLower","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getLower"
"paramsAccuracy",\N
"xM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^xM"
"testMaximize","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testMaximize"
"costAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^costAccuracy"
"getUpper","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~getUpper"
"xP","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^xP"
"testProblemDimensionTooSmall","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testProblemDimensionTooSmall"
"m","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^m"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionMappingAdapterTest.java[MultivariateFunctionMappingAdapterTest[BiQuadratic~value~\\[D"
"yM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^yM"
"testRastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testRastrigin"
"n","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^n"
"point",\N
"yP","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[FourExtrema^yP"
"testRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testRosen"
"paramsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^paramsAccuracy"
"MultivariateFunctionPenaltyAdapterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest"
"Gaussian2D","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D"
"testHalfBounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testHalfBounded"
"testSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testSphere"
"startParams","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^startParams"
"Gaussian2D","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~Gaussian2D~D~D~D"
"testOptimumOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testOptimumOutsideRange"
"testSsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testSsDiffPow"
"theoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinCost"
"xOpt",\N
"testStartSimplexInsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testStartSimplexInsideRange"
"testTablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testTablet"
"yOpt",\N
"theoreticalMinParams","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinParams"
"std",\N
"testStartSimplexOutsideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testStartSimplexOutsideRange"
"testTwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest~testTwoAxes"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearFullRankFunction"
"getMaximum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~getMaximum"
"testUnbounded","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest~testUnbounded"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearFullRankFunction~LinearFullRankFunction~I~I~D~D~D"
"DIM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest^DIM"
"getMaximumPosition","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~getMaximumPosition"
"m",\N
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic"
"Sphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Sphere"
"n",\N
"BiQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~BiQuadratic~D~D~D~D~D~D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerMultiDirectionalTest.java[SimplexOptimizerMultiDirectionalTest[Gaussian2D~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Sphere~value~\\[D"
"x0",\N
"xOptimum",\N
"point",\N
"x",\N
"theoreticalStartCost",\N
"yOptimum",\N
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar"
"CMAESOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest"
"theoreticalMinCost",\N
"xMin",\N
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~Cigar"
"testAckley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testAckley"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearFullRankFunction~computeJacobian~\\[D"
"xMax",\N
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~Cigar~D"
"testBoundariesDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testBoundariesDimensionMismatch"
"variables",\N
"yMin",\N
"axisratio",\N
"yMax",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearFullRankFunction~computeValue~\\[D"
"testCigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigTab"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Cigar~value~\\[D"
"getBoundedXOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getBoundedXOptimum"
"variables",\N
"testCigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigar"
"x",\N
"getBoundedYOptimum","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getBoundedYOptimum"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1Function"
"testCigarWithBoundaries","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testCigarWithBoundaries"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1Function~LinearRank1Function~I~I~D~D~D"
"getLower","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getLower"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~Tablet"
"testConstrainedRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testConstrainedRosen"
"m",\N
"getUpper","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~getUpper"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~Tablet~D"
"n",\N
"testDiagonalRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testDiagonalRosen"
"x0",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{MultivariateFunctionPenaltyAdapterTest.java[MultivariateFunctionPenaltyAdapterTest[BiQuadratic~value~\\[D"
"axisratio",\N
"testDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testDiffPow"
"theoreticalStartCost",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Tablet~value~\\[D"
"point",\N
"theoreticalMinCost",\N
"testElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testElliRotated"
"PowellOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{PowellOptimizerTest.java[PowellOptimizerTest"
"x",\N
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1Function~computeJacobian~\\[D"
"testEllipse","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testEllipse"
"testMaximizeQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{PowellOptimizerTest.java[PowellOptimizerTest~testMaximizeQuadratic"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab"
"variables",\N
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~CigTab"
"testFitAccuracyDependsOnBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testFitAccuracyDependsOnBoundary"
"testQuadratic","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{PowellOptimizerTest.java[PowellOptimizerTest~testQuadratic"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1Function~computeValue~\\[D"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~CigTab~D"
"testRelativeToleranceOnScaledValues","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{PowellOptimizerTest.java[PowellOptimizerTest~testRelativeToleranceOnScaledValues"
"testInitOutofbounds1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testInitOutofbounds1"
"variables",\N
"axisratio",\N
"testInitOutofbounds2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testInitOutofbounds2"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction"
"testSumSinc","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{PowellOptimizerTest.java[PowellOptimizerTest~testSumSinc"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[CigTab~value~\\[D"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~LinearRank1ZeroColsAndRowsFunction~I~I~D"
"testInputSigmaDimensionMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaDimensionMismatch"
"SimplexOptimizerNelderMeadTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest"
"x",\N
"m",\N
"testLeastSquares1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares1"
"testInputSigmaNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaNegative"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes"
"n",\N
"testLeastSquares2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares2"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~TwoAxes"
"x0",\N
"testInputSigmaOutOfRange","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testInputSigmaOutOfRange"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~computeJacobian~\\[D"
"testLeastSquares3","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testLeastSquares3"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~TwoAxes~D"
"testMath864","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testMath864"
"variables",\N
"testMaxIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaxIterations"
"axisratio",\N
"testMaximize","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testMaximize"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~computeValue~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[TwoAxes~value~\\[D"
"testMaximize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaximize1"
"testRastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testRastrigin"
"variables",\N
"x",\N
"testMaximize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMaximize2"
"testRosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testRosen"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[RosenbrockFunction"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[RosenbrockFunction~RosenbrockFunction~\\[D~D"
"testMinimize1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMinimize1"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~ElliRotated"
"testSphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testSphere"
"startParams",\N
"testMinimize2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testMinimize2"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~ElliRotated~D"
"testSsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testSsDiffPow"
"theoreticalStartCost",\N
"testPowell","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testPowell"
"axisratio",\N
"testTablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testTablet"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[RosenbrockFunction~computeJacobian~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[ElliRotated~value~\\[D"
"testRosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest~testRosenbrock"
"variables",\N
"testTwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest~testTwoAxes"
"x",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[RosenbrockFunction~computeValue~\\[D"
"FourExtrema","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema"
"DIM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest^DIM"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema~value~\\[D"
"variables",\N
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~Elli"
"LAMBDA","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest^LAMBDA"
"variables",\N
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[HelicalValleyFunction"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~Elli~D"
"Sphere","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Sphere"
"valueXmYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXmYm"
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[HelicalValleyFunction~HelicalValleyFunction~\\[D~D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Sphere~value~\\[D"
"axisratio",\N
"startParams",\N
"valueXmYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXmYp"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Elli~value~\\[D"
"theoreticalStartCost",\N
"x",\N
"valueXpYm","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXpYm"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[HelicalValleyFunction~computeJacobian~\\[D"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar"
"x",\N
"valueXpYp","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^valueXpYp"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~Cigar"
"MinusElli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[MinusElli"
"variables",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[MinusElli~value~\\[D"
"xM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^xM"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[HelicalValleyFunction~computeValue~\\[D"
"Cigar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~Cigar~D"
"xP","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^xP"
"variables",\N
"x",\N
"axisratio",\N
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[PowellSingularFunction"
"yM","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^yM"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Cigar~value~\\[D"
"DiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[DiffPow"
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[PowellSingularFunction~PowellSingularFunction~\\[D~D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[DiffPow~value~\\[D"
"x",\N
"yP","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[FourExtrema^yP"
"startParams",\N
"x",\N
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet"
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock"
"theoreticalStartCost",\N
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~Tablet"
"SsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[SsDiffPow"
"Rosenbrock","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~Rosenbrock"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[PowellSingularFunction~computeJacobian~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[SsDiffPow~value~\\[D"
"Tablet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~Tablet~D"
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~getCount"
"variables",\N
"x",\N
"axisratio",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[PowellSingularFunction~computeValue~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Rosenbrock~value~\\[D"
"Rosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rosen"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Tablet~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rosen~value~\\[D"
"variables",\N
"x",\N
"x",\N
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[FreudensteinRothFunction"
"x",\N
"Powell","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab"
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[FreudensteinRothFunction~FreudensteinRothFunction~\\[D~D~D~\\[D"
"Powell","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~Powell"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~CigTab"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~Ackley~D"
"startParams",\N
"getCount","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~getCount"
"CigTab","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~CigTab~D"
"theoreticalStartCost",\N
"axra",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{SimplexOptimizerNelderMeadTest.java[SimplexOptimizerNelderMeadTest[Powell~value~\\[D"
"theoreticalMinCost",\N
"axisratio",\N
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~Ackley"
"theoreticalMinParams",\N
"x",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[CigTab~value~\\[D"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Ackley~value~\\[D"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[FreudensteinRothFunction~computeJacobian~\\[D"
"CurveFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest"
"x",\N
"x",\N
"variables",\N
"testMath303","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest~testMath303"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[FreudensteinRothFunction~computeValue~\\[D"
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~TwoAxes"
"testMath304","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest~testMath304"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~Rastrigin"
"variables",\N
"TwoAxes","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~TwoAxes~D"
"testMath372","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest~testMath372"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~Rastrigin~D~D"
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BardFunction"
"axisratio",\N
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BardFunction~BardFunction~D~D~D~\\[D"
"SimpleInverseFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction"
"axisratio",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[TwoAxes~value~\\[D"
"gradient","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction~gradient~D~\\[D"
"amplitude",\N
"x0",\N
"x",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Rastrigin~value~\\[D"
"theoreticalStartCost",\N
"x",\N
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated"
"theoreticalMinCost",\N
"doubles",\N
"x",\N
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~ElliRotated"
"theoreticalMinParams",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{CurveFitterTest.java[CurveFitterTest[SimpleInverseFunction~value~D~\\[D"
"Basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BardFunction~computeJacobian~\\[D"
"ElliRotated","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~ElliRotated~D"
"GenBasis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis~GenBasis~I"
"x",\N
"variables",\N
"parameters",\N
"DIM",\N
"axisratio",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BardFunction~computeValue~\\[D"
"GaussianFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[ElliRotated~value~\\[D"
"Rotate","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis~Rotate~\\[D"
"testFit01","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit01"
"variables",\N
"x",\N
"x",\N
"testFit02","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit02"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[KowalikOsborneFunction"
"basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis^basis"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[KowalikOsborneFunction~KowalikOsborneFunction~\\[D~D~D~\\[D"
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~Elli"
"testFit03","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit03"
"rand","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{BOBYQAOptimizerTest.java[BOBYQAOptimizerTest[Basis^rand"
"startParams",\N
"Elli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~Elli~D"
"testFit04","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit04"
"HarmonicFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest"
"theoreticalStartCost",\N
"axisratio",\N
"test1PercentError","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~test1PercentError"
"theoreticalMinCost",\N
"testFit05","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit05"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Elli~value~\\[D"
"theoreticalMinParams",\N
"testInitialGuess","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testInitialGuess"
"testFit06","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit06"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[KowalikOsborneFunction~computeJacobian~\\[D"
"x",\N
"testMath844","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testMath844"
"testFit07","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testFit07"
"MinusElli","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[MinusElli"
"variables",\N
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testNoError"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[MinusElli~value~\\[D"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[KowalikOsborneFunction~computeValue~\\[D"
"testMath519","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testMath519"
"x",\N
"testPreconditions1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testPreconditions1"
"variables",\N
"testMath798","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest~testMath798"
"DiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[DiffPow"
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MeyerFunction"
"testTinyVariationsData","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testTinyVariationsData"
"DATASET1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET1"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[DiffPow~value~\\[D"
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MeyerFunction~MeyerFunction~\\[D~D~D~\\[D"
"testUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{HarmonicFitterTest.java[HarmonicFitterTest~testUnsorted"
"DATASET2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET2"
"x",\N
"startParams",\N
"SsDiffPow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[SsDiffPow"
"theoreticalStartCost",\N
"DATASET3","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET3"
"PolynomialFitterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[SsDiffPow~value~\\[D"
"theoreticalMinCost",\N
"testFit","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testFit"
"DATASET4","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET4"
"theoreticalMinParams",\N
"x",\N
"testLargeSample","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testLargeSample"
"DATASET5","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{GaussianFitterTest.java[GaussianFitterTest^DATASET5"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MeyerFunction~computeJacobian~\\[D"
"Rosen","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rosen"
"testMath798","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rosen~value~\\[D"
"variables",\N
"AbstractLeastSquaresOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[MeyerFunction~computeValue~\\[D"
"testMath798WithToleranceTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798WithToleranceTooLow"
"testComputeSigma","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testComputeSigma"
"x",\N
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley"
"variables",\N
"testGetChiSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testGetChiSquare"
"testMath798WithToleranceTooLowButNoException","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testMath798WithToleranceTooLowButNoException"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~Ackley~D"
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[WatsonFunction"
"testGetRMS","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTest.java[AbstractLeastSquaresOptimizerTest~testGetRMS"
"testNoError","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testNoError"
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[WatsonFunction~WatsonFunction~I~D~D~D~\\[D"
"axra",\N
"testRedundantSolvable","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testRedundantSolvable"
"Ackley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~Ackley"
"CircleScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleScalar.java[CircleScalar"
"n",\N
"CircleScalar","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleScalar.java[CircleScalar~CircleScalar"
"x0",\N
"testRedundantUnsolvable","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testRedundantUnsolvable"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Ackley~value~\\[D"
"theoreticalStartCost",\N
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleScalar.java[CircleScalar~addPoint~D~D"
"testSmallError","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.fitting{PolynomialFitterTest.java[PolynomialFitterTest~testSmallError"
"x",\N
"theoreticalMinCost",\N
"px",\N
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin"
"theoreticalMinParams",\N
"StatisticalReferenceDatasetFactory","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory"
"py",\N
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~Rastrigin"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[WatsonFunction~computeJacobian~\\[D"
"createAll","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createAll"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleScalar.java[CircleScalar~value~\\[D"
"Rastrigin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~Rastrigin~D~D"
"variables",\N
"createBufferedReaderFromResource","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createBufferedReaderFromResource~QString;"
"variables",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[WatsonFunction~computeValue~\\[D"
"axisratio",\N
"name",\N
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleProblem.java[CircleProblem"
"amplitude",\N
"variables",\N
"CircleProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleProblem.java[CircleProblem~CircleProblem~D~D"
"createHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createHahn1"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Rastrigin~value~\\[D"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Box3DimensionalFunction"
"xError",\N
"createKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createKirby2"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Box3DimensionalFunction~Box3DimensionalFunction~I~\\[D~D"
"x",\N
"yError",\N
"createLanczos1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createLanczos1"
"Basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis"
"m",\N
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleProblem.java[CircleProblem~target"
"GenBasis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis~GenBasis~I"
"createMGH17","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDatasetFactory.java[StatisticalReferenceDatasetFactory~createMGH17"
"startParams",\N
"theoreticalStartCost",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleProblem.java[CircleProblem~value~\\[D"
"DIM",\N
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Box3DimensionalFunction~computeJacobian~\\[D"
"Rotate","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis~Rotate~\\[D"
"params",\N
"StraightLineProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~StraightLineProblem~D"
"variables",\N
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleProblem.java[CircleProblem~weight"
"x",\N
"error",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Box3DimensionalFunction~computeValue~\\[D"
"basis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis^basis"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~addPoint~D~D"
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset"
"variables",\N
"StatisticalReferenceDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~StatisticalReferenceDataset~QBufferedReader;"
"rand","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.direct{CMAESOptimizerTest.java[CMAESOptimizerTest[Basis^rand"
"px",\N
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[JennrichSampsonFunction"
"py",\N
"in",\N
"NonLinearConjugateGradientOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest"
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[JennrichSampsonFunction~JennrichSampsonFunction~I~\\[D~D~D~\\[D"
"solve","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~solve"
"getData","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getData"
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testCircleFitting"
"m",\N
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~target"
"getName","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getName"
"testColumnsPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testColumnsPermutation"
"startParams",\N
"theoreticalStartCost",\N
"getNumObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumObservations"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~value~\\[D"
"testIllConditioned","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testIllConditioned"
"theoreticalMinCost",\N
"params",\N
"getNumParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumParameters"
"testInconsistentEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testInconsistentEquations"
"theoreticalMinParams",\N
"weight","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~weight"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[JennrichSampsonFunction~computeJacobian~\\[D"
"getNumStartingPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getNumStartingPoints"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testMoreEstimatedParametersSimple"
"x","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~x"
"variables",\N
"getParameter","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameter~I"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testMoreEstimatedParametersUnsorted"
"y","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem~y"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[JennrichSampsonFunction~computeValue~\\[D"
"i",\N
"testNoDependency","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testNoDependency"
"variables",\N
"getParameterStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameterStandardDeviation~I"
"Model","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem[Model"
"testNonInversible","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testNonInversible"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StraightLineProblem.java[StraightLineProblem[Model~value~D"
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownDennisFunction"
"i",\N
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownDennisFunction~BrownDennisFunction~I~\\[D~D~D~\\[D"
"testOneSet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testOneSet"
"x",\N
"getParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParameters"
"m",\N
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{RandomCirclePointGenerator.java[RandomCirclePointGenerator"
"testRedundantEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testRedundantEquations"
"getParametersStandardDeviations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getParametersStandardDeviations"
"startParams",\N
"RandomCirclePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{RandomCirclePointGenerator.java[RandomCirclePointGenerator~RandomCirclePointGenerator~D~D~D~D~D~J"
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testTrivial"
"theoreticalStartCost",\N
"getResidualSumOfSquares","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getResidualSumOfSquares"
"x",\N
"theoreticalMinCost",\N
"testTwoSets","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest~testTwoSets"
"getStartingPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getStartingPoint~I"
"y",\N
"theoreticalMinParams",\N
"radius",\N
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem"
"i",\N
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownDennisFunction~computeJacobian~\\[D"
"xSigma",\N
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"getX","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getX~I"
"variables",\N
"ySigma",\N
"factors",\N
"i",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownDennisFunction~computeValue~\\[D"
"seed",\N
"target",\N
"getY","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{StatisticalReferenceDataset.java[StatisticalReferenceDataset~getY~I"
"LevenbergMarquardtOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest"
"variables",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem~value~\\[D"
"testBevington","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testBevington"
"i",\N
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[ChebyquadFunction"
"variables",\N
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[ChebyquadFunction~ChebyquadFunction~I~I~D~D~D~\\[D"
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator"
"testCircleFitting2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testCircleFitting2"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{NonLinearConjugateGradientOptimizerTest.java[NonLinearConjugateGradientOptimizerTest[LinearProblem^target"
"RandomStraightLinePointGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~RandomStraightLinePointGenerator~D~D~D~D~D~J"
"n",\N
"testControlParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testControlParameters"
"AbstractLeastSquaresOptimizerTestValidation","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation"
"m",\N
"a",\N
"testMath199","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testMath199"
"testParametersErrorMonteCarloObservations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation~testParametersErrorMonteCarloObservations"
"factor",\N
"b",\N
"theoreticalStartCost",\N
"sigma",\N
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest~testNonInvertible"
"testParametersErrorMonteCarloParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTestValidation.java[AbstractLeastSquaresOptimizerTestValidation~testParametersErrorMonteCarloParameters"
"theoreticalMinCost",\N
"lo",\N
"QuadraticProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[QuadraticProblem"
"DummyOptimizer","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTestValidation.java[DummyOptimizer"
"hi",\N
"theoreticalMinParams",\N
"QuadraticProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[QuadraticProblem~QuadraticProblem"
"DummyOptimizer","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerTestValidation.java[DummyOptimizer~DummyOptimizer"
"seed",\N
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[ChebyquadFunction~computeJacobian~\\[D"
"generate","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{RandomStraightLinePointGenerator.java[RandomStraightLinePointGenerator~generate~I"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[QuadraticProblem~addPoint~D~D"
"variables",\N
"MinpackTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest"
"n",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[ChebyquadFunction~computeValue~\\[D"
"testMinpackBard","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackBard"
"x",\N
"AbstractLeastSquaresOptimizerAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest"
"y",\N
"variables",\N
"testMinpackBox3Dimensional","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackBox3Dimensional"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[QuadraticProblem~value~\\[D"
"doTestStRD","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~doTestStRD~QStatisticalReferenceDataset;~D~D"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction"
"testMinpackBrownAlmostLinear","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackBrownAlmostLinear"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~BrownAlmostLinearFunction~I~D~D~D~\\[D"
"dataset",\N
"variables",\N
"testMinpackBrownDennis","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackBrownDennis"
"errParams",\N
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem"
"m",\N
"errParamsSd",\N
"BevingtonProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~BevingtonProblem"
"factor",\N
"testMinpackChebyquad","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackChebyquad"
"testCircleFitting","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFitting"
"theoreticalStartCost",\N
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~addPoint~D~D"
"testMinpackFreudensteinRoth","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackFreudensteinRoth"
"theoreticalMinCost",\N
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingBadInit"
"t",\N
"theoreticalMinParams",\N
"testMinpackHelicalValley","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackHelicalValley"
"c",\N
"testCircleFittingGoodInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testCircleFittingGoodInit"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~computeJacobian~\\[D"
"testMinpackJennrichSampson","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackJennrichSampson"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{LevenbergMarquardtOptimizerTest.java[LevenbergMarquardtOptimizerTest[BevingtonProblem~value~\\[D"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testHahn1"
"variables",\N
"testMinpackKowalikOsborne","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackKowalikOsborne"
"params",\N
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~computeValue~\\[D"
"testIllConditioned","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testIllConditioned"
"GaussNewtonOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest"
"testMinpackLinearFullRank","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackLinearFullRank"
"variables",\N
"testInconsistentEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentEquations"
"testCircleFittingBadInit","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testCircleFittingBadInit"
"testMinpackLinearRank1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackLinearRank1"
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne1Function"
"testHahn1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testHahn1"
"testInconsistentSizes1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes1"
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne1Function~Osborne1Function~\\[D~D~D~\\[D"
"testMinpackLinearRank1ZeroColsAndRows","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackLinearRank1ZeroColsAndRows"
"testInconsistentSizes2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testInconsistentSizes2"
"testMaxEvaluations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMaxEvaluations"
"startParams",\N
"testMinpackMeyer","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackMeyer"
"theoreticalStartCost",\N
"testKirby2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testKirby2"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMoreEstimatedParametersSimple"
"theoreticalMinCost",\N
"testMinpackOsborne1","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackOsborne1"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{GaussNewtonOptimizerTest.java[GaussNewtonOptimizerTest~testMoreEstimatedParametersUnsorted"
"testMoreEstimatedParametersSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersSimple"
"theoreticalMinParams",\N
"testMinpackOsborne2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackOsborne2"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne1Function~computeJacobian~\\[D"
"testMoreEstimatedParametersUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testMoreEstimatedParametersUnsorted"
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleVectorial.java[CircleVectorial"
"testMinpackPowellSingular","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackPowellSingular"
"variables",\N
"CircleVectorial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleVectorial.java[CircleVectorial~CircleVectorial"
"testNoDependency","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNoDependency"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne1Function~computeValue~\\[D"
"testMinpackRosenbrok","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackRosenbrok"
"addPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleVectorial.java[CircleVectorial~addPoint~D~D"
"testNonInvertible","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testNonInvertible"
"variables",\N
"testMinpackWatson","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest~testMinpackWatson"
"px",\N
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne2Function"
"testOneSet","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testOneSet"
"py",\N
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction"
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne2Function~Osborne2Function~\\[D~D~D~\\[D"
"testQRColumnsPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testQRColumnsPermutation"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleVectorial.java[CircleVectorial~getN"
"MinpackFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~MinpackFunction~I~\\[D~D~\\[D"
"startParams",\N
"m",\N
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{CircleVectorial.java[CircleVectorial~value~\\[D"
"testRedundantEquations","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testRedundantEquations"
"theoreticalStartCost",\N
"startParams",\N
"theoreticalMinCost",\N
"variables",\N
"testTrivial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTrivial"
"theoreticalMinCost",\N
"theoreticalMinParams",\N
"SimplexSolverTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest"
"theoreticalMinParams",\N
"testTwoSets","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest~testTwoSets"
"computeJacobian","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne2Function~computeJacobian~\\[D"
"testDegeneracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testDegeneracy"
"buildArray","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~buildArray~I~D"
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem"
"variables",\N
"testEpsilon","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testEpsilon"
"n",\N
"LinearProblem","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem~LinearProblem~\\[\\[D~\\[D"
"computeValue","=mathmain3.6/src<test.java.org.apache.commons.math3.optim.nonlinear.vector.jacobian{MinpackTest.java[MinpackTest[Osborne2Function~computeValue~\\[D"
"x",\N
"factors",\N
"testInfeasibleSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testInfeasibleSolution"
"checkTheoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~checkTheoreticalMinCost~D"
"variables",\N
"target",\N
"rms",\N
"testLargeModel","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testLargeModel"
"SimplexTableauTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexTableauTest.java[SimplexTableauTest"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem~value~\\[D"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~getN"
"testDropPhase1Objective","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexTableauTest.java[SimplexTableauTest~testDropPhase1Objective"
"testMath272","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath272"
"variables",\N
"getStartPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~getStartPoint"
"testInitialization","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexTableauTest.java[SimplexTableauTest~testInitialization"
"testMath286","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath286"
"target","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{AbstractLeastSquaresOptimizerAbstractTest.java[AbstractLeastSquaresOptimizerAbstractTest[LinearProblem^target"
"getTarget","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~getTarget"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexTableauTest.java[SimplexTableauTest~testSerial"
"testMath288","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath288"
"UnivariateMultiStartOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizerTest.java[UnivariateMultiStartOptimizerTest"
"getWeight","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~getWeight"
"testTableauWithNoArtificialVars","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexTableauTest.java[SimplexTableauTest~testTableauWithNoArtificialVars"
"testBadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizerTest.java[UnivariateMultiStartOptimizerTest~testBadFunction"
"testMath290GEQ","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath290GEQ"
"setCostAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~setCostAccuracy~D"
"testQuinticMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizerTest.java[UnivariateMultiStartOptimizerTest~testQuinticMin"
"SimpleUnivariateValueCheckerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest"
"testMath290LEQ","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath290LEQ"
"testIterationCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheck"
"costAccuracy",\N
"testSinMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizerTest.java[UnivariateMultiStartOptimizerTest~testSinMin"
"testMath293","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath293"
"setParamsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~setParamsAccuracy~D"
"testIterationCheckDisabled","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheckDisabled"
"LocalException","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{UnivariateMultiStartOptimizerTest.java[UnivariateMultiStartOptimizerTest[LocalException"
"testMath434NegativeVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434NegativeVariable"
"paramsAccuracy",\N
"testIterationCheckPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{SimpleUnivariateValueCheckerTest.java[SimpleUnivariateValueCheckerTest~testIterationCheckPrecondition"
"BracketFinderTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BracketFinderTest.java[BracketFinderTest"
"value","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction~value~\\[D"
"testMath434PivotRowSelection","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434PivotRowSelection"
"testCubicMax","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BracketFinderTest.java[BracketFinderTest~testCubicMax"
"BrentOptimizerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest"
"variables",\N
"testCubicMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BracketFinderTest.java[BracketFinderTest~testCubicMin"
"testMath434PivotRowSelection2","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434PivotRowSelection2"
"testBoundaries","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testBoundaries"
"costAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^costAccuracy"
"testKeepInitIfBest","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testKeepInitIfBest"
"testIntervalBoundsOrdering","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BracketFinderTest.java[BracketFinderTest~testIntervalBoundsOrdering"
"testMath434UnfeasibleSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath434UnfeasibleSolution"
"m","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^m"
"testMinimumIsOnIntervalBoundary","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BracketFinderTest.java[BracketFinderTest~testMinimumIsOnIntervalBoundary"
"testMath713NegativeVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath713NegativeVariable"
"testMath832","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMath832"
"n","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^n"
"testMath855","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMath855"
"testMath781","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath781"
"PrimesTest","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest"
"paramsAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^paramsAccuracy"
"assertNextPrimeException","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~assertNextPrimeException~I~QThrowable;"
"testMinEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testMinEndpoints"
"testMath828","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath828"
"startParams","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^startParams"
"n",\N
"testQuinticMax","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMax"
"testMath828Cycle","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMath828Cycle"
"expected",\N
"theoreticalMinCost","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinCost"
"assertPrimeFactorsException","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~assertPrimeFactorsException~I~QThrowable;"
"testMinimization","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testMinimization"
"testQuinticMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMin"
"theoreticalMinParams","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MinpackFunction^theoreticalMinParams"
"n",\N
"testModelWithNoArtificialVars","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testModelWithNoArtificialVars"
"testQuinticMinStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testQuinticMinStatistics"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearFullRankFunction"
"expected",\N
"testSinMin","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testSinMin"
"testRestrictVariablesToNonNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testRestrictVariablesToNonNegative"
"LinearFullRankFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearFullRankFunction~LinearFullRankFunction~I~I~D~D~D"
"checkPrimeFactors","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~checkPrimeFactors~QList\\<QInteger;>;"
"testSinMinWithValueChecker","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.univariate{BrentOptimizerTest.java[BrentOptimizerTest~testSinMinWithValueChecker"
"testSimplexSolver","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testSimplexSolver"
"m",\N
"factors",\N
"n",\N
"testSingleVariableAndConstraint","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testSingleVariableAndConstraint"
"product","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~product~QList\\<QInteger;>;"
"CorrelatedRandomVectorGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest"
"x0",\N
"CorrelatedRandomVectorGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~CorrelatedRandomVectorGeneratorTest"
"numbers",\N
"testSolutionWithNegativeDecisionVariable","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testSolutionWithNegativeDecisionVariable"
"theoreticalStartCost",\N
"sum","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~sum~QList\\<QInteger;>;"
"theoreticalMinCost",\N
"testMath226","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~testMath226"
"testTrivialModel","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testTrivialModel"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearRank1Function"
"numbers",\N
"testMeanAndCovariance","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~testMeanAndCovariance"
"testUnboundedSolution","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.linear{SimplexSolverTest.java[SimplexSolverTest~testUnboundedSolution"
"LinearRank1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearRank1Function~LinearRank1Function~I~I~D~D~D"
"testIsPrime","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~testIsPrime"
"testRank","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~testRank"
"RandomAdaptorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest"
"m",\N
"testNextPrime","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~testNextPrime"
"testAdaptor","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest~testAdaptor"
"n",\N
"testRootMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~testRootMatrix"
"testPrimeFactors","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest~testPrimeFactors"
"x0",\N
"ConstantGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator"
"testSampleWithZeroCovariance","=mathmain3.6/src<test.java.org.apache.commons.math3.random{CorrelatedRandomVectorGeneratorTest.java[CorrelatedRandomVectorGeneratorTest~testSampleWithZeroCovariance"
"theoreticalStartCost",\N
"BELOW_2","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest^BELOW_2"
"ConstantGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~ConstantGenerator"
"theoreticalMinCost",\N
"GaussianRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{GaussianRandomGeneratorTest.java[GaussianRandomGeneratorTest"
"NOT_PRIMES","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest^NOT_PRIMES"
"ConstantGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~ConstantGenerator~D"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction"
"testMeanAndStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.random{GaussianRandomGeneratorTest.java[GaussianRandomGeneratorTest~testMeanAndStandardDeviation"
"LinearRank1ZeroColsAndRowsFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[LinearRank1ZeroColsAndRowsFunction~LinearRank1ZeroColsAndRowsFunction~I~I~D"
"value",\N
"PRIMES","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest^PRIMES"
"ISAACTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ISAACTest.java[ISAACTest"
"nextBoolean","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextBoolean"
"m",\N
"PRIMES_SET","=mathmain3.6/src<test.java.org.apache.commons.math3.primes{PrimesTest.java[PrimesTest^PRIMES_SET"
"testReference","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ISAACTest.java[ISAACTest~testReference"
"n",\N
"nextBytes","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextBytes~\\[B"
"x0",\N
"TestRandomGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.random{TestRandomGenerator.java[TestRandomGenerator"
"SobolSequenceGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest"
"bytes",\N
"nextDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.random{TestRandomGenerator.java[TestRandomGenerator~nextDouble"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[RosenbrockFunction"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest~setUp"
"nextDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextDouble"
"RosenbrockFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[RosenbrockFunction~RosenbrockFunction~\\[D~D"
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{TestRandomGenerator.java[TestRandomGenerator~setSeed~J"
"test3DReference","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest~test3DReference"
"nextFloat","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextFloat"
"startParams",\N
"seed",\N
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest~testConstructor"
"theoreticalStartCost",\N
"nextGaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextGaussian"
"RandomGeneratorFactoryTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorFactoryTest.java[RandomGeneratorFactoryTest"
"testConstructor2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest~testConstructor2"
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[HelicalValleyFunction"
"SynchronizedRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SynchronizedRandomGeneratorTest.java[SynchronizedRandomGeneratorTest"
"nextInt","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextInt"
"HelicalValleyFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[HelicalValleyFunction~HelicalValleyFunction~\\[D~D"
"testSkip","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SobolSequenceGeneratorTest.java[SobolSequenceGeneratorTest~testSkip"
"testAdapter","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SynchronizedRandomGeneratorTest.java[SynchronizedRandomGeneratorTest~testAdapter"
"nextInt","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextInt~I"
"startParams",\N
"testMath899Sync","=mathmain3.6/src<test.java.org.apache.commons.math3.random{SynchronizedRandomGeneratorTest.java[SynchronizedRandomGeneratorTest~testMath899Sync"
"EmpiricalDistributionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest"
"theoreticalStartCost",\N
"n",\N
"makeCumulativeTestPoints","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~makeCumulativeTestPoints"
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[PowellSingularFunction"
"nextLong","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~nextLong"
"Well44497bTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well44497bTest.java[Well44497bTest"
"PowellSingularFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[PowellSingularFunction~PowellSingularFunction~\\[D~D"
"makeCumulativeTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~makeCumulativeTestValues"
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well44497bTest.java[Well44497bTest~testReferenceCode"
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~setSeed~I"
"startParams",\N
"makeDensityTestValues","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~makeDensityTestValues"
"Well512aTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well512aTest.java[Well512aTest"
"seed",\N
"theoreticalStartCost",\N
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well512aTest.java[Well512aTest~testReferenceCode"
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~setSeed~\\[I"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~setUp"
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[FreudensteinRothFunction"
"Well19937cTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well19937cTest.java[Well19937cTest"
"FreudensteinRothFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[FreudensteinRothFunction~FreudensteinRothFunction~\\[D~D~D~\\[D"
"seed",\N
"testBinIndexOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testBinIndexOverflow"
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well19937cTest.java[Well19937cTest~testReferenceCode"
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomAdaptorTest.java[RandomAdaptorTest[ConstantGenerator~setSeed~J"
"startParams",\N
"testDensityIntegrals","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testDensityIntegrals"
"UncorrelatedRandomVectorGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGeneratorTest.java[UncorrelatedRandomVectorGeneratorTest"
"theoreticalStartCost",\N
"seed",\N
"UncorrelatedRandomVectorGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGeneratorTest.java[UncorrelatedRandomVectorGeneratorTest~UncorrelatedRandomVectorGeneratorTest"
"testDoubleLoad","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testDoubleLoad"
"theoreticalMinCost",\N
"UniformRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UniformRandomGeneratorTest.java[UniformRandomGeneratorTest"
"theoreticalMinParams",\N
"testGeneratorConfig","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testGeneratorConfig"
"testMeanAndStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UniformRandomGeneratorTest.java[UniformRandomGeneratorTest~testMeanAndStandardDeviation"
"testMeanAndCorrelation","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UncorrelatedRandomVectorGeneratorTest.java[UncorrelatedRandomVectorGeneratorTest~testMeanAndCorrelation"
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BardFunction"
"testGetBinUpperBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testGetBinUpperBounds"
"BardFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BardFunction~BardFunction~D~D~D~\\[D"
"StableRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest"
"MersenneTwisterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{MersenneTwisterTest.java[MersenneTwisterTest"
"testMakotoNishimura","=mathmain3.6/src<test.java.org.apache.commons.math3.random{MersenneTwisterTest.java[MersenneTwisterTest~testMakotoNishimura"
"testAlphaRangeAboveTwo","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testAlphaRangeAboveTwo"
"testGridTooFat","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testGridTooFat"
"x0",\N
"theoreticalStartCost",\N
"testAlphaRangeBelowZero","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testAlphaRangeBelowZero"
"AbstractRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{AbstractRandomGeneratorTest.java[AbstractRandomGeneratorTest"
"testGridTooFine","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testGridTooFine"
"theoreticalMinCost",\N
"AbstractRandomGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{AbstractRandomGeneratorTest.java[AbstractRandomGeneratorTest~AbstractRandomGeneratorTest"
"testBetaRangeAboveOne","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testBetaRangeAboveOne"
"testKernelOverrideConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testKernelOverrideConstant"
"theoreticalMinParams",\N
"ValueServerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest"
"testBetaRangeBelowMinusOne","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testBetaRangeBelowMinusOne"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[KowalikOsborneFunction"
"testKernelOverrideUniform","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testKernelOverrideUniform"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~setUp"
"KowalikOsborneFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[KowalikOsborneFunction~KowalikOsborneFunction~\\[D~D~D~\\[D"
"testCauchyCase","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testCauchyCase"
"testLoad","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testLoad"
"testEmptyDigestFile","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testEmptyDigestFile"
"startParams",\N
"testGaussianCase","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testGaussianCase"
"theoreticalStartCost",\N
"testLoadNullDoubleArray","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testLoadNullDoubleArray"
"testEmptyReplayFile","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testEmptyReplayFile"
"testNextDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.random{StableRandomGeneratorTest.java[StableRandomGeneratorTest~testNextDouble"
"theoreticalMinCost",\N
"theoreticalMinParams",\N
"testLoadNullFile","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testLoadNullFile"
"testFill","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testFill"
"RandomDataGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest"
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MeyerFunction"
"testFixedSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testFixedSeed"
"testLoadNullURL","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testLoadNullURL"
"RandomDataGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~RandomDataGeneratorTest"
"MeyerFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[MeyerFunction~MeyerFunction~\\[D~D~D~\\[D"
"testModes","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testModes"
"testNexFail","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testNexFail"
"checkNextPoissonConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~checkNextPoissonConsistency~D"
"startParams",\N
"testNextDigest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testNextDigest"
"mean",\N
"theoreticalStartCost",\N
"testNext","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testNext"
"theoreticalMinCost",\N
"testConfig","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testConfig"
"testNextDigestFail","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testNextDigestFail"
"testNoBinVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testNoBinVariance"
"theoreticalMinParams",\N
"testNextBeta","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextBeta"
"testProperties","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testProperties"
"testPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testPrecondition1"
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[WatsonFunction"
"WatsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[WatsonFunction~WatsonFunction~I~D~D~D~\\[D"
"testNextBinomial","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextBinomial"
"testReplay","=mathmain3.6/src<test.java.org.apache.commons.math3.random{ValueServerTest.java[ValueServerTest~testReplay"
"testReSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testReSeed"
"n",\N
"testNextCauchy","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextCauchy"
"RandomGeneratorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest"
"testSampleValuesRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testSampleValuesRange"
"x0",\N
"testNextChiSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextChiSquare"
"RandomGeneratorAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~RandomGeneratorAbstractTest"
"theoreticalStartCost",\N
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest~testSerialization"
"testNextExponential","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextExponential"
"theoreticalMinCost",\N
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~setUp"
"dataArray","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest^dataArray"
"theoreticalMinParams",\N
"testNextF","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextF"
"testNexBoolean2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNexBoolean2"
"file","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest^file"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Box3DimensionalFunction"
"testNextGamma","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextGamma"
"Box3DimensionalFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Box3DimensionalFunction~Box3DimensionalFunction~I~\\[D~D"
"testNexBytes","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNexBytes"
"n","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest^n"
"testNextGaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextGaussian"
"m",\N
"testNextBooleanDirect","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextBooleanDirect"
"url","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest^url"
"startParams",\N
"testNextHex","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextHex"
"testNextDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextDouble"
"theoreticalStartCost",\N
"ConstantKernelEmpiricalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest[ConstantKernelEmpiricalDistribution"
"testNextHypergeometric","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextHypergeometric"
"testNextFloatDirect","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextFloatDirect"
"ConstantKernelEmpiricalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest[ConstantKernelEmpiricalDistribution~ConstantKernelEmpiricalDistribution~I"
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[JennrichSampsonFunction"
"JennrichSampsonFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[JennrichSampsonFunction~JennrichSampsonFunction~I~\\[D~D~D~\\[D"
"testNextIntExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntExtremeValues"
"i",\N
"testNextInt2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextInt2"
"m",\N
"UniformKernelEmpiricalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest[UniformKernelEmpiricalDistribution"
"testNextIntIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntIAE"
"testNextIntDirect","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextIntDirect"
"startParams",\N
"UniformKernelEmpiricalDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.random{EmpiricalDistributionTest.java[EmpiricalDistributionTest[UniformKernelEmpiricalDistribution~UniformKernelEmpiricalDistribution~I"
"testNextIntNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntNegativeRange"
"theoreticalStartCost",\N
"testNextIntIAE2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextIntIAE2"
"i",\N
"theoreticalMinCost",\N
"testNextIntNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntNegativeToPositiveRange"
"testNextIntNeg","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextIntNeg"
"HaltonSequenceGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest"
"theoreticalMinParams",\N
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~setUp"
"testNextIntPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntPositiveRange"
"testNextLong2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextLong2"
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BrownDennisFunction"
"BrownDennisFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BrownDennisFunction~BrownDennisFunction~I~\\[D~D~D~\\[D"
"test2DUnscrambledReference","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~test2DUnscrambledReference"
"testNextIntWideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextIntWideRange"
"testNextLongDirect","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextLongDirect"
"m",\N
"test3DReference","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~test3DReference"
"testNextLongExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongExtremeValues"
"testNextSecureHex","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureHex"
"startParams",\N
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~testConstructor"
"testNextLongIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongIAE"
"theoreticalStartCost",\N
"testNextSecureIntIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureIntIAE"
"theoreticalMinCost",\N
"testConstructor2","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~testConstructor2"
"testNextLongNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongNegativeRange"
"testNextSecureIntNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureIntNegativeRange"
"theoreticalMinParams",\N
"testSkip","=mathmain3.6/src<test.java.org.apache.commons.math3.random{HaltonSequenceGeneratorTest.java[HaltonSequenceGeneratorTest~testSkip"
"testNextLongNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongNegativeToPositiveRange"
"testNextSecureIntNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureIntNegativeToPositiveRange"
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[ChebyquadFunction"
"ChebyquadFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[ChebyquadFunction~ChebyquadFunction~I~I~D~D~D~\\[D"
"Well19937aTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well19937aTest.java[Well19937aTest"
"testNextLongPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongPositiveRange"
"testNextSecureIntPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureIntPositiveRange"
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well19937aTest.java[Well19937aTest~testReferenceCode"
"n",\N
"testNextLongWideRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextLongWideRange"
"testNextSecureLongIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureLongIAE"
"m",\N
"UnitSphereRandomVectorGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UnitSphereRandomVectorGeneratorTest.java[UnitSphereRandomVectorGeneratorTest"
"testNextPascal","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextPascal"
"factor",\N
"testNextSecureLongNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureLongNegativeRange"
"test2DDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.random{UnitSphereRandomVectorGeneratorTest.java[UnitSphereRandomVectorGeneratorTest~test2DDistribution"
"theoreticalStartCost",\N
"testNextPermutation","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextPermutation"
"testNextSecureLongNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureLongNegativeToPositiveRange"
"Well44497aTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well44497aTest.java[Well44497aTest"
"theoreticalMinCost",\N
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well44497aTest.java[Well44497aTest~testReferenceCode"
"testNextPoisson","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextPoisson"
"theoreticalMinParams",\N
"testNextSecureLongPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testNextSecureLongPositiveRange"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction"
"Well1024aTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well1024aTest.java[Well1024aTest"
"testNextPoissonConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextPoissonConsistency"
"testSeeding","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomGeneratorAbstractTest.java[RandomGeneratorAbstractTest~testSeeding"
"BrownAlmostLinearFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[BrownAlmostLinearFunction~BrownAlmostLinearFunction~I~D~D~D~\\[D"
"testReferenceCode","=mathmain3.6/src<test.java.org.apache.commons.math3.random{Well1024aTest.java[Well1024aTest~testReferenceCode"
"testNextSample","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSample"
"BitsStreamGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest"
"m",\N
"BesselJTest","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BesselJTest.java[BesselJTest"
"BitsStreamGeneratorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest~BitsStreamGeneratorTest"
"testNextSecureHex","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureHex"
"factor",\N
"testBesselJ","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BesselJTest.java[BesselJTest~testBesselJ"
"theoreticalStartCost",\N
"TestBitStreamGenerator","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[TestBitStreamGenerator"
"testNextSecureIntIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureIntIAE"
"testIAEBadArgument","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BesselJTest.java[BesselJTest~testIAEBadArgument"
"theoreticalMinCost",\N
"next","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[TestBitStreamGenerator~next~I"
"testNextSecureIntNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureIntNegativeRange"
"theoreticalMinParams",\N
"testIAEBadOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BesselJTest.java[BesselJTest~testIAEBadOrder"
"bits",\N
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Osborne1Function"
"testNextSecureIntNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureIntNegativeToPositiveRange"
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[TestBitStreamGenerator~setSeed~I"
"ErfTest","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest"
"Osborne1Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Osborne1Function~Osborne1Function~\\[D~D~D~\\[D"
"testErf0","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErf0"
"testNextSecureIntPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureIntPositiveRange"
"seed",\N
"startParams",\N
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[TestBitStreamGenerator~setSeed~\\[I"
"testErf1960","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErf1960"
"testNextSecureLongIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureLongIAE"
"theoreticalStartCost",\N
"seed",\N
"theoreticalMinCost",\N
"testErf2576","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErf2576"
"testNextSecureLongNegativeRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureLongNegativeRange"
"theoreticalMinParams",\N
"setSeed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[TestBitStreamGenerator~setSeed~J"
"testErf2807","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErf2807"
"testNextSecureLongNegativeToPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureLongNegativeToPositiveRange"
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Osborne2Function"
"seed",\N
"Osborne2Function","=mathmain3.6/src<test.java.org.apache.commons.math3.optimization.general{MinpackTest.java[MinpackTest[Osborne2Function~Osborne2Function~\\[D~D~D~\\[D"
"testErf3291","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErf3291"
"testNextSecureLongPositiveRange","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextSecureLongPositiveRange"
"BitRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[BitRandom"
"startParams",\N
"BitRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[BitRandom~BitRandom"
"testErfGnu","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfGnu"
"testNextT","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextT"
"theoreticalStartCost",\N
"testErfInv","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfInv"
"nextBits","=mathmain3.6/src<test.java.org.apache.commons.math3.random{BitsStreamGeneratorTest.java[BitsStreamGeneratorTest[BitRandom~nextBits~I"
"testNextUniformExclusiveEndpoints","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformExclusiveEndpoints"
"theoreticalMinCost",\N
"bits",\N
"theoreticalMinParams",\N
"testErfInvInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfInvInfinite"
"testNextUniformExtremeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformExtremeValues"
"BetaTest","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest"
"GammaTest","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest"
"testErfInvNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfInvNaN"
"testNextUniformIAE","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformIAE"
"testDigammaLargeArgs","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testDigammaLargeArgs"
"testLogBeta","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBeta"
"testErfcGnu","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfcGnu"
"testNextUniformUniformMaximalInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformUniformMaximalInterval"
"testLogBetaNanPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaNanPositive"
"testDigammaNonRealArgs","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testDigammaNonRealArgs"
"testErfcInv","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfcInv"
"testNextUniformUniformNegaiveBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformUniformNegaiveBounds"
"testLogBetaNegativePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaNegativePositive"
"testDigammaSmallArgs","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testDigammaSmallArgs"
"testErfcInvInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfcInvInfinite"
"testNextUniformUniformNegativeToPositiveBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformUniformNegativeToPositiveBounds"
"testGamma","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testGamma"
"testLogBetaPositiveNan","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaPositiveNan"
"testErfcInvNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfcInvNaN"
"testNextUniformUniformPositiveBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextUniformUniformPositiveBounds"
"testLogBetaPositiveNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaPositiveNegative"
"testGammaNegativeDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testGammaNegativeDouble"
"testErfcMaple","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testErfcMaple"
"testNextWeibull","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextWeibull"
"testLogBetaPositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaPositivePositive"
"testGammaNegativeInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testGammaNegativeInteger"
"testLargeValues","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testLargeValues"
"testNextZipf","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testNextZipf"
"testLogBetaPositiveZero","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaPositiveZero"
"testInvGamma1pm1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testInvGamma1pm1"
"testTwoArgumentErf","=mathmain3.6/src<test.java.org.apache.commons.math3.special{ErfTest.java[ErfTest~testTwoArgumentErf"
"testReseed","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest~testReseed"
"testLogBetaZeroPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogBetaZeroPositive"
"testInvGamma1pm1Precondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testInvGamma1pm1Precondition1"
"CertifiedDataTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{CertifiedDataTest.java[CertifiedDataTest"
"expected","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest^expected"
"testDescriptiveStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{CertifiedDataTest.java[CertifiedDataTest~testDescriptiveStatistics"
"testLogGammaMinusLogGammaSum","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaMinusLogGammaSum"
"testInvGamma1pm1Precondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testInvGamma1pm1Precondition2"
"largeSampleSize","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest^largeSampleSize"
"testSummaryStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{CertifiedDataTest.java[CertifiedDataTest~testSummaryStatistics"
"testLogGammaMinusLogGammaSumPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaMinusLogGammaSumPrecondition1"
"testLogGamma","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGamma"
"smallSampleSize","=mathmain3.6/src<test.java.org.apache.commons.math3.random{RandomDataGeneratorTest.java[RandomDataGeneratorTest^smallSampleSize"
"mean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{CertifiedDataTest.java[CertifiedDataTest^mean"
"testLogGamma1p","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGamma1p"
"testLogGammaMinusLogGammaSumPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaMinusLogGammaSumPrecondition2"
"FrequencyTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest"
"std","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{CertifiedDataTest.java[CertifiedDataTest^std"
"testLogGammaSum","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaSum"
"testLogGamma1pPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGamma1pPrecondition1"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~setUp"
"StatUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest"
"testLogGamma1pPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGamma1pPrecondition2"
"testLogGammaSumPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaSumPrecondition1"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testAdd"
"testArrayIndexConditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testArrayIndexConditions"
"testLogGammaNan","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaNan"
"testLogGammaSumPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaSumPrecondition2"
"testCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testCounts"
"testDifferenceStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testDifferenceStats"
"testLogGammaSumPrecondition3","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaSumPrecondition3"
"testLogGammaNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaNegative"
"testEmptyTable","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testEmptyTable"
"testGeometricMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testGeometricMean"
"testLogGammaSumPrecondition4","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testLogGammaSumPrecondition4"
"testLogGammaPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaPositive"
"testGetUniqueCount","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testGetUniqueCount"
"testMax","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testMax"
"testMath1067","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testMath1067"
"testLogGammaPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaPrecondition1"
"testIncrement","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testIncrement"
"testMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testMean"
"testLogGammaPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaPrecondition2"
"testRegularizedBetaNanPositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaNanPositivePositive"
"testIntegerValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testIntegerValues"
"testMin","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testMin"
"testRegularizedBetaNegativePositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaNegativePositivePositive"
"testLogGammaZero","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testLogGammaZero"
"testMerge","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testMerge"
"testMode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testMode"
"testRegularizedBetaPositiveNanPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositiveNanPositive"
"testRegularizedGammaNanPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaNanPositive"
"testMergeCollection","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testMergeCollection"
"testN0andN1Conditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testN0andN1Conditions"
"testRegularizedBetaPositiveNegativePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositiveNegativePositive"
"testRegularizedGammaNegativePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaNegativePositive"
"testMode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testMode"
"testNormalize1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testNormalize1"
"testRegularizedGammaPositiveNan","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaPositiveNan"
"testRegularizedBetaPositivePositiveNan","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositivePositiveNan"
"testModeDoubleNan","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testModeDoubleNan"
"testNormalize2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testNormalize2"
"testRegularizedGammaPositiveNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaPositiveNegative"
"testRegularizedBetaPositivePositiveNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositivePositiveNegative"
"testModeFloatNan","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testModeFloatNan"
"testPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testPercentile"
"testRegularizedBetaPositivePositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositivePositivePositive"
"testRegularizedGammaPositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaPositivePositive"
"testNonComparableCumPct","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testNonComparableCumPct"
"testPopulationVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testPopulationVariance"
"testRegularizedBetaPositivePositiveZero","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositivePositiveZero"
"testRegularizedGammaPositiveZero","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaPositiveZero"
"testNonComparablePct","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testNonComparablePct"
"testProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testProduct"
"testRegularizedBetaPositiveZeroPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaPositiveZeroPositive"
"testRegularizedGammaZeroPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testRegularizedGammaZeroPositive"
"testPcts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testPcts"
"testStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testStats"
"testTrigamma","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testTrigamma"
"testRegularizedBetaTinyArgument","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaTinyArgument"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testSerial"
"testSumLog","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testSumLog"
"testTrigammaNonRealArgs","=mathmain3.6/src<test.java.org.apache.commons.math3.special{GammaTest.java[GammaTest~testTrigammaNonRealArgs"
"testRegularizedBetaZeroPositivePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testRegularizedBetaZeroPositivePositive"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{FrequencyTest.java[FrequencyTest~testToString"
"testSumSq","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testSumSq"
"testSumDeltaMinusDeltaSum","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testSumDeltaMinusDeltaSum"
"EuclideanDoublePointTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePointTest.java[EuclideanDoublePointTest"
"testVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat{StatUtilsTest.java[StatUtilsTest~testVariance"
"EuclideanIntegerPointTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPointTest.java[EuclideanIntegerPointTest"
"testArrayIsReference","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePointTest.java[EuclideanDoublePointTest~testArrayIsReference"
"testSumDeltaMinusDeltaSumPrecondition1","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testSumDeltaMinusDeltaSumPrecondition1"
"testArrayIsReference","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPointTest.java[EuclideanIntegerPointTest~testArrayIsReference"
"KMeansPlusPlusClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest"
"testCentroid","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePointTest.java[EuclideanDoublePointTest~testCentroid"
"testSumDeltaMinusDeltaSumPrecondition2","=mathmain3.6/src<test.java.org.apache.commons.math3.special{BetaTest.java[BetaTest~testSumDeltaMinusDeltaSumPrecondition2"
"testCentroid","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPointTest.java[EuclideanIntegerPointTest~testCentroid"
"dimension2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~dimension2"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePointTest.java[EuclideanDoublePointTest~testDistance"
"DBSCANClustererTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest"
"testDistance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPointTest.java[EuclideanIntegerPointTest~testDistance"
"testCertainSpace","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testCertainSpace"
"testCluster","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testCluster"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanDoublePointTest.java[EuclideanDoublePointTest~testSerial"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{EuclideanIntegerPointTest.java[EuclideanIntegerPointTest~testSerial"
"testPerformClusterAnalysisDegenerate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testPerformClusterAnalysisDegenerate"
"testGetEps","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testGetEps"
"StorelessCovarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest"
"CovarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest"
"testPerformClusterAnalysisToManyClusters","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testPerformClusterAnalysisToManyClusters"
"testEquivalence","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testEquivalence"
"testGetMinPts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testGetMinPts"
"testConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testConsistency"
"testSmallDistances","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest~testSmallDistances"
"testLonglyByRow","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testLonglyByRow"
"testNegativeEps","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNegativeEps"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testConstant"
"CloseIntegerPoint","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseIntegerPoint"
"testLonglySimpleCov","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testLonglySimpleCov"
"testNegativeMinPts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNegativeMinPts"
"testInsufficientData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testInsufficientData"
"centroidOf","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseIntegerPoint~centroidOf~QCollection\\<QCloseIntegerPoint;>;"
"testLonglySimpleVar","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testLonglySimpleVar"
"testNullDataset","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testNullDataset"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testLongly"
"p",\N
"testSwissFertilityByRow","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testSwissFertilityByRow"
"testSingleLink","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{DBSCANClustererTest.java[DBSCANClustererTest~testSingleLink"
"distanceFrom","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseIntegerPoint~distanceFrom~QCloseIntegerPoint;"
"testOneColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testOneColumn"
"testSymmetry","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest~testSymmetry"
"p",\N
"KendallsCorrelationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest"
"testSwissFertility","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest~testSwissFertility"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseIntegerPoint~equals~QObject;"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~setUp"
"longleyData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest^longleyData"
"longleyData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest^longleyData"
"o",\N
"test2dDoubleArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~test2dDoubleArray"
"longleyDataSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest^longleyDataSimple"
"swissData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{CovarianceTest.java[CovarianceTest^swissData"
"hashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.clustering{KMeansPlusPlusClustererTest.java[KMeansPlusPlusClustererTest[CloseIntegerPoint~hashCode"
"testAllTiesInBoth","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testAllTiesInBoth"
"swissData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{StorelessCovarianceTest.java[StorelessCovarianceTest^swissData"
"PearsonsCorrelationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest"
"SpearmansRankCorrelationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest"
"testAllTiesInX","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testAllTiesInX"
"testConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testConsistency"
"LotteryTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{LotteryTest.java[LotteryTest"
"testConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testConsistency"
"getResourceName","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{LotteryTest.java[LotteryTest~getResourceName"
"testAllTiesInY","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testAllTiesInY"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testConstant"
"testConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testConstant"
"LewTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{LewTest.java[LewTest"
"testBalancedJumble","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testBalancedJumble"
"testCovarianceConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testCovarianceConsistency"
"testCovarianceConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testCovarianceConsistency"
"getResourceName","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{LewTest.java[LewTest~getResourceName"
"testBlockMatrix","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testBlockMatrix"
"testInsufficientData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testInsufficientData"
"testInsufficientData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testInsufficientData"
"CertifiedDataAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest"
"testLargeArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testLargeArray"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testLongly"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testLongly"
"getMaximumAbsoluteError","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~getMaximumAbsoluteError"
"testPValueNearZero","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testPValueNearZero"
"testMath891Array","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testMath891Array"
"getProperty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~getProperty~QObject;~QString;"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testLongly"
"testStdErrorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testStdErrorConsistency"
"bean",\N
"testMath891Matrix","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testMath891Matrix"
"testMath1277","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testMath1277"
"name",\N
"testSwissFertility","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest~testSwissFertility"
"testOrderedTies","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testOrderedTies"
"testStdErrorConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testStdErrorConsistency"
"getResourceName","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~getResourceName"
"longleyData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest^longleyData"
"testSwiss","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{SpearmansRankCorrelationTest.java[SpearmansRankCorrelationTest~testSwiss"
"testSimpleJumble","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSimpleJumble"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~setUp"
"swissData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{PearsonsCorrelationTest.java[PearsonsCorrelationTest^swissData"
"testSimpleOrdered","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSimpleOrdered"
"AggregateSummaryStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~tearDown"
"testAggregate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregate"
"ListUnivariateImplTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest"
"testSimpleOrderedPowerOf2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSimpleOrderedPowerOf2"
"testCertifiedValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.data{CertifiedDataAbstractTest.java[CertifiedDataAbstractTest~testCertifiedValues"
"testN0andN1Conditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest~testN0andN1Conditions"
"testAggregateDegenerate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregateDegenerate"
"testSimpleReversed","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSimpleReversed"
"testProductAndGeometricMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest~testProductAndGeometricMean"
"StatisticalSummaryValuesTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValuesTest.java[StatisticalSummaryValuesTest"
"testAggregateSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregateSpecialValues"
"testSimpleReversedPowerOf2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSimpleReversedPowerOf2"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValuesTest.java[StatisticalSummaryValuesTest~testEqualsAndHashCode"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest~testSerialization"
"testSingleElement","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSingleElement"
"testAggregateStatisticalSummary","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregateStatisticalSummary"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValuesTest.java[StatisticalSummaryValuesTest~testSerialization"
"testSkewAndKurtosis","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest~testSkewAndKurtosis"
"testAggregation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregation"
"testSwiss","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testSwiss"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StatisticalSummaryValuesTest.java[StatisticalSummaryValuesTest~testToString"
"testStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImplTest.java[ListUnivariateImplTest~testStats"
"testAggregationConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AggregateSummaryStatisticsTest.java[AggregateSummaryStatisticsTest~testAggregationConsistency"
"testTwoElements","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.correlation{KendallsCorrelationTest.java[KendallsCorrelationTest~testTwoElements"
"UnivariateStatisticAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest"
"SynchronizedDescriptiveStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SynchronizedDescriptiveStatisticsTest.java[SynchronizedDescriptiveStatisticsTest"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~expectedValue"
"AbstractUnivariateStatisticTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest"
"MixedListUnivariateImplTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest"
"SynchronizedSummaryStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SynchronizedSummaryStatisticsTest.java[SynchronizedSummaryStatisticsTest"
"MixedListUnivariateImplTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest~MixedListUnivariateImplTest"
"testTestNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest~testTestNegative"
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~getTolerance"
"SummaryStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest"
"testN0andN1Conditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest~testN0andN1Conditions"
"testTestPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest~testTestPositive"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testCopy"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~testCopy"
"nullArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest^nullArray"
"testProductAndGeometricMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest~testProductAndGeometricMean"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testEqualsAndHashCode"
"testEvaluateArraySegment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~testEvaluateArraySegment"
"singletonArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest^singletonArray"
"testSkewAndKurtosis","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest~testSkewAndKurtosis"
"testGetSummary","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testGetSummary"
"testEvaluateArraySegmentWeighted","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~testEvaluateArraySegmentWeighted"
"testArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest^testArray"
"testStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest~testStats"
"testN0andN1Conditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testN0andN1Conditions"
"testEvaluation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~testEvaluation"
"testNegativeWeightsArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest^testNegativeWeightsArray"
"Foo","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[Foo"
"testNaNContracts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testNaNContracts"
"testWeightedConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest~testWeightedConsistency"
"heresFoo","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[Foo~heresFoo"
"testWeightsArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{AbstractUnivariateStatisticTest.java[AbstractUnivariateStatisticTest^testWeightsArray"
"testOverrideGeoMeanWithMathClass","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testOverrideGeoMeanWithMathClass"
"fourthMoment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^fourthMoment"
"FooTransformer","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[FooTransformer"
"DescriptiveStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest"
"testOverrideMeanWithMathClass","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testOverrideMeanWithMathClass"
"geoMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^geoMean"
"transform","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[FooTransformer~transform~QObject;"
"test20090720","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~test20090720"
"testOverrideVarianceWithMathClass","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testOverrideVarianceWithMathClass"
"identicalWeightsArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^identicalWeightsArray"
"o",\N
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testCopy"
"Bar","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[Bar"
"testProductAndGeometricMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testProductAndGeometricMean"
"kurt","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^kurt"
"testGetValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testGetValues"
"heresBar","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[Bar~heresBar"
"testQuadraticMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testQuadraticMean"
"max","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^max"
"testMath1129","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testMath1129"
"BarTransformer","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[BarTransformer"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testSerialization"
"mean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^mean"
"transform","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MixedListUnivariateImplTest.java[MixedListUnivariateImplTest[BarTransformer~transform~QObject;"
"testPercentileSetter","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testPercentileSetter"
"testSetterIllegalState","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testSetterIllegalState"
"o",\N
"median","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^median"
"testQuadraticMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testQuadraticMean"
"StorelessUnivariateStatisticAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest"
"testSetterInjection","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testSetterInjection"
"min","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^min"
"testRemoval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testRemoval"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~expectedValue"
"testStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testStats"
"percentile5","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^percentile5"
"testSetterInjection","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testSetterInjection"
"testConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testConsistency"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SummaryStatisticsTest.java[SummaryStatisticsTest~testToString"
"percentile95","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^percentile95"
"testCopyConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testCopyConsistency"
"testShuffledStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testShuffledStatistics"
"SynchronizedMultivariateSummaryStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{SynchronizedMultivariateSummaryStatisticsTest.java[SynchronizedMultivariateSummaryStatisticsTest"
"product","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^product"
"testSummaryConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testSummaryConsistency"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testEqualsAndHashCode"
"ListUnivariateImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl"
"secondMoment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^secondMoment"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testToString"
"ListUnivariateImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~ListUnivariateImpl"
"testIncrementation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testIncrementation"
"skew","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^skew"
"testWindowSize","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest~testWindowSize"
"testMomentSmallSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testMomentSmallSamples"
"ListUnivariateImpl","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~ListUnivariateImpl~QList\\<QObject;>;"
"std","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^std"
"deepMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[deepMean"
"list",\N
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testSerial"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[deepMean~evaluate~\\[D~I~I"
"sum","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^sum"
"addObject","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~addObject~QObject;"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest~testSerialization"
"values",\N
"o",\N
"sumLog","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^sumLog"
"smallSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{StorelessUnivariateStatisticAbstractTest.java[StorelessUnivariateStatisticAbstractTest^smallSamples"
"begin",\N
"addValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~addValue~D"
"sumSq","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^sumSq"
"length",\N
"MultivariateSummaryStatisticsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest"
"v",\N
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[deepMean~evaluate~\\[D"
"testArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^testArray"
"testDimension","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testDimension"
"clear","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~clear"
"values",\N
"testWeightsArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^testWeightsArray"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testEqualsAndHashCode"
"getElement","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~getElement~I"
"goodPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[goodPercentile"
"thirdMoment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^thirdMoment"
"testN0andN1Conditions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testN0andN1Conditions"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[goodPercentile~evaluate~\\[D~I~I"
"index",\N
"tolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^tolerance"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~getN"
"values",\N
"testNaNContracts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testNaNContracts"
"begin",\N
"unitWeightsArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^unitWeightsArray"
"getValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~getValues"
"testSerialization","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testSerialization"
"length",\N
"var","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^var"
"setWindowSize","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl~setWindowSize~I"
"testSetterIllegalState","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testSetterIllegalState"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[goodPercentile~evaluate~\\[D"
"windowSize",\N
"weightedMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^weightedMean"
"values",\N
"testSetterInjection","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testSetterInjection"
"list","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{ListUnivariateImpl.java[ListUnivariateImpl^list"
"setQuantile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[goodPercentile~setQuantile~D"
"weightedProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^weightedProduct"
"testShuffledStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testShuffledStatistics"
"VectorialCovarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest"
"quantile",\N
"weightedStd","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^weightedStd"
"testStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testStats"
"VectorialCovarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest~VectorialCovarianceTest"
"subPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[subPercentile"
"weightedSum","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^weightedSum"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest~testToString"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[subPercentile~evaluate~\\[D~I~I"
"testBasicStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest~testBasicStats"
"weightedVar","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{UnivariateStatisticAbstractTest.java[UnivariateStatisticAbstractTest^weightedVar"
"values",\N
"sumMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean"
"testMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest~testMismatch"
"begin",\N
"clear","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~clear"
"SecondMomentTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SecondMomentTest.java[SecondMomentTest"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest~testSerial"
"length",\N
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SecondMomentTest.java[SecondMomentTest~expectedValue"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~evaluate~\\[D~I~I"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[subPercentile~evaluate~\\[D"
"testSimplistic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialCovarianceTest.java[VectorialCovarianceTest~testSimplistic"
"SemiVarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest"
"values",\N
"values",\N
"testInsufficientData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testInsufficientData"
"VarianceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest"
"begin",\N
"badPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[badPercentile"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~expectedValue"
"length",\N
"testNoVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testNoVariance"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[badPercentile~evaluate~\\[D~I~I"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~evaluate~\\[D"
"expectedWeightedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~expectedWeightedValue"
"testNonMeanCutoffs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testNonMeanCutoffs"
"values",\N
"values",\N
"populationVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~populationVariance~\\[D"
"begin",\N
"testPopulation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testPopulation"
"getN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~getN"
"length",\N
"v",\N
"testSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testSample"
"evaluate","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{DescriptiveStatisticsTest.java[DescriptiveStatisticsTest[badPercentile~evaluate~\\[D"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~testNaN"
"getResult","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~getResult"
"values",\N
"testSingleDown","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testSingleDown"
"testPopulation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~testPopulation"
"increment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~increment~D"
"FourthMomentTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{FourthMomentTest.java[FourthMomentTest"
"testSingleUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testSingleUp"
"testWeightedVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VarianceTest.java[VarianceTest~testWeightedVariance"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{FourthMomentTest.java[FourthMomentTest~expectedValue"
"d",\N
"testVarianceDecompMeanCutoff","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testVarianceDecompMeanCutoff"
"MeanTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{MeanTest.java[MeanTest"
"incrementAll","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~incrementAll~\\[D~I~I"
"InteractionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{MeanTest.java[MeanTest~expectedValue"
"testVarianceDecompNonMeanCutoff","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SemiVarianceTest.java[SemiVarianceTest~testVarianceDecompNonMeanCutoff"
"testInteraction","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest~testInteraction"
"values",\N
"expectedWeightedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{MeanTest.java[MeanTest~expectedWeightedValue"
"ThirdMomentTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMomentTest.java[ThirdMomentTest"
"start",\N
"kurt","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^kurt"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{ThirdMomentTest.java[ThirdMomentTest~expectedValue"
"length",\N
"testSmallSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{MeanTest.java[MeanTest~testSmallSamples"
"mean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^mean"
"incrementAll","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive{MultivariateSummaryStatisticsTest.java[MultivariateSummaryStatisticsTest[sumMean~incrementAll~\\[D"
"SkewnessTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SkewnessTest.java[SkewnessTest"
"testWeightedMean","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{MeanTest.java[MeanTest~testWeightedMean"
"skew","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^skew"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SkewnessTest.java[SkewnessTest~expectedValue"
"values",\N
"VectorialMeanTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest"
"testArray","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^testArray"
"KurtosisTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{KurtosisTest.java[KurtosisTest"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{SkewnessTest.java[SkewnessTest~testNaN"
"VectorialMeanTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest~VectorialMeanTest"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{KurtosisTest.java[KurtosisTest~expectedValue"
"tolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^tolerance"
"GeometricMeanTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMeanTest.java[GeometricMeanTest"
"testBasicStats","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest~testBasicStats"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{KurtosisTest.java[KurtosisTest~testNaN"
"var","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{InteractionTest.java[InteractionTest^var"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMeanTest.java[GeometricMeanTest~expectedValue"
"testMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest~testMismatch"
"FirstMomentTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{FirstMomentTest.java[FirstMomentTest"
"StandardDeviationTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviationTest.java[StandardDeviationTest"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{GeometricMeanTest.java[GeometricMeanTest~testSpecialValues"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{FirstMomentTest.java[FirstMomentTest~expectedValue"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest~testSerial"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviationTest.java[StandardDeviationTest~expectedValue"
"MinTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MinTest.java[MinTest"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{FirstMomentTest.java[FirstMomentTest~testSpecialValues"
"testSimplistic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{VectorialMeanTest.java[VectorialMeanTest~testSimplistic"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MinTest.java[MinTest~expectedValue"
"populationStandardDeviation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviationTest.java[StandardDeviationTest~populationStandardDeviation~\\[D"
"PercentileTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest"
"v",\N
"PSquarePercentileTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest"
"testNaNs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MinTest.java[MinTest~testNaNs"
"before","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~before"
"testNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviationTest.java[StandardDeviationTest~testNaN"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~expectedValue"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MinTest.java[MinTest~testSpecialValues"
"checkAllTechniquesPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~checkAllTechniquesPercentile"
"testPopulation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.moment{StandardDeviationTest.java[StandardDeviationTest~testPopulation"
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~getTolerance"
"MaxTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MaxTest.java[MaxTest"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~expectedValue"
"test0PercentileValuesWithFewerThan5Values","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test0PercentileValuesWithFewerThan5Values"
"MedianTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MaxTest.java[MaxTest~expectedValue"
"before","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest~before"
"test5","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~test5"
"test20Percentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test20Percentile"
"testNaNs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MaxTest.java[MaxTest~testNaNs"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest~expectedValue"
"testAllEstimationTechniquesOnly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllEstimationTechniquesOnly"
"test20PercentileHighValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test20PercentileHighValues"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MaxTest.java[MaxTest~testSpecialValues"
"testAllTechniquesMedian","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest~testAllTechniquesMedian"
"testAllEstimationTechniquesOnlyForAllPivotingStrategies","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllEstimationTechniquesOnlyForAllPivotingStrategies"
"test5","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test5"
"ProductTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest"
"testAllTechniquesSingleton","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest~testAllTechniquesSingleton"
"testAllEstimationTechniquesOnlyForExtremeIndexes","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllEstimationTechniquesOnlyForExtremeIndexes"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest~expectedValue"
"test5Percentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test5Percentile"
"testAssertMappedValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{MedianTest.java[MedianTest~testAssertMappedValues~\\[D~\\[\\[QObject;~QDouble;"
"testAllEstimationTechniquesOnlyForNullsAndOOR","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllEstimationTechniquesOnlyForNullsAndOOR"
"expectedWeightedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest~expectedWeightedValue"
"test5PercentileHighValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test5PercentileHighValues"
"d",\N
"getTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest~getTolerance"
"testAllEstimationTechniquesOnlyLimits","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllEstimationTechniquesOnlyLimits"
"test90Percentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test90Percentile"
"map",\N
"testAllTechniques5","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniques5"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest~testSpecialValues"
"tolerance",\N
"test90PercentileHighValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test90PercentileHighValues"
"SumSqTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumSqTest.java[SumSqTest"
"testAllTechniquesEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesEmpty"
"testWeightedProduct","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{ProductTest.java[ProductTest~testWeightedProduct"
"test99Percentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test99Percentile"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumSqTest.java[SumSqTest~expectedValue"
"testAllTechniquesEvaluateArraySegment","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesEvaluateArraySegment"
"SumLogTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumLogTest.java[SumLogTest"
"test99PercentileHighValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~test99PercentileHighValues"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumSqTest.java[SumSqTest~testSpecialValues"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumLogTest.java[SumLogTest~expectedValue"
"testAllTechniquesEvaluateArraySegmentWeighted","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesEvaluateArraySegmentWeighted"
"testAccept","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testAccept"
"SumTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumTest.java[SumTest"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumLogTest.java[SumLogTest~testSpecialValues"
"testAllTechniquesEvaluation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesEvaluation"
"testArrayExample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testArrayExample"
"expectedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumTest.java[SumTest~expectedValue"
"ChiSquareTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest"
"testAllTechniquesHighPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesHighPercentile"
"testCannedDataSet","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testCannedDataSet"
"expectedWeightedValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumTest.java[SumTest~expectedWeightedValue"
"testChiSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquare"
"testAllTechniquesLowPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesLowPercentile"
"testCopyConsistencyWithInitialFirstFewElements","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testCopyConsistencyWithInitialFirstFewElements"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumTest.java[SumTest~testSpecialValues"
"testChiSquareDataSetsComparisonBadCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareDataSetsComparisonBadCounts"
"testAllTechniquesNISTExample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesNISTExample"
"testCopyConsistencyWithInitialMostElements","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testCopyConsistencyWithInitialMostElements"
"testWeightedSum","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.summary{SumTest.java[SumTest~testWeightedSum"
"testChiSquareDataSetsComparisonEqualCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareDataSetsComparisonEqualCounts"
"testAllTechniquesNullEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesNullEmpty"
"testDistribution","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testDistribution"
"testChiSquareDataSetsComparisonUnEqualCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareDataSetsComparisonUnEqualCounts"
"KolmogorovSmirnovTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest"
"testAllTechniquesPercentileUsingCentralPivoting","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesPercentileUsingCentralPivoting"
"testBootstrapLargeSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testBootstrapLargeSamples"
"testEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testEmpty"
"testChiSquareIndependence","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareIndependence"
"testAllTechniquesPercentileUsingMedianOf3Pivoting","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesPercentileUsingMedianOf3Pivoting"
"testBootstrapRounding","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testBootstrapRounding"
"testHashCodeInMarkers","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testHashCodeInMarkers"
"testChiSquareLargeTestStatistic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareLargeTestStatistic"
"testBootstrapSmallSamplesWithTies","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testBootstrapSmallSamplesWithTies"
"testAllTechniquesPercentileUsingRandomPivoting","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesPercentileUsingRandomPivoting"
"testHighPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testHighPercentile"
"testChiSquareZeroCount","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{ChiSquareTestTest.java[ChiSquareTestTest~testChiSquareZeroCount"
"testAllTechniquesSetQuantile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesSetQuantile"
"testDRounding","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testDRounding"
"testInitial","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testInitial"
"GTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest"
"testDRoundingMonteCarlo","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testDRoundingMonteCarlo"
"testAllTechniquesSingleton","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesSingleton"
"testBadAlpha","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testBadAlpha"
"testLowPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testLowPercentile"
"testFillBooleanArrayRandomlyWithFixedNumberTrueValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testFillBooleanArrayRandomlyWithFixedNumberTrueValues"
"testGTestGoodnesOfFit1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestGoodnesOfFit1"
"testAllTechniquesSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesSpecialValues"
"testMarkerHeightWithHigherIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkerHeightWithHigherIndex"
"testGTestGoodnesOfFit2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestGoodnesOfFit2"
"testAllTechniquesSpecialValuesWithNaNStrategy","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesSpecialValuesWithNaNStrategy"
"testFixTies","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testFixTies"
"testMarkerHeightWithLowerIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkerHeightWithLowerIndex"
"testFixTiesConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testFixTiesConsistency"
"testAllTechniquesWeightedConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAllTechniquesWeightedConsistency"
"testGTestGoodnesOfFit3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestGoodnesOfFit3"
"testMarkers2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkers2"
"testFixTiesNoOp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testFixTiesNoOp"
"testGTestIndependance1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestIndependance1"
"testAssertMappedValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testAssertMappedValues~\\[D~\\[\\[QObject;~QDouble;~QDouble;"
"testMarkersOORHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkersOORHigh"
"data",\N
"testGTestIndependance2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestIndependance2"
"testOneSampleGaussianGaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleGaussianGaussian"
"testMarkersOORLow","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkersOORLow"
"map",\N
"testGTestIndependance3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestIndependance3"
"testOneSampleGaussianGaussianSmallSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleGaussianGaussianSmallSample"
"testMarkersWithHigherIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkersWithHigherIndex"
"p",\N
"tolerance",\N
"testOneSampleGaussianUniform","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleGaussianUniform"
"testGTestSetsComparisonBadCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testGTestSetsComparisonBadCounts"
"testMarkersWithLowerIndex","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMarkersWithLowerIndex"
"testHighPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testHighPercentile"
"testOneSampleUniformGaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleUniformGaussian"
"testNegativeObservedCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testNegativeObservedCounts"
"testMiscellaniousFunctionsInMarkers","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testMiscellaniousFunctionsInMarkers"
"testLowPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testLowPercentile"
"testOneSampleUniformUniform","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleUniformUniform"
"testRootLogLikelihood","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testRootLogLikelihood"
"testNISTExample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testNISTExample"
"testMedianOf3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testMedianOf3"
"testScaling","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testScaling"
"testOneSampleUniformUniformSmallSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testOneSampleUniformUniformSmallSample"
"testNegativeInvalidValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testNegativeInvalidValues"
"testNISTExample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testNISTExample"
"testPelzGoodApproximation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testPelzGoodApproximation"
"testUnmatchedArrays","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testUnmatchedArrays"
"testNull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testNull"
"testNanStrategyFailed","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testNanStrategyFailed"
"testTwoSampleApproximateCritialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleApproximateCritialValues"
"testZeroExpectedCounts","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{GTestTest.java[GTestTest~testZeroExpectedCounts"
"testNullListInMarkers","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testNullListInMarkers"
"testNanStrategySpecific","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testNanStrategySpecific"
"testTwoSampleApproximateP","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleApproximateP"
"BinomialTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{BinomialTestTest.java[BinomialTestTest"
"testPSQuaredEvalFuncWithPapersExampleData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testPSQuaredEvalFuncWithPapersExampleData"
"testNullEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testNullEmpty"
"testBinomialTestAcceptReject","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{BinomialTestTest.java[BinomialTestTest~testBinomialTestAcceptReject"
"testTwoSampleExactP","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleExactP"
"testPSquaredEqualsAndMin","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testPSquaredEqualsAndMin"
"testNullEstimation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testNullEstimation"
"testBinomialTestExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{BinomialTestTest.java[BinomialTestTest~testBinomialTestExceptions"
"testTwoSampleMonteCarlo","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleMonteCarlo"
"testPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testPercentile"
"testTwoSampleMonteCarloDifferentSampleSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleMonteCarloDifferentSampleSizes"
"testPercentile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testPercentile"
"testPositiveInvalidValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testPositiveInvalidValues"
"testBinomialTestPValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{BinomialTestTest.java[BinomialTestTest~testBinomialTestPValues"
"testTwoSampleMonteCarloPerformance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleMonteCarloPerformance"
"testPercentileCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testPercentileCopy"
"testSetQuantile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testSetQuantile"
"WilcoxonSignedRankTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{WilcoxonSignedRankTestTest.java[WilcoxonSignedRankTestTest"
"testTwoSampleProductSizeOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleProductSizeOverflow"
"testWilcoxonSignedRankInputValidation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{WilcoxonSignedRankTestTest.java[WilcoxonSignedRankTestTest~testWilcoxonSignedRankInputValidation"
"testPercentileWithDataRef","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testPercentileWithDataRef"
"testSingleton","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testSingleton"
"testTwoSampleSmallSampleExact","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleSmallSampleExact"
"testWilcoxonSignedRankSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{WilcoxonSignedRankTestTest.java[WilcoxonSignedRankTestTest~testWilcoxonSignedRankSimple"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testSpecialValues"
"testPercentileWithTechnique","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testPercentileWithTechnique"
"testTwoSampleSmallSampleExact2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleSmallSampleExact2"
"TTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest"
"testRemoveNan","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testRemoveNan"
"testString","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest~testString"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~setUp"
"testTwoSampleSmallSampleExact3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleSmallSampleExact3"
"BIG","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^BIG"
"testReplaceNanInRange","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testReplaceNanInRange"
"testOneSampleT","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testOneSampleT"
"testTwoSampleWithManyTies","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSampleWithManyTies"
"LARGE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^LARGE"
"testSetQuantile","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testSetQuantile"
"testOneSampleTTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testOneSampleTTest"
"testTwoSamplesAllEqual","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest~testTwoSamplesAllEqual"
"MEDIUM","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^MEDIUM"
"testSingleton","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testSingleton"
"testPaired","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testPaired"
"TOLERANCE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest^TOLERANCE"
"NOMINAL","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^NOMINAL"
"testSpecialValues","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testSpecialValues"
"testSmallSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testSmallSamples"
"gaussian","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest^gaussian"
"SMALL","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^SMALL"
"testStoredVsDirect","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest~testStoredVsDirect"
"testTwoSampleTHeterscedastic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testTwoSampleTHeterscedastic"
"gaussian2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest^gaussian2"
"STANDARD","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^STANDARD"
"BIG","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^BIG"
"testTwoSampleTHomoscedastic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TTestTest.java[TTestTest~testTwoSampleTHomoscedastic"
"uniform","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{KolmogorovSmirnovTestTest.java[KolmogorovSmirnovTestTest^uniform"
"DEFAULT_PERCENTILE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^DEFAULT_PERCENTILE"
"TINY","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^TINY"
"TestUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest"
"MannWhitneyUTestTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{MannWhitneyUTestTest.java[MannWhitneyUTestTest"
"LARGE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^LARGE"
"VERY_BIG","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^VERY_BIG"
"testChiSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testChiSquare"
"testBigDataSet","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{MannWhitneyUTestTest.java[MannWhitneyUTestTest~testBigDataSet"
"VERY_LARGE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^VERY_LARGE"
"MEDIUM","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^MEDIUM"
"testChiSquareIndependence","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testChiSquareIndependence"
"testBigDataSetOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{MannWhitneyUTestTest.java[MannWhitneyUTestTest~testBigDataSetOverflow"
"NOMINAL","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^NOMINAL"
"percentile5","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^percentile5"
"testChiSquareLargeTestStatistic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testChiSquareLargeTestStatistic"
"testMannWhitneyUInputValidation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{MannWhitneyUTestTest.java[MannWhitneyUTestTest~testMannWhitneyUInputValidation"
"SMALL","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^SMALL"
"percentile95","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^percentile95"
"testChiSquareZeroCount","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testChiSquareZeroCount"
"testMannWhitneyUSimple","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{MannWhitneyUTestTest.java[MannWhitneyUTestTest~testMannWhitneyUSimple"
"STANDARD","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^STANDARD"
"tolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PSquarePercentileTest.java[PSquarePercentileTest^tolerance"
"testGTestGoodnesOfFit","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testGTestGoodnesOfFit"
"OneWayAnovaTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{OneWayAnovaTest.java[OneWayAnovaTest"
"testAnovaFValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{OneWayAnovaTest.java[OneWayAnovaTest~testAnovaFValue"
"TINY","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^TINY"
"testGTestIndependance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testGTestIndependance"
"BinomialConfidenceIntervalAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest"
"testAnovaPValue","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{OneWayAnovaTest.java[OneWayAnovaTest~testAnovaPValue"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~setUp"
"VERY_BIG","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^VERY_BIG"
"testKSOneSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testKSOneSample"
"testNegativeSuccesses","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~testNegativeSuccesses"
"testAnovaPValueSummaryStatistics","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{OneWayAnovaTest.java[OneWayAnovaTest~testAnovaPValueSummaryStatistics"
"VERY_LARGE","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^VERY_LARGE"
"testKSTwoSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testKSTwoSample"
"testAnovaTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{OneWayAnovaTest.java[OneWayAnovaTest~testAnovaTest"
"testOneConfidencelevel","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~testOneConfidencelevel"
"sampleSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.descriptive.rank{PercentileTest.java[PercentileTest^sampleSizes"
"testOneSampleT","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testOneSampleT"
"testSuccessesExceedingTrials","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~testSuccessesExceedingTrials"
"ClopperPearsonIntervalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{ClopperPearsonIntervalTest.java[ClopperPearsonIntervalTest"
"testOneSampleTTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testOneSampleTTest"
"IntervalUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{IntervalUtilsTest.java[IntervalUtilsTest"
"testStandardInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{ClopperPearsonIntervalTest.java[ClopperPearsonIntervalTest~testStandardInterval"
"testAgrestiCoull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{IntervalUtilsTest.java[IntervalUtilsTest~testAgrestiCoull"
"testZeroConfidencelevel","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~testZeroConfidencelevel"
"testOneWayAnovaUtils","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testOneWayAnovaUtils"
"NormalApproximationIntervalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{NormalApproximationIntervalTest.java[NormalApproximationIntervalTest"
"testClopperPearson","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{IntervalUtilsTest.java[IntervalUtilsTest~testClopperPearson"
"testZeroTrials","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{BinomialConfidenceIntervalAbstractTest.java[BinomialConfidenceIntervalAbstractTest~testZeroTrials"
"testPaired","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testPaired"
"testStandardInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{NormalApproximationIntervalTest.java[NormalApproximationIntervalTest~testStandardInterval"
"testNormalApproximation","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{IntervalUtilsTest.java[IntervalUtilsTest~testNormalApproximation"
"WilsonScoreIntervalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{WilsonScoreIntervalTest.java[WilsonScoreIntervalTest"
"testRootLogLikelihood","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testRootLogLikelihood"
"AgrestiCoullIntervalTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{AgrestiCoullIntervalTest.java[AgrestiCoullIntervalTest"
"testStandardInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{WilsonScoreIntervalTest.java[WilsonScoreIntervalTest~testStandardInterval"
"testWilsonScore","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{IntervalUtilsTest.java[IntervalUtilsTest~testWilsonScore"
"testStandardInterval","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.interval{AgrestiCoullIntervalTest.java[AgrestiCoullIntervalTest~testStandardInterval"
"testSmallSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testSmallSamples"
"NaturalRankingTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest"
"GLSMultipleLinearRegressionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest"
"MillerUpdatingRegressionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest"
"testTwoSampleTHeterscedastic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testTwoSampleTHeterscedastic"
"testDefault","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testDefault"
"cannotAddCovarianceDataThatIsNotSquare","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddCovarianceDataThatIsNotSquare"
"MillerUpdatingRegressionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~MillerUpdatingRegressionTest"
"testTwoSampleTHomoscedastic","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.inference{TestUtilsTest.java[TestUtilsTest~testTwoSampleTHomoscedastic"
"testNaNsAndInfs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsAndInfs"
"cannotAddCovarianceDataWithSampleSizeMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddCovarianceDataWithSampleSizeMismatch"
"testAddObsGetNClear","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testAddObsGetNClear"
"testNaNsFailed","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsFailed"
"SimpleRegressionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest"
"cannotAddNullCovarianceData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddNullCovarianceData"
"testFilippelli","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testFilippelli"
"testAppend","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testAppend"
"testNaNsFixedTiesRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsFixedTiesRandom"
"cannotAddNullYSampleData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddNullYSampleData"
"testHasIntercept","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testHasIntercept"
"testClear","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testClear"
"testNaNsMaximalTiesMinimum","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsMaximalTiesMinimum"
"cannotAddSampleDataWithSizeMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddSampleDataWithSizeMismatch"
"testHdiag","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testHdiag"
"testCorr","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testCorr"
"testNaNsMinimalTiesAverage","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsMinimalTiesAverage"
"cannotAddXSampleData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~cannotAddXSampleData"
"testHdiagConstant","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testHdiagConstant"
"testInference","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testInference"
"testNaNsMinimalTiesMaximum","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsMinimalTiesMaximum"
"getNumberOfRegressors","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~getNumberOfRegressors"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testLongly"
"testNaNs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testNaNs"
"testNaNsRemovedTiesSequential","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNaNsRemovedTiesSequential"
"getSampleSize","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~getSampleSize"
"testNegativeTestAddMultipleObs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testNegativeTestAddMultipleObs"
"testNoInterceot_noint2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testNoInterceot_noint2"
"testNoNaNsFailed","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.ranking{NaturalRankingTest.java[NaturalRankingTest~testNoNaNsFailed"
"notEnoughData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~notEnoughData"
"testNegativeTestAddObs","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testNegativeTestAddObs"
"testNoIntercept_noint1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testNoIntercept_noint1"
"MultipleLinearRegressionAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~setUp"
"testOneRedundantColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testOneRedundantColumn"
"testNorris","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testNorris"
"canEstimateRegressandVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~canEstimateRegressandVariance"
"testGLSEfficiency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~testGLSEfficiency"
"testPCorr","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testPCorr"
"testPerfect","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testPerfect"
"canEstimateRegressionParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~canEstimateRegressionParameters"
"testGLSOLSConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~testGLSOLSConsistency"
"testRegressAirlineConstantExternal","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testRegressAirlineConstantExternal"
"testPerfect2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testPerfect2"
"canEstimateRegressionParametersVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~canEstimateRegressionParametersVariance"
"testNewSample2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~testNewSample2"
"testRegressAirlineConstantInternal","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testRegressAirlineConstantInternal"
"testPerfectNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testPerfectNegative"
"canEstimateResiduals","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~canEstimateResiduals"
"testYVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{GLSMultipleLinearRegressionTest.java[GLSMultipleLinearRegressionTest~testYVariance"
"testSubsetRegression","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testSubsetRegression"
"getNumberOfRegressors","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~getNumberOfRegressors"
"testRandom","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRandom"
"OLSMultipleLinearRegressionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest"
"testThreeRedundantColumn","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testThreeRedundantColumn"
"testRegressExceptions","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRegressExceptions"
"getSampleSize","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~getSampleSize"
"cannotAddSampleDataWithSizeMismatch","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~cannotAddSampleDataWithSizeMismatch"
"testWampler1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testWampler1"
"testRegressIfaceMethod","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRegressIfaceMethod"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~setUp"
"getNumberOfRegressors","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~getNumberOfRegressors"
"testWampler2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testWampler2"
"testNewSample","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testNewSample"
"testRemoveMultiple","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveMultiple"
"getSampleSize","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~getSampleSize"
"testWampler3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testWampler3"
"testRemoveMultiplePastEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveMultiplePastEmpty"
"testNewSampleInsufficientData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testNewSampleInsufficientData"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~setUp"
"testWampler4","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MillerUpdatingRegressionTest.java[MillerUpdatingRegressionTest~testWampler4"
"testNewSampleInvalidData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testNewSampleInvalidData"
"testRemoveMultipleToEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveMultipleToEmpty"
"testHat","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testHat"
"FastHadamardTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastHadamardTransformerTest.java[FastHadamardTransformerTest"
"testNewSampleNullData","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testNewSampleNullData"
"testRemoveObsFromEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveObsFromEmpty"
"testLongly","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testLongly"
"test3Points","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastHadamardTransformerTest.java[FastHadamardTransformerTest~test3Points"
"testXSampleDataNull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testXSampleDataNull"
"testRemoveObsFromSingle","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveObsFromSingle"
"testNewSample2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNewSample2"
"test4Points","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastHadamardTransformerTest.java[FastHadamardTransformerTest~test4Points"
"testYSampleDataNull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{MultipleLinearRegressionAbstractTest.java[MultipleLinearRegressionAbstractTest~testYSampleDataNull"
"testRemoveSingle","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveSingle"
"testNewSampleDataXNull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNewSampleDataXNull"
"test8Points","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastHadamardTransformerTest.java[FastHadamardTransformerTest~test8Points"
"testRemoveXY","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testRemoveXY"
"testNewSampleDataYNull","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNewSampleDataYNull"
"RealTransformerAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest"
"testNoIntInverse","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastHadamardTransformerTest.java[FastHadamardTransformerTest~testNoIntInverse"
"createRealData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~createRealData~I"
"testNoDataNPECalculateBeta","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNoDataNPECalculateBeta"
"testSSENonNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{SimpleRegressionTest.java[SimpleRegressionTest~testSSENonNegative"
"FastCosineTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest"
"n",\N
"data","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~data"
"testNoDataNPECalculateHat","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNoDataNPECalculateHat"
"FastFourierTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest"
"getInvalidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getInvalidDataSize~I"
"test2DData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~test2DData"
"getInvalidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getInvalidDataSize~I"
"testNoDataNPESSTO","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNoDataNPESSTO"
"i",\N
"test2DDataUnitary","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~test2DDataUnitary"
"i",\N
"getNumberOfInvalidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getNumberOfInvalidDataSizes"
"testNoSSTOCalculateRsquare","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testNoSSTOCalculateRsquare"
"testAdHocData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testAdHocData"
"getNumberOfInvalidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getNumberOfInvalidDataSizes"
"getNumberOfValidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getNumberOfValidDataSizes"
"testPerfectFit","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testPerfectFit"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testSinFunction"
"getNumberOfValidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getNumberOfValidDataSizes"
"testSingularCalculateBeta","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testSingularCalculateBeta"
"getRelativeTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getRelativeTolerance~I"
"testStandardTransformFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testStandardTransformFunction"
"getRelativeTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getRelativeTolerance~I"
"i",\N
"testSwissFertility","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testSwissFertility"
"testStandardTransformReal","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testStandardTransformReal"
"i",\N
"getValidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getValidDataSize~I"
"testWampler1","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testWampler1"
"getValidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getValidDataSize~I"
"testTransformComplex","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformComplex"
"i",\N
"testWampler2","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testWampler2"
"i",\N
"getValidLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getValidLowerBound"
"testTransformComplexSizeNotAPowerOfTwo","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformComplexSizeNotAPowerOfTwo"
"testWampler3","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testWampler3"
"getValidLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getValidLowerBound"
"getValidUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~getValidUpperBound"
"testTransformFunctionInvalidBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformFunctionInvalidBounds"
"getValidUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~getValidUpperBound"
"testWampler4","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testWampler4"
"testTransformFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformFunction"
"testTransformFunctionNotStrictlyPositiveNumberOfSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformFunctionNotStrictlyPositiveNumberOfSamples"
"testAdHocData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~testAdHocData"
"testYVariance","=mathmain3.6/src<test.java.org.apache.commons.math3.stat.regression{OLSMultipleLinearRegressionTest.java[OLSMultipleLinearRegressionTest~testYVariance"
"testTransformFunctionInvalidBounds","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformFunctionInvalidBounds"
"testTransformFunctionSizeNotAPowerOfTwo","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformFunctionSizeNotAPowerOfTwo"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~testParameters"
"FastSineTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest"
"testTransformFunctionInvalidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformFunctionInvalidDataSize"
"testTransformRealSizeNotAPowerOfTwo","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastFourierTransformerTest.java[FastFourierTransformerTest~testTransformRealSizeNotAPowerOfTwo"
"createRealData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~createRealData~I"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastCosineTransformerTest.java[FastCosineTransformerTest~testSinFunction"
"testTransformFunctionNotStrictlyPositiveNumberOfSamples","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformFunctionNotStrictlyPositiveNumberOfSamples"
"CombinationsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest"
"n",\N
"MathUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest"
"testAccessor1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testAccessor1"
"testTransformReal","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformReal"
"data","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~data"
"testArrayHash","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testArrayHash"
"testAccessor2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testAccessor2"
"testTransformRealInvalidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{RealTransformerAbstractTest.java[RealTransformerAbstractTest~testTransformRealInvalidDataSize"
"getInvalidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getInvalidDataSize~I"
"testCheckFinite","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testCheckFinite"
"testCombinationsIteratorFail","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testCombinationsIteratorFail"
"i",\N
"DefaultTransformerTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest"
"testCheckNotNull1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testCheckNotNull1"
"getNumberOfInvalidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getNumberOfInvalidDataSizes"
"testEmptyCombination","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testEmptyCombination"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testSerial"
"testCheckNotNull2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testCheckNotNull2"
"getNumberOfValidDataSizes","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getNumberOfValidDataSizes"
"testFullSetCombination","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testFullSetCombination"
"testTransformBigDecimal","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformBigDecimal"
"testCopySignByte","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testCopySignByte"
"getRelativeTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getRelativeTolerance~I"
"testLexicographicComparator","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparator"
"testTransformDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformDouble"
"testCopySignByte2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testCopySignByte2"
"i",\N
"testTransformInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformInteger"
"testLexicographicComparatorUnsorted","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparatorUnsorted"
"testEqualsDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testEqualsDouble"
"getValidDataSize","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getValidDataSize~I"
"testTransformNull","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformNull"
"testLexicographicComparatorWrongIterate1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparatorWrongIterate1"
"i",\N
"testHash","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testHash"
"testLexicographicComparatorWrongIterate2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparatorWrongIterate2"
"testTransformObject","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformObject"
"getValidLowerBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getValidLowerBound"
"testIndicatorByte","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testIndicatorByte"
"testLexicographicComparatorWrongIterate3","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparatorWrongIterate3"
"testTransformString","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DefaultTransformerTest.java[DefaultTransformerTest~testTransformString"
"getValidUpperBound","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~getValidUpperBound"
"testIndicatorInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testIndicatorInt"
"testLexicographicComparatorWrongIterate4","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicComparatorWrongIterate4"
"testAdHocData","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~testAdHocData"
"FastMathTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest"
"testIndicatorLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testIndicatorLong"
"checkExtraFastMathClasses","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~checkExtraFastMathClasses"
"testLexicographicIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinationsTest.java[CombinationsTest~testLexicographicIterator"
"testParameters","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~testParameters"
"testIndicatorShort","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testIndicatorShort"
"checkMissingFastMathClasses","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~checkMissingFastMathClasses"
"testSinFunction","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~testSinFunction"
"PrecisionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest"
"testNormalizeAngle","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testNormalizeAngle"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~setUp"
"testCompareToEpsilon","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testCompareToEpsilon"
"testTransformRealFirstElementNotZero","=mathmain3.6/src<test.java.org.apache.commons.math3.transform{FastSineTransformerTest.java[FastSineTransformerTest~testTransformRealFirstElementNotZero"
"testPermutedArrayHash","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testPermutedArrayHash"
"testAcosAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAcosAccuracy"
"testCompareToMaxUlps","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testCompareToMaxUlps"
"TestBean","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean"
"testReduce","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testReduce"
"testAcosSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAcosSpecialCases"
"testEqualsIncludingNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsIncludingNaN"
"getX","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~getX"
"testReduceComparedWithNormalizeAngle","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testReduceComparedWithNormalizeAngle"
"testAddExactInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAddExactInt"
"testEqualsIncludingNaNWithAllowedDelta","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsIncludingNaNWithAllowedDelta"
"getY","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~getY"
"testSignByte","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testSignByte"
"testAddExactLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAddExactLong"
"getZ","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~getZ"
"testEqualsIncludingNaNWithAllowedUlps","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsIncludingNaNWithAllowedUlps"
"testSignInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testSignInt"
"testAsinAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAsinAccuracy"
"setX","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~setX~QDouble;"
"testEqualsWithAllowedDelta","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsWithAllowedDelta"
"testSignLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testSignLong"
"testAsinSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAsinSpecialCases"
"double1",\N
"testEqualsWithAllowedUlps","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsWithAllowedUlps"
"setY","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~setY~QString;"
"testSignShort","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathUtilsTest.java[MathUtilsTest~testSignShort"
"testAtan2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAtan2"
"testEqualsWithRelativeTolerance","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testEqualsWithRelativeTolerance"
"string",\N
"FastMathStrictComparisonTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathStrictComparisonTest.java[FastMathStrictComparisonTest"
"testAtan2Accuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAtan2Accuracy"
"testFloatEqualsWithAllowedUlps","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testFloatEqualsWithAllowedUlps"
"FastMathStrictComparisonTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathStrictComparisonTest.java[FastMathStrictComparisonTest~FastMathStrictComparisonTest~QMethod;~QMethod;~\\[QType;~\\[\\[QObject;"
"setZ","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TestBean.java[TestBean~setZ~QDouble;"
"testAtan2SpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAtan2SpecialCases"
"testIssue721","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testIssue721"
"m",\N
"double1",\N
"testAtanAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testAtanAccuracy"
"f",\N
"testMath1127","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testMath1127"
"TransformerMapTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest"
"types",\N
"testClasses","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testClasses"
"testCbrtAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testCbrtAccuracy"
"testMath475","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testMath475"
"data",\N
"testClear","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testClear"
"testConstants","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testConstants"
"testMath843","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testMath843"
"data","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathStrictComparisonTest.java[FastMathStrictComparisonTest~data"
"testContainsClass","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testContainsClass"
"testCosAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testCosAccuracy"
"testRepresentableDelta","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testRepresentableDelta"
"test1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathStrictComparisonTest.java[FastMathStrictComparisonTest~test1"
"testContainsTransformer","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testContainsTransformer"
"testCoshAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testCoshAccuracy"
"testRoundDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testRoundDouble"
"BigRealTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest"
"testPutTransformer","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testPutTransformer"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testAdd"
"testDecrementExactInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testDecrementExactInt"
"testRoundFloat","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PrecisionTest.java[PrecisionTest~testRoundFloat"
"testBigDecimalValue","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testBigDecimalValue"
"testRemoveTransformer","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testRemoveTransformer"
"testDoubleNextAfterSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testDoubleNextAfterSpecialCases"
"ContinuedFractionTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ContinuedFractionTest.java[ContinuedFractionTest"
"testCompareTo","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testCompareTo"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testSerial"
"testGoldenRatio","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ContinuedFractionTest.java[ContinuedFractionTest~testGoldenRatio"
"testDoubleScalbSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testDoubleScalbSpecialCases"
"testTransformers","=mathmain3.6/src<test.java.org.apache.commons.math3.util{TransformerMapTest.java[TransformerMapTest~testTransformers"
"testConstructor","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testConstructor"
"PairTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest"
"testExpAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testExpAccuracy"
"testAccessor","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testAccessor"
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testDivide"
"testExpSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testExpSpecialCases"
"MultidimensionalCounterTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest"
"testAccessor2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testAccessor2"
"testAccessors","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testAccessors"
"testDivisionByZero","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testDivisionByZero"
"testExpm1Accuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testExpm1Accuracy"
"testCreate","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testCreate"
"testIterationConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testIterationConsistency"
"testDoubleValue","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testDoubleValue"
"testFloatNextAfterSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloatNextAfterSpecialCases"
"testEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testEquals"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testIterator"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testEqualsAndHashCode"
"testFloatScalbSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloatScalbSpecialCases"
"testHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testHashCode"
"testIteratorNoMoreElements","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testIteratorNoMoreElements"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testMultiply"
"testFloorDivInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorDivInt"
"testToString","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest~testToString"
"testIteratorPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testIteratorPreconditions"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testNegate"
"testFloorDivLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorDivLong"
"MyInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest[MyInteger"
"testMulti2UniConversion","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testMulti2UniConversion"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testReciprocal"
"testFloorDivModInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorDivModInt"
"MyInteger","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest[MyInteger~MyInteger~I"
"testPreconditions","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MultidimensionalCounterTest.java[MultidimensionalCounterTest~testPreconditions"
"testReciprocalOfZero","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testReciprocalOfZero"
"testFloorDivModLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorDivModLong"
"i",\N
"Decimal64Test","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test"
"equals","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest[MyInteger~equals~QObject;"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testSerial"
"testFloorModInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorModInt"
"testAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testAdd"
"o",\N
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealTest.java[BigRealTest~testSubtract"
"testFloorModLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testFloorModLong"
"testDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testDivide"
"hashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest[MyInteger~hashCode"
"IncrementorTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest"
"testAboveMaxCount","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testAboveMaxCount"
"set","=mathmain3.6/src<test.java.org.apache.commons.math3.util{PairTest.java[PairTest[MyInteger~set~I"
"testIsInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testIsInfinite"
"testHyperbolic","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testHyperbolic"
"testAccessor","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testAccessor"
"i",\N
"testHyperbolicInverses","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testHyperbolicInverses"
"testIsNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testIsNaN"
"BigRealFieldTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealFieldTest.java[BigRealFieldTest"
"testAlternateException","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testAlternateException"
"testIncrementExactInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIncrementExactInt"
"testMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testMultiply"
"testOne","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealFieldTest.java[BigRealFieldTest~testOne"
"testBelowMaxCount","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testBelowMaxCount"
"testIndicatorDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIndicatorDouble"
"testNegate","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testNegate"
"testSerial","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealFieldTest.java[BigRealFieldTest~testSerial"
"testBulkIncrement","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testBulkIncrement"
"testIndicatorFloat","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIndicatorFloat"
"testReciprocal","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testReciprocal"
"testZero","=mathmain3.6/src<test.java.org.apache.commons.math3.util{BigRealFieldTest.java[BigRealFieldTest~testZero"
"testCanIncrement1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testCanIncrement1"
"testIntPow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIntPow"
"testSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test~testSubtract"
"DoubleArrayAbstractTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DoubleArrayAbstractTest.java[DoubleArrayAbstractTest"
"testCanIncrement2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testCanIncrement2"
"testAdd1000","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DoubleArrayAbstractTest.java[DoubleArrayAbstractTest~testAdd1000"
"X","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test^X"
"testIntPowHuge","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIntPowHuge"
"testConstructor1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testConstructor1"
"testAddElementRolling","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DoubleArrayAbstractTest.java[DoubleArrayAbstractTest~testAddElementRolling"
"Y","=mathmain3.6/src<test.java.org.apache.commons.math3.util{Decimal64Test.java[Decimal64Test^Y"
"testIntPowLongMinValue","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIntPowLongMinValue"
"testConstructor2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testConstructor2"
"testGetValues","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DoubleArrayAbstractTest.java[DoubleArrayAbstractTest~testGetValues"
"testIntPowSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testIntPowSpecialCases"
"OpenIntToDoubleHashMapTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest"
"testReset","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IncrementorTest.java[IncrementorTest~testReset"
"testMinMax","=mathmain3.6/src<test.java.org.apache.commons.math3.util{DoubleArrayAbstractTest.java[DoubleArrayAbstractTest~testMinMax"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~setUp"
"testLog10Accuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLog10Accuracy"
"ResizableDoubleArrayTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest"
"testConcurrentModification","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testConcurrentModification"
"IntegerSequenceTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest"
"testLog1pAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLog1pAccuracy"
"setUp","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~setUp"
"testBasicRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testBasicRange"
"testContainsKey","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testContainsKey"
"testLog1pSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLog1pSpecialCases"
"tearDown","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~tearDown"
"testCanIncrementZeroTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testCanIncrementZeroTimes"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testCopy"
"testLogAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLogAccuracy"
"testAdd1000","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testAdd1000"
"testDecreasingRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testDecreasingRange"
"testGetAbsent","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testGetAbsent"
"testLogSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLogSpecialCases"
"testAddElementRolling","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testAddElementRolling"
"testEmptyRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testEmptyRange"
"testGetFromEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testGetFromEmpty"
"testLogWithBase","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testLogWithBase"
"testAddElements","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testAddElements"
"testEmptyRangeNegativeStart","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testEmptyRangeNegativeStart"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testIterator"
"testMath1269","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMath1269"
"testCompute","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testCompute"
"testIncreasingRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncreasingRange"
"testPutAbsentOnExisting","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutAbsentOnExisting"
"testMath904","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMath904"
"testConstructors","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testConstructors"
"testIncreasingRangeNegativeEnd","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncreasingRangeNegativeEnd"
"testPutAndGet","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutAndGet"
"testMath905LargeNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMath905LargeNegative"
"testDiscard","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testDiscard"
"testIncrementZeroStep","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncrementZeroStep"
"testPutAndGetWith0ExpectedSize","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutAndGetWith0ExpectedSize"
"testMath905LargePositive","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMath905LargePositive"
"testEqualsAndHashCode","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testEqualsAndHashCode"
"testIncrementZeroTimes","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncrementZeroTimes"
"testPutAndGetWithExpectedSize","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutAndGetWithExpectedSize"
"testMinMaxDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMinMaxDouble"
"testGetArrayRef","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testGetArrayRef"
"testIncrementorAlternateException","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncrementorAlternateException"
"testPutKeysWithCollision2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutKeysWithCollision2"
"testMinMaxFloat","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMinMaxFloat"
"testMutators","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testMutators"
"testIncrementorCountExceeded","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIncrementorCountExceeded"
"testPutKeysWithCollisions","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutKeysWithCollisions"
"testMultiplyExactInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMultiplyExactInt"
"testSetElementArbitraryExpansion1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testSetElementArbitraryExpansion1"
"testIteratorZeroElement","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testIteratorZeroElement"
"testPutOnExisting","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testPutOnExisting"
"testMultiplyExactLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testMultiplyExactLong"
"testSetElementArbitraryExpansion2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testSetElementArbitraryExpansion2"
"testRangeMultipleIterations","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testRangeMultipleIterations"
"testRemove","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testRemove"
"testNextAfter","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testNextAfter"
"testSetNumberOfElements","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testSetNumberOfElements"
"testSingleElementRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{IntegerSequenceTest.java[IntegerSequenceTest~testSingleElementRange"
"testRemove2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testRemove2"
"testPowAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testPowAccuracy"
"testSubstitute","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testSubstitute"
"OpenIntToFieldTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest"
"testRemoveAbsent","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testRemoveAbsent"
"testPowAllSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testPowAllSpecialCases"
"testWithInitialCapacity","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testWithInitialCapacity"
"testConcurrentModification","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testConcurrentModification"
"testRemoveFromEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToDoubleHashMapTest.java[OpenIntToDoubleHashMapTest~testRemoveFromEmpty"
"testPowLargeIntegralDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testPowLargeIntegralDouble"
"testWithInitialCapacityAndExpansionFactor","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ResizableDoubleArrayTest.java[ResizableDoubleArrayTest~testWithInitialCapacityAndExpansionFactor"
"testContainsKey","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testContainsKey"
"ArithmeticUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest"
"testPowSpecialCases","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testPowSpecialCases"
"testCopy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testCopy"
"testAddAndCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testAddAndCheck"
"MathArraysTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest"
"testSignumDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSignumDouble"
"testArrayEquals","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testArrayEquals"
"testGetAbsent","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testGetAbsent"
"testAddAndCheckLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testAddAndCheckLong"
"testSignumFloat","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSignumFloat"
"testArrayEqualsIncludingNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testArrayEqualsIncludingNaN"
"testGetFromEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testGetFromEmpty"
"testGcd","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testGcd"
"testSinAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSinAccuracy"
"testCheckEqualLength1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckEqualLength1"
"testIterator","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testIterator"
"testGcdConsistency","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testGcdConsistency"
"testSinhAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSinhAccuracy"
"testCheckEqualLength2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckEqualLength2"
"testPutAbsentOnExisting","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutAbsentOnExisting"
"testGcdLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testGcdLong"
"testSubtractExactInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSubtractExactInt"
"testCheckNonNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckNonNegative"
"testPutAndGet","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutAndGet"
"testIsPowerOfTwo","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testIsPowerOfTwo"
"testSubtractExactLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testSubtractExactLong"
"testCheckNonNegative2D","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckNonNegative2D"
"testPutAndGetWith0ExpectedSize","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutAndGetWith0ExpectedSize"
"testLcm","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testLcm"
"testTanAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testTanAccuracy"
"testCheckNotNaN","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckNotNaN"
"testPutAndGetWithExpectedSize","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutAndGetWithExpectedSize"
"testLcmLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testLcmLong"
"testTanhAccuracy","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testTanhAccuracy"
"testCheckOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckOrder"
"testPutKeysWithCollision2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutKeysWithCollision2"
"testMulAndCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testMulAndCheck"
"testToDegrees","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testToDegrees"
"testCheckPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckPositive"
"testPutKeysWithCollisions","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutKeysWithCollisions"
"testMulAndCheckLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testMulAndCheckLong"
"testToIntExact","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testToIntExact"
"testCheckRectangular","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCheckRectangular"
"testPutOnExisting","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testPutOnExisting"
"testPow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPow"
"testToIntExactTooHigh","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testToIntExactTooHigh"
"testConcatenate","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testConcatenate"
"testRemove","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testRemove"
"testPowDeprecated","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowDeprecated"
"testToIntExactTooLow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testToIntExactTooLow"
"testConcatenateEmptyArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testConcatenateEmptyArguments"
"testRemove2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testRemove2"
"testPowInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowInt"
"testToRadians","=mathmain3.6/src<test.java.org.apache.commons.math3.util{FastMathTest.java[FastMathTest~testToRadians"
"testConcatenateNullArguments","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testConcatenateNullArguments"
"testRemoveAbsent","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testRemoveAbsent"
"testPowIntOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowIntOverflow"
"CombinatoricsUtilsTest","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest"
"testConcatentateSingle","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testConcatentateSingle"
"testRemoveFromEmpty","=mathmain3.6/src<test.java.org.apache.commons.math3.util{OpenIntToFieldTest.java[OpenIntToFieldTest~testRemoveFromEmpty"
"testPowLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowLong"
"test0Choose0","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~test0Choose0"
"testConvolve","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testConvolve"
"RealFunctionValidation","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation"
"testPowLongOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowLongOverflow"
"testBinomialCoefficient","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testBinomialCoefficient"
"main","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation~main~\\[QString;"
"testCopyOfDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfDouble"
"testPowMinusOneInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowMinusOneInt"
"testBinomialCoefficientFail","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testBinomialCoefficientFail"
"",\N
"testCopyOfDouble2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfDouble2"
"testPowMinusOneLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowMinusOneLong"
"testBinomialCoefficientLarge","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testBinomialCoefficientLarge"
"readAndWritePrimitiveValue","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation~readAndWritePrimitiveValue~QDataInputStream;~QDataOutputStream;~QClass\\<*>;"
"testCopyOfDouble3","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfDouble3"
"testPowNegativeInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowNegativeInt"
"in",\N
"testCheckBinomial1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testCheckBinomial1"
"testCopyOfInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfInt"
"out",\N
"testPowNegativeIntOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowNegativeIntOverflow"
"testCheckBinomial2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testCheckBinomial2"
"type",\N
"testCopyOfInt2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfInt2"
"testPowNegativeLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowNegativeLong"
"testCheckBinomial3","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testCheckBinomial3"
"run","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation~run~QApplicationProperties;"
"testCopyOfInt3","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfInt3"
"testPowNegativeLongOverflow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowNegativeLongOverflow"
"properties",\N
"testFactorial","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testFactorial"
"testCopyOfRange","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCopyOfRange"
"MissingRequiredPropertyException","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[MissingRequiredPropertyException"
"testPowOneInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowOneInt"
"testFactorialFail","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testFactorialFail"
"MissingRequiredPropertyException","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[MissingRequiredPropertyException~MissingRequiredPropertyException~QString;"
"testCosAngle2D","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCosAngle2D"
"testStirlingS2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testStirlingS2"
"testPowOneLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testPowOneLong"
"key",\N
"testCosAngle3D","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCosAngle3D"
"testStirlingS2LargeK","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testStirlingS2LargeK"
"testSubAndCheck","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testSubAndCheck"
"ApplicationProperties","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties"
"testCosAngleExtreme","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testCosAngleExtreme"
"create","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties~create~QProperties;"
"testStirlingS2NegativeN","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testStirlingS2NegativeN"
"testSubAndCheckErrorMessage","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testSubAndCheckErrorMessage"
"properties",\N
"testEbeAdd","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeAdd"
"testStirlingS2Overflow","=mathmain3.6/src<test.java.org.apache.commons.math3.util{CombinatoricsUtilsTest.java[CombinatoricsUtilsTest~testStirlingS2Overflow"
"testSubAndCheckLong","=mathmain3.6/src<test.java.org.apache.commons.math3.util{ArithmeticUtilsTest.java[ArithmeticUtilsTest~testSubAndCheckLong"
"findStaticMethod","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties~findStaticMethod~QString;~QString;~QList\\<QClass\\<*>;>;"
"testEbeAddPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeAddPrecondition"
"ClusterAlgorithmComparison","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison"
"ExampleUtils","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ExampleUtils.java[ExampleUtils"
"className",\N
"testEbeDivide","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeDivide"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison~main~\\[QString;"
"showExampleFrame","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ExampleUtils.java[ExampleUtils~showExampleFrame~QExampleFrame;"
"methodName",\N
"testEbeDividePrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeDividePrecondition"
"signature",\N
"",\N
"frame",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison[Display"
"parsePrimitiveType","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties~parsePrimitiveType~QString;"
"ExampleFrame","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ExampleUtils.java[ExampleUtils[ExampleFrame"
"testEbeMultiply","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeMultiply"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison[Display~Display"
"getMainPanel","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ExampleUtils.java[ExampleUtils[ExampleFrame~getMainPanel"
"type",\N
"testEbeMultiplyPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeMultiplyPrecondition"
"ClusterPlot","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison[ClusterPlot"
"by","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^by"
"RealDistributionComparison","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{RealDistributionComparison.java[RealDistributionComparison"
"testEbeSubtract","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeSubtract"
"getPreferredSize","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison[ClusterPlot~getPreferredSize"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{RealDistributionComparison.java[RealDistributionComparison~main~\\[QString;"
"from","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^from"
"testEbeSubtractPrecondition","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testEbeSubtractPrecondition"
"paintComponent","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{ClusterAlgorithmComparison.java[ClusterAlgorithmComparison[ClusterPlot~paintComponent~QGraphics;"
"",\N
"inputFileMask","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^inputFileMask"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{RealDistributionComparison.java[RealDistributionComparison[Display"
"testIsMonotonic","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testIsMonotonic"
"g",\N
"method","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^method"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{RealDistributionComparison.java[RealDistributionComparison[Display~Display"
"testIsMonotonicComparable","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testIsMonotonicComparable"
"FastMathTestPerformance","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{FastMathTestPerformance.java[FastMathTestPerformance"
"outputFileMask","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^outputFileMask"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{FastMathTestPerformance.java[FastMathTestPerformance~main~\\[QString;"
"getMainPanel","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{RealDistributionComparison.java[RealDistributionComparison[Display~getMainPanel"
"testL1DistanceDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testL1DistanceDouble"
"to","=mathmain3.6/src<test.maxima.special.RealFunctionValidation{RealFunctionValidation.java[RealFunctionValidation[ApplicationProperties^to"
"",\N
"LowDiscrepancyGeneratorComparison","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison"
"testL1DistanceInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testL1DistanceInt"
"testL2DistanceDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testL2DistanceDouble"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison~main~\\[QString;"
"ConstantVoltageExample","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample"
"CannonballExample","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample"
"createComponent","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample~createComponent"
"testL2DistanceInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testL2DistanceInt"
"createComponent","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample~createComponent"
"",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison[Display"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample~main~\\[QString;"
"testLInfDistanceDouble","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLInfDistanceDouble"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample~main~\\[QString;"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison[Display~Display"
"",\N
"",\N
"testLInfDistanceInt","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLInfDistanceInt"
"VoltMeter","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[VoltMeter"
"Plot","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison[Plot"
"Cannonball","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball"
"testLinearCombination1","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLinearCombination1"
"VoltMeter","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[VoltMeter~VoltMeter~D~D~D~I"
"getPreferredSize","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison[Plot~getPreferredSize"
"Cannonball","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~Cannonball~D~D~D~D~I"
"testLinearCombination2","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLinearCombination2"
"voltage",\N
"paintComponent","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide{LowDiscrepancyGeneratorComparison.java[LowDiscrepancyGeneratorComparison[Plot~paintComponent~QGraphics;"
"timeslice",\N
"processNoise",\N
"angle",\N
"testLinearCombinationHuge","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLinearCombinationHuge"
"g",\N
"measurementNoise",\N
"initialVelocity",\N
"testLinearCombinationInfinite","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLinearCombinationInfinite"
"HelloWorldExample","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample"
"seed",\N
"measurementNoise",\N
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample~main~\\[QString;"
"getMeasuredVoltage","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[VoltMeter~getMeasuredVoltage"
"seed",\N
"testLinearCombinationWithSingleElementArray","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testLinearCombinationWithSingleElementArray"
"",\N
"getMeasuredX","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getMeasuredX"
"getVoltage","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[VoltMeter~getVoltage"
"testNatural","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testNatural"
"CROSSOVER_RATE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^CROSSOVER_RATE"
"getMeasuredY","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getMeasuredY"
"step","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[VoltMeter~step"
"testNaturalZero","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testNaturalZero"
"DIMENSION","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^DIMENSION"
"getX","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getX"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[Display"
"testNormalizeArray","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testNormalizeArray"
"ELITISM_RATE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^ELITISM_RATE"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[Display~Display"
"getXVelocity","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getXVelocity"
"testScale","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testScale"
"MUTATION_RATE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^MUTATION_RATE"
"getMainPanel","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{ConstantVoltageExample.java[ConstantVoltageExample[Display~getMainPanel"
"getY","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getY"
"testScaleInPlace","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testScaleInPlace"
"POPULATION_SIZE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^POPULATION_SIZE"
"RandomPolygonMutation","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{RandomPolygonMutation.java[RandomPolygonMutation"
"getYVelocity","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~getYVelocity"
"testSequence","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSequence"
"RandomPolygonMutation","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{RandomPolygonMutation.java[RandomPolygonMutation~RandomPolygonMutation~F~F"
"TARGET_STRING","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^TARGET_STRING"
"step","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Cannonball~step"
"testSequenceZero","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSequenceZero"
"mutationRate",\N
"TOURNAMENT_ARITY","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample^TOURNAMENT_ARITY"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Display"
"mutationAmount",\N
"testShuffleHead","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testShuffleHead"
"StringChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome"
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Display~Display"
"PolygonChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome"
"StringChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~StringChromosome~QList\\<QCharacter;>;"
"testShuffleTail","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testShuffleTail"
"PolygonChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~PolygonChromosome~QList\\<QPolygon;>;"
"getMainPanel","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.filter{CannonballExample.java[CannonballExample[Display~getMainPanel"
"repr",\N
"testSortInPlace","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSortInPlace"
"representation",\N
"ImageEvolutionExample","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample"
"StringChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~StringChromosome~QString;"
"draw","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~draw~QGraphics2D;~I~I"
"testSortInPlaceDecresasingOrder","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSortInPlaceDecresasingOrder"
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample~main~\\[QString;"
"str",\N
"g",\N
"",\N
"testSortInPlaceExample","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSortInPlaceExample"
"fitness","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~fitness"
"width",\N
"MUTATION_CHANGE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^MUTATION_CHANGE"
"testSortInPlaceFailures","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testSortInPlaceFailures"
"height",\N
"getStringRepresentation","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~getStringRepresentation"
"MUTATION_RATE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^MUTATION_RATE"
"fitness","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~fitness"
"testUnique","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testUnique"
"newFixedLengthChromosome","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~newFixedLengthChromosome~QList\\<QCharacter;>;"
"POLYGON_COUNT","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^POLYGON_COUNT"
"getPolygonRepresentation","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~getPolygonRepresentation"
"testUniqueInfiniteValues","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testUniqueInfiniteValues"
"repr",\N
"POLYGON_LENGTH","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^POLYGON_LENGTH"
"setRefImage","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~setRefImage~QBufferedImage;"
"toString","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[StringChromosome~toString"
"testUniqueNaNValues","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testUniqueNaNValues"
"POPULATION_SIZE","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^POPULATION_SIZE"
"ref",\N
"testUniqueNullArgument","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testUniqueNullArgument"
"RandomCharacterMutation","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{HelloWorldExample.java[HelloWorldExample[RandomCharacterMutation"
"setTestImage","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~setTestImage~QBufferedImage;"
"TOURNAMENT_ARITY","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample^TOURNAMENT_ARITY"
"Polygon","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{Polygon.java[Polygon"
"testVerifyValuesNegative","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testVerifyValuesNegative"
"draw","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{Polygon.java[Polygon~draw~QGraphics2D;~I~I"
"image",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display"
"testVerifyValuesPositive","=mathmain3.6/src<test.java.org.apache.commons.math3.util{MathArraysTest.java[MathArraysTest~testVerifyValuesPositive"
"toString","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{PolygonChromosome.java[PolygonChromosome~toString"
"g",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display~Display"
"width",\N
"GeometryExample","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample"
"ChineseRingsClassifier","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier"
"isAlive","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display~isAlive"
"height",\N
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample~main~\\[QString;"
"ChineseRingsClassifier","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~ChineseRingsClassifier~QChineseRings;~I~I"
"mutate","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{Polygon.java[Polygon~mutate~F~F"
"startEvolution","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display~startEvolution"
"",\N
"rings",\N
"mutationRate",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample[Display"
"stopRequest","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display~stopRequest"
"dim1",\N
"mutationAmount",\N
"Display","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample[Display~Display"
"dim2",\N
"ImagePainter","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter"
"randomPolygon","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{Polygon.java[Polygon~randomPolygon~I"
"computeHitHistogram","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~computeHitHistogram"
"ImagePainter","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter~ImagePainter~I~I"
"getMainPanel","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample[Display~getMainPanel"
"length",\N
"computeQuantizationError","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~computeQuantizationError"
"width",\N
"paintConvexHull","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.geometry{GeometryExample.java[GeometryExample[Display~paintConvexHull"
"ChineseRings","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRings.java[ChineseRings"
"height",\N
"computeTopographicError","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~computeTopographicError"
"getMaximumSize","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter~getMaximumSize"
"computeU","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~computeU"
"createParallelTasks","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~createParallelTasks~I~J"
"getMinimumSize","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter~getMinimumSize"
"numTasks",\N
"getPreferredSize","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter~getPreferredSize"
"numSamplesPerTask",\N
"paint","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.genetics{ImageEvolutionExample.java[ImageEvolutionExample[Display[ImagePainter~paint~QGraphics;"
"createSequentialTask","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~createSequentialTask~J"
"g",\N
"numSamples",\N
"main","=mathmain3.6/src<userguide.java.org.apache.commons.math3.userguide.sofm{ChineseRingsClassifier.java[ChineseRingsClassifier~main~\\[QString;"
"",\N