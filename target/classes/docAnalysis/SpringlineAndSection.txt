64,64,1. Getting Started with Spring
81,81,2. Introduction to the Spring Framework
99,99,2.1 Dependency Injection and Inversion of Control
127,127,2.2 Modules
137,137,2.2.1 Core Container
167,167,2.2.2 AOP and Instrumentation
179,179,2.2.3 Messaging
186,186,2.2.4 Data Access/Integration
207,207,2.2.5 Web
223,223,2.2.6 Test
232,232,2.3 Usage scenarios
274,274,2.3.1 Dependency Management and Naming Conventions
453,453,2.3.2 Logging
627,627,3. New Features and Enhancements in Spring Framework 4.0
638,638,3.1 Improved Getting Started Experience
648,648,3.2 Removed Deprecated Packages and Methods
662,662,3.3 Java 8 (as well as 6 and 7)
674,674,3.4 Java EE 6 and 7
695,695,3.5 Groovy Bean Definition DSL
721,721,3.6 Core Container Improvements
754,754,3.7 General Web Improvements
773,773,3.8 WebSocket, SockJS, and STOMP Messaging
790,790,3.9 Testing Improvements
816,816,4. New Features and Enhancements in Spring Framework 4.1
817,817,4.1 JMS Improvements
851,851,4.2 Caching Improvements
872,872,4.3 Web Improvements
950,950,4.4 WebSocket Messaging Improvements
977,977,4.5 Testing Improvements
1037,1037,5. New Features and Enhancements in Spring Framework 4.2
1038,1038,5.1 Core Container Improvements
1147,1147,5.2 Data Access Improvements
1161,1161,5.3 JMS Improvements
1175,1175,5.4 Web Improvements
1232,1232,5.5 WebSocket Messaging Improvements
1261,1261,5.6 Testing Improvements
1346,1346,6. New Features and Enhancements in Spring Framework 4.3
1347,1347,6.1 Core Container Improvements
1372,1372,6.2 Data Access Improvements
1378,1378,6.3 Caching Improvements
1396,1396,6.4 JMS Improvements
1404,1404,6.5 Web Improvements
1443,1443,6.6 WebSocket Messaging Improvements
1448,1448,6.7 Testing Improvements
1492,1492,6.8 Support for new library and server generations
1538,1538,7. The IoC container
1539,1539,7.1 Introduction to the Spring IoC container and beans
1572,1572,7.2 Container overview
1603,1603,7.2.1 Configuration metadata
1665,1665,7.2.2 Instantiating a container
1763,1763,7.2.3 Using the container
1785,1785,7.3 Bean overview
1825,1825,7.3.1 Naming beans
1894,1894,7.3.2 Instantiating beans
2043,2043,7.4 Dependencies
2049,2049,7.4.1 Dependency Injection
2406,2406,7.4.2 Dependencies and configuration in detail
2836,2836,7.4.3 Using depends-on
2865,2865,7.4.4 Lazy-initialized beans
2892,2892,7.4.5 Autowiring collaborators
2995,2995,7.4.6 Method injection
3182,3182,7.5 Bean scopes
3217,3217,7.5.1 The singleton scope
3243,3243,7.5.2 The prototype scope
3274,3274,7.5.3 Singleton beans with prototype-bean dependencies
3288,3288,7.5.4 Request, session, global session, application, and WebSocket scopes
3533,3533,7.5.5 Custom scopes
3629,3629,7.6 Customizing the nature of a bean
3631,3631,7.6.1 Lifecycle callbacks
3951,3951,7.6.2 ApplicationContextAware and BeanNameAware
3993,3993,7.6.3 Other Aware interfaces
4015,4015,7.7 Bean definition inheritance
4079,4079,7.8 Container Extension Points
4085,4085,7.8.1 Customizing beans using a BeanPostProcessor
4251,4251,7.8.2 Customizing configuration metadata with a BeanFactoryPostProcessor
4406,4406,7.8.3 Customizing instantiation logic with a FactoryBean
4438,4438,7.9 Annotation-based container configuration
4505,4505,7.9.1 @Required
4529,4529,7.9.2 @Autowired
4694,4694,7.9.3 Fine-tuning annotation-based autowiring with @Primary
4751,4751,7.9.4 Fine-tuning annotation-based autowiring with qualifiers
5032,5032,7.9.5 Using generics as autowiring qualifiers
5065,5065,7.9.6 CustomAutowireConfigurer
5092,5092,7.9.7 @Resource
5157,5157,7.9.8 @PostConstruct and @PreDestroy
5188,5188,7.10 Classpath scanning and managed components
5208,5208,7.10.1 @Component and further stereotype annotations
5228,5228,7.10.2 Meta-annotations
5278,5278,7.10.3 Automatically detecting classes and registering bean definitions
5347,5347,7.10.4 Using filters to customize scanning
5385,5385,7.10.5 Defining bean metadata within components
5497,5497,7.10.6 Naming autodetected components
5536,5536,7.10.7 Providing a scope for autodetected components
5579,5579,7.10.8 Providing qualifier metadata with annotations
5613,5613,7.11 Using JSR 330 Standard Annotations
5629,5629,7.11.1 Dependency Injection with @Inject and @Named
5681,5681,7.11.2 @Named: a standard equivalent to the @Component annotation
5728,5728,7.11.3 Limitations of JSR-330 standard annotations
5747,5747,7.12 Java-based container configuration
5749,5749,7.12.1 Basic concepts: @Bean and @Configuration
5793,5793,7.12.2 Instantiating the Spring container using AnnotationConfigApplicationContext
5934,5934,7.12.3 Using the @Bean annotation
6158,6158,7.12.4 Using the @Configuration annotation
6282,6282,7.12.5 Composing Java-based configurations
6683,6683,7.13 Environment abstraction
6700,6700,7.13.1 Bean definition profiles
6826,6826,7.13.2 XML bean definition profiles
6921,6921,7.13.3 PropertySource abstraction
6977,6977,7.13.4 @PropertySource
7020,7020,7.13.5 Placeholder resolution in statements
7036,7036,7.14 Registering a LoadTimeWeaver
7058,7058,7.15 Additional Capabilities of the ApplicationContext
7084,7084,7.15.1 Internationalization using MessageSource
7221,7221,7.15.2 Standard and Custom Events
7490,7490,7.15.3 Convenient access to low-level resources
7518,7518,7.15.4 Convenient ApplicationContext instantiation for web applications
7541,7541,7.15.5 Deploying a Spring ApplicationContext as a Java EE RAR file
7578,7578,7.16 The BeanFactory
7591,7591,7.16.1 BeanFactory or ApplicationContext?
7637,7637,7.16.2 Glue code and the evil singleton
7669,7669,8. Resources
7671,7671,8.1 Introduction
7682,7682,8.2 The Resource interface
7745,7745,8.3 Built-in Resource implementations
7749,7749,8.3.1 UrlResource
7766,7766,8.3.2 ClassPathResource
7782,7782,8.3.3 FileSystemResource
7787,7787,8.3.4 ServletContextResource
7797,7797,8.3.5 InputStreamResource
7807,7807,8.3.6 ByteArrayResource
7815,7815,8.4 The ResourceLoader
7850,7850,8.5 The ResourceLoaderAware interface
7880,7880,8.6 Resources as dependencies
7906,7906,8.7 Application contexts and Resource paths
7908,7908,8.7.1 Constructing application contexts
7956,7956,8.7.2 Wildcards in application context constructor resource paths
8060,8060,8.7.3 FileSystemResource caveats
8093,8093,9. Validation, Data Binding, and Type Conversion
8095,8095,9.1 Introduction
8131,8131,9.2 Validation using Spring’s Validator interface
8227,8227,9.3 Resolving codes to error messages
8252,8252,9.4 Bean manipulation and the BeanWrapper
8273,8273,9.4.1 Setting and getting basic and nested properties
8355,8355,9.4.2 Built-in PropertyEditor implementations
8599,8599,9.5 Spring Type Conversion
8607,8607,9.5.1 Converter SPI
8639,8639,9.5.2 ConverterFactory
8677,8677,9.5.3 GenericConverter
8729,8729,9.5.4 ConversionService API
8754,8754,9.5.5 Configuring a ConversionService
8788,8788,9.5.6 Using a ConversionService programmatically
8825,8825,9.6 Spring Field Formatting
8847,8847,9.6.1 Formatter SPI
8911,8911,9.6.2 Annotation-driven Formatting
8989,8989,9.6.3 FormatterRegistry SPI
9018,9018,9.6.4 FormatterRegistrar SPI
9036,9036,9.6.5 Configuring Formatting in Spring MVC
9041,9041,9.7 Configuring a global date & time format
9115,9115,9.8 Spring Validation
9121,9121,9.8.1 Overview of the JSR-303 Bean Validation API
9151,9151,9.8.2 Configuring a Bean Validation Provider
9240,9240,9.8.3 Configuring a DataBinder
9264,9264,9.8.4 Spring MVC 3 Validation
9270,9270,10. Spring Expression Language (SpEL)
9272,9272,10.1 Introduction
9300,9300,10.2 Feature Overview
9343,9343,10.3 Expression Evaluation using Spring’s Expression Interface
9448,9448,10.3.1 The EvaluationContext interface
9495,9495,10.3.2 Parser configuration
9526,9526,10.3.3 SpEL compilation
9621,9621,10.4 Expression support for defining bean definitions
9626,9626,10.4.1 XML based configuration
9655,9655,10.4.2 Annotation-based configuration
9721,9721,10.5 Language Reference
9723,9723,10.5.1 Literal expressions
9747,9747,10.5.2 Properties, Arrays, Lists, Maps, Indexers
9796,9796,10.5.3 Inline lists
9807,9807,10.5.4 Inline Maps
9819,9819,10.5.5 Array construction
9833,9833,10.5.6 Methods
9844,9844,10.5.7 Operators
9949,9949,10.5.8 Assignment
9963,9963,10.5.9 Types
9979,9979,10.5.10 Constructors
9993,9993,10.5.11 Variables
10025,10025,10.5.12 Functions
10054,10054,10.5.13 Bean references
10072,10072,10.5.14 Ternary Operator (If-Then-Else)
10092,10092,10.5.15 The Elvis Operator
10122,10122,10.5.16 Safe Navigation operator
10151,10151,10.5.17 Collection Selection
10172,10172,10.5.18 Collection Projection
10186,10186,10.5.19 Expression templating
10218,10218,10.6 Classes used in the examples
10367,10367,11. Aspect Oriented Programming with Spring
10369,10369,11.1 Introduction
10404,10404,11.1.1 AOP concepts
10488,10488,11.1.2 Spring AOP capabilities and goals
10537,10537,11.1.3 AOP Proxies
10553,10553,11.2 @AspectJ support
10565,10565,11.2.1 Enabling @AspectJ Support
10596,10596,11.2.2 Declaring an aspect
10635,10635,11.2.3 Declaring a pointcut
11012,11012,11.2.4 Declaring advice
11396,11396,11.2.5 Introductions
11426,11426,11.2.6 Aspect instantiation models
11462,11462,11.2.7 Example
11543,11543,11.3 Schema-based AOP support
11565,11565,11.3.1 Declaring an aspect
11584,11584,11.3.2 Declaring a pointcut
11663,11663,11.3.3 Declaring advice
11918,11918,11.3.4 Introductions
11954,11954,11.3.5 Aspect instantiation models
11959,11959,11.3.6 Advisors
11991,11991,11.3.7 Example
12087,12087,11.4 Choosing which AOP declaration style to use
12094,12094,11.4.1 Spring AOP or full AspectJ?
12114,12114,11.4.2 @AspectJ or XML for Spring AOP?
12159,12159,11.5 Mixing aspect types
12167,12167,11.6 Proxying mechanisms
12209,12209,11.6.1 Understanding AOP proxies
12311,12311,11.7 Programmatic creation of @AspectJ Proxies
12335,12335,11.8 Using AspectJ with Spring applications
12348,12348,11.8.1 Using AspectJ to dependency inject domain objects with Spring
12499,12499,11.8.2 Other Spring aspects for AspectJ
12543,12543,11.8.3 Configuring AspectJ aspects using Spring IoC
12583,12583,11.8.4 Load-time weaving with AspectJ in the Spring Framework
12996,12996,11.9 Further Resources
13007,13007,12. Spring AOP APIs
13009,13009,12.1 Introduction
13020,13020,12.2 Pointcut API in Spring
13023,13023,12.2.1 Concepts
13070,13070,12.2.2 Operations on pointcuts
13086,13086,12.2.3 AspectJ expression pointcuts
13093,13093,12.2.4 Convenience pointcut implementations
13172,13172,12.2.5 Pointcut superclasses
13187,13187,12.2.6 Custom pointcuts
13199,13199,12.3 Advice API in Spring
13202,13202,12.3.1 Advice lifecycles
13214,13214,12.3.2 Advice types in Spring
13499,13499,12.4 Advisor API in Spring
13512,13512,12.5 Using the ProxyFactoryBean to create AOP proxies
13525,13525,12.5.1 Basics
13539,13539,12.5.2 JavaBean properties
13595,13595,12.5.3 JDK- and CGLIB-based proxies
13638,13638,12.5.4 Proxying interfaces
13728,13728,12.5.5 Proxying classes
13757,13757,12.5.6 Using 'global' advisors
13775,13775,12.6 Concise proxy definitions
13825,13825,12.7 Creating AOP proxies programmatically with the ProxyFactory
13853,13853,12.8 Manipulating advised objects
13925,13925,12.9 Using the "auto-proxy" facility
13942,13942,12.9.1 Autoproxy bean definitions
14031,14031,12.9.2 Using metadata-driven auto-proxying
14129,14129,12.10 Using TargetSources
14148,14148,12.10.1 Hot swappable target sources
14174,14174,12.10.2 Pooling target sources
14237,14237,12.10.3 Prototype target sources
14253,14253,12.10.4 ThreadLocal target sources
14276,14276,12.11 Defining new Advice types
14289,14289,12.12 Further resources
14314,14314,13. Introduction to Spring Testing
14322,14322,14. Unit Testing
14340,14340,14.1 Mock Objects
14342,14342,14.1.1 Environment
14350,14350,14.1.2 JNDI
14358,14358,14.1.3 Servlet API
14371,14371,14.1.4 Portlet API
14377,14377,14.2 Unit Testing support Classes
14379,14379,14.2.1 General testing utilities
14406,14406,14.2.2 Spring MVC
14423,14423,15. Integration Testing
14425,14425,15.1 Overview
14450,14450,15.2 Goals of Integration Testing
14466,14466,15.2.1 Context management and caching
14492,14492,15.2.2 Dependency Injection of test fixtures
14517,14517,15.2.3 Transaction management
14538,14538,15.2.4 Support classes for integration testing
14559,14559,15.3 JDBC Testing Support
14587,14587,15.4 Annotations
14589,14589,15.4.1 Spring Testing Annotations
14943,14943,15.4.2 Standard Annotation Support
14981,14981,15.4.3 Spring JUnit 4 Testing Annotations
15055,15055,15.4.4 Meta-Annotation Support for Testing
15136,15136,15.5 Spring TestContext Framework
15156,15156,15.5.1 Key abstractions
15250,15250,15.5.2 Bootstrapping the TestContext framework
15272,15272,15.5.3 TestExecutionListener configuration
15381,15381,15.5.4 Context management
16444,16444,15.5.5 Dependency injection of test fixtures
16561,16561,15.5.6 Testing request and session scoped beans
16691,16691,15.5.7 Transaction management
16945,16945,15.5.8 Executing SQL scripts
17170,17170,15.5.9 TestContext Framework support classes
17308,17308,15.6 Spring MVC Test Framework
17328,17328,15.6.1 Server-Side Tests
17631,17631,15.6.2 HtmlUnit Integration
18232,18232,15.6.3 Client-Side REST Tests
18306,18306,15.7 PetClinic Example
18395,18395,16. Further Resources
18451,18451,17. Transaction Management
18453,18453,17.1 Introduction to Spring Framework transaction management
18497,18497,17.2 Advantages of the Spring Framework’s transaction support model
18504,18504,17.2.1 Global transactions
18524,18524,17.2.2 Local transactions
18535,18535,17.2.3 Spring Framework’s consistent programming model
18572,18572,17.3 Understanding the Spring Framework transaction abstraction
18742,18742,17.4 Synchronizing resources with transactions
18752,18752,17.4.1 High-level synchronization approach
18764,18764,17.4.2 Low-level synchronization approach
18795,18795,17.4.3 TransactionAwareDataSourceProxy
18808,18808,17.5 Declarative transaction management
18869,18869,17.5.1 Understanding the Spring Framework’s declarative transaction implementation
18891,18891,17.5.2 Example of declarative transaction implementation
19074,19074,17.5.3 Rolling back a declarative transaction
19135,19135,17.5.4 Configuring different transactional semantics for different beans
19237,19237,17.5.5 <tx:advice/> settings
19265,19265,17.5.6 Using @Transactional
19522,19522,17.5.7 Transaction propagation
19575,19575,17.5.8 Advising transactional operations
19736,19736,17.5.9 Using @Transactional with AspectJ
19776,19776,17.6 Programmatic transaction management
19787,19787,17.6.1 Using the TransactionTemplate
19886,19886,17.6.2 Using the PlatformTransactionManager
19909,19909,17.7 Choosing between programmatic and declarative transaction management
19924,19924,17.8 Transaction bound event
19953,19953,17.9 Application server-specific integration
19975,19975,17.9.1 IBM WebSphere
19983,19983,17.9.2 Oracle WebLogic Server
19993,19993,17.10 Solutions to common problems
19995,19995,17.10.1 Use of the wrong transaction manager for a specific DataSource
20009,20009,17.11 Further Resources
20025,20025,18. DAO support
20027,20027,18.1 Introduction
20035,20035,18.2 Consistent exception hierarchy
20065,20065,18.3 Annotations used for configuring DAO or Repository classes
20127,20127,19. Data access with JDBC
20129,20129,19.1 Introduction to Spring Framework JDBC
20141,20141,19.1.1 Choosing an approach for JDBC database access
20172,20172,19.1.2 Package hierarchy
20203,20203,19.2 Using the JDBC core classes to control basic JDBC processing and error handling
20205,20205,19.2.1 JdbcTemplate
20418,20418,19.2.2 NamedParameterJdbcTemplate
20522,20522,19.2.3 SQLExceptionTranslator
20602,20602,19.2.4 Executing statements
20624,20624,19.2.5 Running queries
20667,20667,19.2.6 Updating the database
20690,20690,19.2.7 Retrieving auto-generated keys
20717,20717,19.3 Controlling database connections
20719,20719,19.3.1 DataSource
20781,20781,19.3.2 DataSourceUtils
20787,20787,19.3.3 SmartDataSource
20794,20794,19.3.4 AbstractDataSource
20801,20801,19.3.5 SingleConnectionDataSource
20815,20815,19.3.6 DriverManagerDataSource
20828,20828,19.3.7 TransactionAwareDataSourceProxy
20843,20843,19.3.8 DataSourceTransactionManager
20864,20864,19.3.9 NativeJdbcExtractor
20892,20892,19.4 JDBC batch operations
20897,20897,19.4.1 Basic batch operations with the JdbcTemplate
20938,20938,19.4.2 Batch operations with a List of objects
21001,21001,19.4.3 Batch operations with multiple batches
21048,21048,19.5 Simplifying JDBC operations with the SimpleJdbc classes
21054,21054,19.5.1 Inserting data using SimpleJdbcInsert
21089,21089,19.5.2 Retrieving auto-generated keys using SimpleJdbcInsert
21125,21125,19.5.3 Specifying columns for a SimpleJdbcInsert
21156,21156,19.5.4 Using SqlParameterSource to provide parameter values
21213,21213,19.5.5 Calling a stored procedure with SimpleJdbcCall
21303,21303,19.5.6 Explicitly declaring parameters to use for a SimpleJdbcCall
21349,21349,19.5.7 How to define SqlParameters
21376,21376,19.5.8 Calling a stored function using SimpleJdbcCall
21424,21424,19.5.9 Returning ResultSet/REF Cursor from a SimpleJdbcCall
21470,21470,19.6 Modeling JDBC operations as Java objects
21486,21486,19.6.1 SqlQuery
21496,21496,19.6.2 MappingSqlQuery
21551,21551,19.6.3 SqlUpdate
21587,21587,19.6.4 StoredProcedure
21764,21764,19.7 Common problems with parameter and data value handling
21768,21768,19.7.1 Providing SQL type information for parameters
21790,21790,19.7.2 Handling BLOB and CLOB objects
21876,21876,19.7.3 Passing in lists of values for IN clause
21898,21898,19.7.4 Handling complex types for stored procedure calls
21960,21960,19.8 Embedded database support
21967,21967,19.8.1 Why use an embedded database?
21973,21973,19.8.2 Creating an embedded database using Spring XML
21987,21987,19.8.3 Creating an embedded database programmatically
22024,22024,19.8.4 Selecting the embedded database type
22046,22046,19.8.5 Testing data access logic with an embedded database
22083,22083,19.8.6 Generating unique names for embedded databases
22113,22113,19.8.7 Extending the embedded database support
22126,22126,19.9 Initializing a DataSource
22132,22132,19.9.1 Initializing a database using Spring XML
22239,22239,20. Object Relational Mapping (ORM) Data Access
22241,22241,20.1 Introduction to ORM with Spring
22310,22310,20.2 General ORM integration considerations
22327,22327,20.2.1 Resource and transaction management
22348,22348,20.2.2 Exception translation
22386,22386,20.3 Hibernate
22399,22399,20.3.1 SessionFactory setup in a Spring container
22442,22442,20.3.2 Implementing DAOs based on plain Hibernate API
22500,22500,20.3.3 Declarative transaction demarcation
22628,22628,20.3.4 Programmatic transaction demarcation
22679,22679,20.3.5 Transaction management strategies
22779,22779,20.3.6 Comparing container-managed and locally defined resources
22820,22820,20.3.7 Spurious application server warnings with Hibernate
22889,22889,20.4 JDO
22894,22894,20.4.1 PersistenceManagerFactory setup
22936,22936,20.4.2 Implementing DAOs based on the plain JDO API
23039,23039,20.4.3 Transaction management
23096,23096,20.4.4 JdoDialect
23120,23120,20.5 JPA
23127,23127,20.5.1 Three options for JPA setup in a Spring environment
23318,23318,20.5.2 Implementing DAOs based on plain JPA
23424,23424,20.5.3 Transaction Management
23473,23473,20.5.4 JpaDialect
23496,23496,21. Marshalling XML using O/X Mappers
23498,23498,21.1 Introduction
23509,23509,21.1.1 Ease of configuration
23517,23517,21.1.2 Consistent Interfaces
23527,23527,21.1.3 Consistent Exception Hierarchy
23534,23534,21.2 Marshaller and Unmarshaller
23539,23539,21.2.1 Marshaller
23567,23567,21.2.2 Unmarshaller
23590,23590,21.2.3 XmlMappingException
23605,23605,21.3 Using Marshaller and Unmarshaller
23703,23703,21.4 XML Schema-based Configuration
23726,23726,21.5 JAXB
23735,23735,21.5.1 Jaxb2Marshaller
23776,23776,21.6 Castor
23785,23785,21.6.1 CastorMarshaller
23794,23794,21.6.2 Mapping
23827,23827,21.7 XMLBeans
23836,23836,21.7.1 XmlBeansMarshaller
23863,23863,21.8 JiBX
23873,23873,21.8.1 JibxMarshaller
23900,23900,21.9 XStream
23907,23907,21.9.1 XStreamMarshaller
23975,23975,22. Web MVC framework
23977,23977,22.1 Introduction to Spring Web MVC framework
24022,24022,22.1.1 Features of Spring Web MVC
24088,24088,22.1.2 Pluggability of other MVC implementations
24108,24108,22.2 The DispatcherServlet
24254,24254,22.2.1 Special Bean Types In the WebApplicationContext
24276,24276,22.2.2 Default DispatcherServlet Configuration
24297,24297,22.2.3 DispatcherServlet Processing Sequence
24350,24350,22.3 Implementing Controllers
24385,24385,22.3.1 Defining a controller with @Controller
24418,24418,22.3.2 Mapping Requests With @RequestMapping
24968,24968,22.3.3 Defining @RequestMapping handler methods
25787,25787,22.3.4 Asynchronous Request Processing
26052,26052,22.3.5 Testing Controllers
26058,26058,22.4 Handler mappings
26098,26098,22.4.1 Intercepting requests with a HandlerInterceptor
26183,26183,22.5 Resolving views
26194,26194,22.5.1 Resolving views with the ViewResolver interface
26251,26251,22.5.2 Chaining ViewResolvers
26293,26293,22.5.3 Redirecting to Views
26396,26396,22.5.4 ContentNegotiatingViewResolver
26501,26501,22.6 Using flash attributes
26539,26539,22.7 Building URIs
26581,26581,22.7.1 Building URIs to Controllers and methods
26628,26628,22.7.2 Building URIs to Controllers and methods from views
26663,26663,22.8 Using locales
26679,26679,22.8.1 Obtaining Time Zone Information
26689,26689,22.8.2 AcceptHeaderLocaleResolver
26696,26696,22.8.3 CookieLocaleResolver
26718,26718,22.8.4 SessionLocaleResolver
26729,26729,22.8.5 LocaleChangeInterceptor
26759,26759,22.9 Using themes
26761,26761,22.9.1 Overview of themes
26768,26768,22.9.2 Defining themes
26804,26804,22.9.3 Theme resolvers
26820,26820,22.10 Spring’s multipart (file upload) support
26822,26822,22.10.1 Introduction
26837,26837,22.10.2 Using a MultipartResolver with Commons FileUpload
26857,26857,22.10.3 Using a MultipartResolver with Servlet 3.0
26872,26872,22.10.4 Handling a file upload in a form
26931,26931,22.10.5 Handling a file upload request from programmatic clients
26976,26976,22.11 Handling exceptions
26978,26978,22.11.1 HandlerExceptionResolver
27000,27000,22.11.2 @ExceptionHandler
27038,27038,22.11.3 Handling Standard Spring MVC Exceptions
27067,27067,22.11.4 Annotating Business Exceptions With @ResponseStatus
27074,27074,22.11.5 Customizing the Default Servlet Container Error Page
27113,27113,22.12 Web Security
27128,27128,22.13 Convention over configuration support
27140,27140,22.13.1 The Controller ControllerClassNameHandlerMapping
27191,27191,22.13.2 The Model ModelMap (ModelAndView)
27262,27262,22.13.3 The View - RequestToViewNameTranslator
27325,27325,22.14 HTTP caching support
27340,27340,22.14.1 Cache-Control HTTP header
27372,27372,22.14.2 HTTP caching support for static resources
27398,27398,22.14.3 Support for the Cache-Control, ETag and Last-Modified response headers in Controllers
27460,27460,22.14.4 Shallow ETag support
27506,27506,22.15 Code-based Servlet container initialization
27593,27593,22.16 Configuring Spring MVC
27608,27608,22.16.1 Enabling the MVC Java Config or the MVC XML Namespace
27708,27708,22.16.2 Customizing the Provided Configuration
27726,27726,22.16.3 Conversion and Formatting
27782,27782,22.16.4 Validation
27845,27845,22.16.5 Interceptors
27876,27876,22.16.6 Content Negotiation
27925,27925,22.16.7 View Controllers
27944,27944,22.16.8 View Resolvers
28005,28005,22.16.9 Serving of Resources
28122,28122,22.16.10 Falling Back On the "Default" Servlet To Serve Resources
28168,28168,22.16.11 Path Matching
28212,28212,22.16.12 Message Converters
28271,28271,22.16.13 Advanced Customizations with MVC Java Config
28314,28314,22.16.14 Advanced Customizations with the MVC Namespace
28337,28337,23. View technologies
28339,28339,23.1 Introduction
28349,28349,23.2 Thymeleaf
28359,28359,23.3 Groovy Markup Templates
28366,28366,23.3.1 Configuration
28394,28394,23.3.2 Example
28410,28410,23.4 Velocity & FreeMarker
28422,28422,23.4.1 Dependencies
28433,28433,23.4.2 Context configuration
28474,28474,23.4.3 Creating templates
28485,28485,23.4.4 Advanced configuration
28540,28540,23.4.5 Bind support and form handling
28778,28778,23.5 JSP & JSTL
28793,28793,23.5.1 View resolvers
28822,28822,23.5.2 'Plain-old' JSPs versus JSTL
28828,28828,23.5.3 Additional tags facilitating development
28838,28838,23.5.4 Using Spring’s form tag library
29384,29384,23.6 Script templates
29404,29404,23.6.1 Dependencies
29425,29425,23.6.2 How to integrate script based templating
29538,29538,23.7 XML Marshalling View
29548,29548,23.8 Tiles
29556,29556,23.8.1 Dependencies
29562,29562,23.8.2 How to integrate Tiles
29668,29668,23.9 XSLT
29675,29675,23.9.1 My First Words
29785,29785,23.10 Document views (PDF/Excel)
29787,29787,23.10.1 Introduction
29797,29797,23.10.2 Configuration and setup
29920,29920,23.11 JasperReports
29926,29926,23.11.1 Dependencies
29947,29947,23.11.2 Configuration
30033,30033,23.11.3 Populating the ModelAndView
30072,30072,23.11.4 Working with Sub-Reports
30126,30126,23.11.5 Configuring Exporter Parameters
30153,30153,23.12 Feed Views
30200,30200,23.13 JSON Mapping View
30217,30217,23.14 XML Mapping View
30230,30230,24. Integrating with other web frameworks
30232,30232,24.1 Introduction
30280,30280,24.2 Common configuration
30337,30337,24.3 JavaServer Faces 1.2
30352,30352,24.3.1 SpringBeanFacesELResolver (JSF 1.2+)
30368,30368,24.3.2 FacesContextUtils
30378,30378,24.4 Apache Struts 2.x
30390,30390,24.5 Tapestry 5.x
30402,30402,24.6 Further Resources
30415,30415,25. Portlet MVC Framework
30417,30417,25.1 Introduction
30477,30477,25.1.1 Controllers - The C in MVC
30490,30490,25.1.2 Views - The V in MVC
30498,30498,25.1.3 Web-scoped beans
30507,30507,25.2 The DispatcherPortlet
30593,30593,25.3 The ViewRendererServlet
30627,30627,25.4 Controllers
30658,30658,25.4.1 AbstractController and PortletContentGenerator
30716,30716,25.4.2 Other simple controllers
30728,30728,25.4.3 Command Controllers
30769,30769,25.4.4 PortletWrappingController
30787,30787,25.5 Handler mappings
30835,30835,25.5.1 PortletModeHandlerMapping
30849,30849,25.5.2 ParameterHandlerMapping
30868,30868,25.5.3 PortletModeParameterHandlerMapping
30902,30902,25.5.4 Adding HandlerInterceptors
30926,30926,25.5.5 HandlerInterceptorAdapter
30933,30933,25.5.6 ParameterMappingInterceptor
30949,30949,25.6 Views and resolving them
30976,30976,25.7 Multipart (file upload) support
30999,30999,25.7.1 Using the PortletMultipartResolver
31021,31021,25.7.2 Handling a file upload in a form
31187,31187,25.8 Handling exceptions
31195,31195,25.9 Annotation-based controller configuration
31206,31206,25.9.1 Setting up the dispatcher for annotation support
31233,31233,25.9.2 Defining a controller with @Controller
31266,31266,25.9.3 Mapping requests with @RequestMapping
31383,31383,25.9.4 Supported handler method arguments
31471,31471,25.9.5 Binding request parameters to method parameters with @RequestParam
31495,31495,25.9.6 Providing a link to data from the model with @ModelAttribute
31537,31537,25.9.7 Specifying attributes to store in a Session with @SessionAttributes
31551,31551,25.9.8 Customizing WebDataBinder initialization
31593,31593,25.10 Portlet application deployment
31623,31623,26. WebSocket Support
31641,31641,26.1 Introduction
31659,31659,26.1.1 WebSocket Fallback Options
31675,31675,26.1.2 A Messaging Architecture
31697,31697,26.1.3 Sub-Protocol Support in WebSocket
31725,31725,26.1.4 Should I Use WebSocket?
31761,31761,26.2 WebSocket API
31778,31778,26.2.1 Create and Configure a WebSocketHandler
31838,31838,26.2.2 Customizing the WebSocket Handshake
31885,31885,26.2.3 WebSocketHandler Decoration
31894,31894,26.2.4 Deployment Considerations
31951,31951,26.2.5 Configuring the WebSocket Engine
32050,32050,26.2.6 Configuring allowed origins
32111,32111,26.3 SockJS Fallback Options
32118,32118,26.3.1 Overview of SockJS
32174,32174,26.3.2 Enable SockJS
32223,32223,26.3.3 HTTP Streaming in IE 8, 9: Ajax/XHR vs IFrame
32288,32288,26.3.4 Heartbeat Messages
32305,32305,26.3.5 Servlet 3 Async Requests
32328,32328,26.3.6 CORS Headers for SockJS
32354,32354,26.3.7 SockJS Client
32414,32414,26.4 STOMP Over WebSocket Messaging Architecture
32422,32422,26.4.1 Overview of STOMP
32506,32506,26.4.2 Enable STOMP over WebSocket
32584,32584,26.4.3 Flow of Messages
32683,32683,26.4.4 Annotation Message Handling
32755,32755,26.4.5 Sending Messages
32782,32782,26.4.6 Simple Broker
32793,32793,26.4.7 Full-Featured Broker
32855,32855,26.4.8 Connections To Full-Featured Broker
32892,32892,26.4.9 Using Dot as Separator in @MessageMapping Destinations
32945,32945,26.4.10 Authentication
32973,32973,26.4.11 User Destinations
33068,33068,26.4.12 Listening To ApplicationContext Events and Intercepting Messages
33137,33137,26.4.13 STOMP Client
33206,33206,26.4.14 WebSocket Scope
33262,33262,26.4.15 Configuration and Performance
33386,33386,26.4.16 Runtime Monitoring
33456,33456,26.4.17 Testing Annotated Controller Methods
33495,33495,27. CORS Support
33497,33497,27.1 Introduction
33523,33523,27.2 Controller method CORS configuration
33583,33583,27.3 Global CORS configuration
33589,33589,27.3.1 JavaConfig
33618,33618,27.3.2 XML namespace
33641,33641,27.4 Advanced Customization
33660,33660,27.5 Filter based CORS support
33720,33720,28. Remoting and web services using Spring
33722,33722,28.1 Introduction
33792,33792,28.2 Exposing services using RMI
33800,33800,28.2.1 Exporting the service using the RmiServiceExporter
33829,33829,28.2.2 Linking in the service at the client
33858,33858,28.3 Using Hessian or Burlap to remotely call services via HTTP
33862,33862,28.3.1 Wiring up the DispatcherServlet for Hessian and co.
33888,33888,28.3.2 Exposing your beans by using the HessianServiceExporter
33925,33925,28.3.3 Linking in the service on the client
33940,33940,28.3.4 Using Burlap
33946,33946,28.3.5 Applying HTTP basic authentication to a service exposed through Hessian or Burlap
33972,33972,28.4 Exposing services using HTTP invokers
33985,33985,28.4.1 Exposing the service object
34037,34037,28.4.2 Linking in the service at the client
34054,34054,28.5 Web services
34066,34066,28.5.1 Exposing servlet-based web services using JAX-WS
34114,34114,28.5.2 Exporting standalone web services using JAX-WS
34157,34157,28.5.3 Exporting web services using the JAX-WS RI’s Spring support
34174,34174,28.5.4 Accessing web services using JAX-WS
34221,34221,28.6 JMS
34265,34265,28.6.1 Server-side configuration
34303,34303,28.6.2 Client-side configuration
34340,34340,28.7 AMQP
34345,34345,28.8 Auto-detection is not implemented for remote interfaces
34361,34361,28.9 Considerations when choosing a technology
34392,34392,28.10 Accessing RESTful services on the Client
34405,34405,28.10.1 RestTemplate
34584,34584,28.10.2 HTTP Message Conversion
34675,34675,28.10.3 Async RestTemplate
34726,34726,29. Enterprise JavaBeans (EJB) integration
34728,34728,29.1 Introduction
34745,34745,29.2 Accessing EJBs
34747,34747,29.2.1 Concepts
34774,34774,29.2.2 Accessing local SLSBs
34851,34851,29.2.3 Accessing remote SLSBs
34878,34878,29.2.4 Accessing EJB 2.x SLSBs versus EJB 3 SLSBs
34891,34891,29.3 Using Spring’s EJB implementation support classes
34893,34893,29.3.1 EJB 3 injection interceptor
34929,34929,30. JMS (Java Message Service)
34931,34931,30.1 Introduction
34971,34971,30.2 Using Spring JMS
34973,34973,30.2.1 JmsTemplate
35012,35012,30.2.2 Connections
35059,35059,30.2.3 Destination Management
35099,35099,30.2.4 Message Listener Containers
35171,35171,30.2.5 Transaction management
35201,35201,30.3 Sending a Message
35250,35250,30.3.1 Using Message Converters
35298,35298,30.3.2 SessionCallback and ProducerCallback
35307,35307,30.4 Receiving a message
35309,35309,30.4.1 Synchronous Reception
35318,35318,30.4.2 Asynchronous Reception - Message-Driven POJOs
35371,35371,30.4.3 the SessionAwareMessageListener interface
35397,35397,30.4.4 the MessageListenerAdapter
35486,35486,30.4.5 Processing messages within transactions
35525,35525,30.5 Support for JCA Message Endpoints
35591,35591,30.6 Annotation-driven listener endpoints
35616,35616,30.6.1 Enable listener endpoint annotations
35653,35653,30.6.2 Programmatic endpoints registration
35679,35679,30.6.3 Annotated endpoint method signature
35742,35742,30.6.4 Response management
35787,35787,30.7 JMS Namespace Support
35931,35931,31. JMX
35933,35933,31.1 Introduction
35958,35958,31.2 Exporting your beans to JMX
36027,36027,31.2.1 Creating an MBeanServer
36070,36070,31.2.2 Reusing an existing MBeanServer
36104,36104,31.2.3 Lazy-initialized MBeans
36112,36112,31.2.4 Automatic registration of MBeans
36128,36128,31.2.5 Controlling the registration behavior
36178,36178,31.3 Controlling the management interface of your beans
36186,36186,31.3.1 the MBeanInfoAssembler Interface
36198,36198,31.3.2 Using Source-Level Metadata (Java annotations)
36323,36323,31.3.3 Source-Level Metadata Types
36337,36337,31.3.4 the AutodetectCapableMBeanInfoAssembler interface
36375,36375,31.3.5 Defining management interfaces using Java interfaces
36444,36444,31.3.6 Using MethodNameBasedMBeanInfoAssembler
36471,36471,31.4 Controlling the ObjectNames for your beans
36482,36482,31.4.1 Reading ObjectNames from Properties
36527,36527,31.4.2 Using the MetadataNamingStrategy
36563,36563,31.4.3 Configuring annotation based MBean export
36601,36601,31.5 JSR-160 Connectors
36606,36606,31.5.1 Server-side Connectors
36651,36651,31.5.2 Client-side Connectors
36659,36659,31.5.3 JMX over Burlap/Hessian/SOAP
36675,36675,31.6 Accessing MBeans via Proxies
36710,36710,31.7 Notifications
36713,36713,31.7.1 Registering Listeners for Notifications
36896,36896,31.7.2 Publishing Notifications
36966,36966,31.8 Further Resources
36984,36984,32. JCA CCI
36986,36986,32.1 Introduction
37014,37014,32.2 Configuring CCI
37016,37016,32.2.1 Connector configuration
37042,37042,32.2.2 ConnectionFactory configuration in Spring
37069,37069,32.2.3 Configuring CCI connections
37112,37112,32.2.4 Using a single CCI connection
37143,37143,32.3 Using Spring’s CCI access support
37145,37145,32.3.1 Record conversion
37194,37194,32.3.2 the CciTemplate
37274,37274,32.3.3 DAO support
37301,37301,32.3.4 Automatic output record generation
37327,37327,32.3.5 Summary
37336,37336,32.3.6 Using a CCI Connection and Interaction directly
37365,37365,32.3.7 Example for CciTemplate usage
37469,37469,32.4 Modeling CCI access as operation objects
37482,37482,32.4.1 MappingRecordOperation
37532,37532,32.4.2 MappingCommAreaOperation
37555,37555,32.4.3 Automatic output record generation
37562,37562,32.4.4 Summary
37570,37570,32.4.5 Example for MappingRecordOperation usage
37668,37668,32.4.6 Example for MappingCommAreaOperation usage
37742,37742,32.5 Transactions
37780,37780,33. Email
37782,37782,33.1 Introduction
37811,37811,33.2 Usage
37821,37821,33.2.1 Basic MailSender and SimpleMailMessage usage
37880,37880,33.2.2 Using the JavaMailSender and the MimeMessagePreparator
37943,37943,33.3 Using the JavaMail MimeMessageHelper
37959,37959,33.3.1 Sending attachments and inline resources
38014,38014,33.3.2 Creating email content using a templating library
38135,38135,34. Task Execution and Scheduling
38137,38137,34.1 Introduction
38153,38153,34.2 The Spring TaskExecutor abstraction
38170,38170,34.2.1 TaskExecutor types
38217,38217,34.2.2 Using a TaskExecutor
38269,38269,34.3 The Spring TaskScheduler abstraction
38293,38293,34.3.1 the Trigger interface
38320,38320,34.3.2 Trigger implementations
38338,38338,34.3.3 TaskScheduler implementations
38355,38355,34.4 Annotation Support for Scheduling and Asynchronous Execution
38359,38359,34.4.1 Enable scheduling annotations
38380,38380,34.4.2 The @Scheduled Annotation
38427,38427,34.4.3 The @Async Annotation
38488,38488,34.4.4 Executor qualification with @Async
38502,38502,34.4.5 Exception management with @Async
38520,38520,34.5 The Task Namespace
38525,38525,34.5.1 The 'scheduler' element
38535,38535,34.5.2 The 'executor' element
38602,38602,34.5.3 The 'scheduled-tasks' element
38633,38633,34.6 Using the Quartz Scheduler
38639,38639,34.6.1 Using the JobDetailFactoryBean
38684,38684,34.6.2 Using the MethodInvokingJobDetailFactoryBean
38722,38722,34.6.3 Wiring up jobs using triggers and the SchedulerFactoryBean
38767,38767,35. Dynamic language support
38769,38769,35.1 Introduction
38794,38794,35.2 A first example
38880,38880,35.3 Defining beans that are backed by dynamic languages
38889,38889,35.3.1 Common concepts
39133,39133,35.3.2 JRuby beans
39225,39225,35.3.3 Groovy beans
39345,39345,35.3.4 BeanShell beans
39400,39400,35.4 Scenarios
39405,39405,35.4.1 Scripted Spring MVC Controllers
39456,39456,35.4.2 Scripted Validators
39495,39495,35.5 Bits and bobs
39498,39498,35.5.1 AOP - advising scripted beans
39511,39511,35.5.2 Scoping
39540,39540,35.6 Further Resources
39553,39553,36. Cache Abstraction
39555,39555,36.1 Introduction
39564,39564,36.2 Understanding the cache abstraction
39633,39633,36.3 Declarative annotation-based caching
39648,39648,36.3.1 @Cacheable annotation
39825,39825,36.3.2 @CachePut annotation
39845,39845,36.3.3 @CacheEvict annotation
39876,39876,36.3.4 @Caching annotation
39885,39885,36.3.5 @CacheConfig annotation
39912,39912,36.3.6 Enable caching annotations
40005,40005,36.3.7 Using custom annotations
40041,40041,36.4 JCache (JSR-107) annotations
40052,40052,36.4.1 Features summary
40105,40105,36.4.2 Enabling JSR-107 support
40120,40120,36.5 Declarative XML-based caching
40164,40164,36.6 Configuring the cache storage
40169,40169,36.6.1 JDK ConcurrentMap-based Cache
40191,40191,36.6.2 EhCache-based Cache
40205,40205,36.6.3 Caffeine Cache
40227,40227,36.6.4 Guava Cache
40248,40248,36.6.5 GemFire-based Cache
40256,40256,36.6.6 JSR-107 Cache
40268,40268,36.6.7 Dealing with caches without a backing store
40293,40293,36.7 Plugging-in different back-end caches
40306,40306,36.8 How can I set the TTL/TTI/Eviction policy/XXX feature?
40319,40319,37. Migrating to Spring Framework 4.x
40324,40324,38. Spring Annotation Programming Model
40329,40329,39. Classic Spring Usage
40335,40335,39.1 Classic ORM usage
40340,40340,39.1.1 Hibernate
40457,40457,39.2 JMS Usage
40483,40483,39.2.1 JmsTemplate
40493,40493,39.2.2 Asynchronous Message Reception
40503,40503,39.2.3 Connections
40513,40513,39.2.4 Transaction Management
40522,40522,40. Classic Spring AOP Usage
40530,40530,40.1 Pointcut API in Spring
40533,40533,40.1.1 Concepts
40582,40582,40.1.2 Operations on pointcuts
40598,40598,40.1.3 AspectJ expression pointcuts
40605,40605,40.1.4 Convenience pointcut implementations
40687,40687,40.1.5 Pointcut superclasses
40703,40703,40.1.6 Custom pointcuts
40715,40715,40.2 Advice API in Spring
40718,40718,40.2.1 Advice lifecycles
40730,40730,40.2.2 Advice types in Spring
41028,41028,40.3 Advisor API in Spring
41041,41041,40.4 Using the ProxyFactoryBean to create AOP proxies
41054,41054,40.4.1 Basics
41068,41068,40.4.2 JavaBean properties
41130,41130,40.4.3 JDK- and CGLIB-based proxies
41173,41173,40.4.4 Proxying interfaces
41261,41261,40.4.5 Proxying classes
41291,41291,40.4.6 Using 'global' advisors
41309,41309,40.5 Concise proxy definitions
41359,41359,40.6 Creating AOP proxies programmatically with the ProxyFactory
41386,41386,40.7 Manipulating advised objects
41458,41458,40.8 Using the "autoproxy" facility
41475,41475,40.8.1 Autoproxy bean definitions
41564,41564,40.8.2 Using metadata-driven auto-proxying
41671,41671,40.9 Using TargetSources
41690,41690,40.9.1 Hot swappable target sources
41716,41716,40.9.2 Pooling target sources
41778,41778,40.9.3 Prototype target sources
41794,41794,40.9.4 ThreadLocal target sources
41817,41817,40.10 Defining new Advice types
41830,41830,40.11 Further resources
41842,41842,41. XML Schema-based configuration
41844,41844,41.1 Introduction
41883,41883,41.2 XML Schema-based configuration
41885,41885,41.2.1 Referencing the schemas
41923,41923,41.2.2 the util schema
42241,42241,41.2.3 the jee schema
42388,42388,41.2.4 the lang schema
42408,42408,41.2.5 the jms schema
42427,42427,41.2.6 the tx (transaction) schema
42460,42460,41.2.7 the aop schema
42478,42478,41.2.8 the context schema
42534,42534,41.2.9 the tool schema
42547,42547,41.2.10 the jdbc schema
42564,42564,41.2.11 the cache schema
42581,42581,41.2.12 the beans schema
42614,42614,42. Extensible XML authoring
42616,42616,42.1 Introduction
42651,42651,42.2 Authoring the schema
42703,42703,42.3 Coding a NamespaceHandler
42753,42753,42.4 BeanDefinitionParser
42800,42800,42.5 Registering the handler and the schema
42809,42809,42.5.1 'META-INF/spring.handlers'
42820,42820,42.5.2 'META-INF/spring.schemas'
42834,42834,42.6 Using a custom extension in your Spring XML configuration
42860,42860,42.7 Meatier examples
42863,42863,42.7.1 Nesting custom tags within custom tags
43046,43046,42.7.2 Custom attributes on 'normal' elements
43166,43166,42.8 Further Resources
43179,43179,43. spring JSP Tag Library
43181,43181,43.1 Introduction
43217,43217,43.2 The argument tag
43226,43226,43.3 The bind tag
43239,43239,43.4 The escapeBody tag
43250,43250,43.5 The eval tag
43263,43263,43.6 The hasBindErrors tag
43275,43275,43.7 The htmlEscape tag
43284,43284,43.8 The message tag
43307,43307,43.9 The nestedPath tag
43316,43316,43.10 The param tag
43325,43325,43.11 The theme tag
43344,43344,43.12 The transform tag
43361,43361,43.13 The url tag
43378,43378,44. spring-form JSP Tag Library
43380,43380,44.1 Introduction
43422,43422,44.2 The button tag
43430,43430,44.3 The checkbox tag
43438,43438,44.4 The checkboxes tag
43446,43446,44.5 The errors tag
43454,43454,44.6 The form tag
43465,43465,44.7 The hidden tag
43473,43473,44.8 The input tag
43481,43481,44.9 The label tag
43489,43489,44.10 The option tag
43497,43497,44.11 The options tag
43505,43505,44.12 The password tag
43513,43513,44.13 The radiobutton tag
43521,43521,44.14 The radiobuttons tag
43529,43529,44.15 The select tag
43537,43537,44.16 The textarea tag
